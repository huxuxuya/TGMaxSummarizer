#!/usr/bin/env python3
"""
üîç –û—Ç–ª–∞–¥–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ VK MAX

–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
"""

import asyncio
import logging
from core.app_context import get_app_context
from infrastructure.vk.client import VKMaxClient
from shared.image_utils import ImageDownloader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

async def debug_image_extraction():
    """–û—Ç–ª–∞–¥–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    logger.info("üîç –û–¢–õ–ê–î–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    logger.info("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ctx = get_app_context()
        vk_token = ctx.config['bot'].vk_max_token
        
        if not vk_token:
            logger.error("‚ùå VK MAX —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        vk_client = VKMaxClient(vk_token)
        image_downloader = ImageDownloader()
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
        chats = await vk_client.get_available_chats()
        
        if not chats:
            logger.error("‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç
        test_chat = chats[0]
        logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç: {test_chat.title}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info("üì® –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
        messages = await vk_client.load_chat_messages(test_chat.id, days_back=3)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å attachments
        messages_with_attachments = []
        for msg in messages:
            if hasattr(msg, 'attachments') and msg.attachments:
                messages_with_attachments.append(msg)
        
        logger.info(f"üìé –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å attachments: {len(messages_with_attachments)}")
        
        if not messages_with_attachments:
            logger.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π —Å attachments –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å attachments
        for i, msg in enumerate(messages_with_attachments[:3]):
            logger.info(f"\n--- –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} ---")
            logger.info(f"ID: {msg.id}")
            logger.info(f"Text: {msg.text[:100]}..." if msg.text else "Text: (–ø—É—Å—Ç–æ)")
            logger.info(f"Attachments type: {type(msg.attachments)}")
            logger.info(f"Attachments: {msg.attachments}")
            
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            try:
                image_urls = image_downloader.extract_image_urls(msg.attachments)
                logger.info(f"üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_urls)}")
                for j, url in enumerate(image_urls):
                    logger.info(f"  {j+1}. {url}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ URL: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_images = 0
        for msg in messages_with_attachments:
            try:
                image_urls = image_downloader.extract_image_urls(msg.attachments)
                total_images += len(image_urls)
            except:
                pass
        
        logger.info(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π —Å attachments: {len(messages_with_attachments)}")
        logger.info(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_image_extraction())
