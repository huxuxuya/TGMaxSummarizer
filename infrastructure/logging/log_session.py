"""
LogSession - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ —Å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
"""
import asyncio
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class LogSession:
    """–°–µ–∞–Ω—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–º"""
    
    def __init__(self, base_path: Path, run_meta: Dict[str, Any]):
        self.base_path = base_path
        self.sequence = 0
        self.manifest_path = base_path / "manifest.json"
        self.lock = asyncio.Lock()
        self.run_meta = run_meta
        self._init_manifest()
    
    def _init_manifest(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—É—Å–∫–∞"""
        manifest_data = {
            "run_meta": self.run_meta,
            "steps": [],
            "created_at": datetime.now().isoformat(),
            "sequence_counter": 0
        }
        
        try:
            with open(self.manifest_path, 'w', encoding='utf-8') as f:
                json.dump(manifest_data, f, ensure_ascii=False, indent=2)
            logger.debug(f"üìã –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.manifest_path}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
    
    async def log_phase(self, step: str, phase: str, content: str, meta: Optional[Dict[str, Any]] = None) -> str:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∑—É —à–∞–≥–∞ —Å –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∑–∞–ø–∏—Å—å—é
        
        Args:
            step: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞ (cleaning, summarization, reflection, etc.)
            phase: –§–∞–∑–∞ (request, response)
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            meta: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        async with self.lock:
            self.sequence += 1
            seq = f"{self.sequence:02d}"
            filename = f"{seq}_{step}_{phase}.txt"
            
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
            await self._write_atomic(filename, content)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            entry = {
                "seq": self.sequence,
                "step": step,
                "phase": phase,
                "filename": filename,
                "timestamp": datetime.now().isoformat(),
                "monotonic_time": time.monotonic_ns(),
                **(meta or {})
            }
            await self._append_manifest(entry)
            
            logger.debug(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω {step}/{phase} -> {filename}")
            return str(self.base_path / filename)
    
    async def _write_atomic(self, filename: str, content: str):
        """–ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è"""
        temp_path = self.base_path / f".{filename}.tmp"
        final_path = self.base_path / filename
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(temp_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
            temp_path.replace(final_path)
            
        except Exception as e:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if temp_path.exists():
                temp_path.unlink()
            raise e
    
    async def _append_manifest(self, entry: Dict[str, Any]):
        """–ê—Ç–æ–º–∞—Ä–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
            if self.manifest_path.exists():
                with open(self.manifest_path, 'r', encoding='utf-8') as f:
                    manifest_data = json.load(f)
            else:
                manifest_data = {"run_meta": self.run_meta, "steps": [], "created_at": datetime.now().isoformat()}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            manifest_data["steps"].append(entry)
            manifest_data["sequence_counter"] = self.sequence
            manifest_data["updated_at"] = datetime.now().isoformat()
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
            temp_manifest = self.manifest_path.with_suffix('.tmp')
            with open(temp_manifest, 'w', encoding='utf-8') as f:
                json.dump(manifest_data, f, ensure_ascii=False, indent=2)
            
            temp_manifest.replace(self.manifest_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
    
    def get_manifest(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞–Ω–∏—Ñ–µ—Å—Ç"""
        try:
            if self.manifest_path.exists():
                with open(self.manifest_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")
        
        return {"run_meta": self.run_meta, "steps": [], "created_at": datetime.now().isoformat()}
    
    def get_sequence(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return self.sequence

