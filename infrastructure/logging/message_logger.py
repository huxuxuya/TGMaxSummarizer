"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional
from telegram import Update

logger = logging.getLogger(__name__)

class TelegramMessageLogger:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö Telegram —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö)
    """
    
    LOG_DIR = Path("message_logs")
    
    @classmethod
    def is_logging_enabled(cls, direction: str = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        Args:
            direction: 'incoming' –∏–ª–∏ 'outgoing' (–µ—Å–ª–∏ None - –æ–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            
        Returns:
            bool: True –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
        """
        try:
            from core.app_context import get_app_context
            ctx = get_app_context()
            config = ctx.config['bot']
            
            if not config.enable_message_logging:
                return False
            
            if direction == 'incoming':
                return config.message_log_incoming
            elif direction == 'outgoing':
                return config.message_log_outgoing
            else:
                return True
                
        except Exception:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É - –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
            return False
    
    @classmethod
    def get_log_path(cls, direction: str, chat_id: int) -> Path:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –¥–∞—Ç—ã –∏ —Ç–∏–ø–∞ —á–∞—Ç–∞
        
        Args:
            direction: 'incoming' –∏–ª–∏ 'outgoing'
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            Path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
        """
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: message_logs/incoming|outgoing/YYYY-MM-DD/
        now = datetime.now()
        date_folder = now.strftime("%Y-%m-%d")
        log_folder = cls.LOG_DIR / direction / date_folder
        log_folder.mkdir(parents=True, exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ —Ç–∏–ø—É —á–∞—Ç–∞
        chat_prefix = "group" if chat_id < 0 else "user"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp_str = now.strftime("%H-%M-%S")
        microseconds = now.microsecond
        
        filename = f"{chat_prefix}_{abs(chat_id)}_{timestamp_str}-{microseconds:06d}.json"
        return log_folder / filename
    
    @classmethod
    def ensure_log_directory(cls) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        Returns:
            Path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ª–æ–≥–æ–≤
        """
        cls.LOG_DIR.mkdir(exist_ok=True)
        return cls.LOG_DIR
    
    @classmethod
    def get_legacy_log_path(cls) -> Path:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ —Å timestamp (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        
        Returns:
            Path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
        """
        cls.ensure_log_directory()
        
        # –°–æ–∑–¥–∞–µ–º timestamp —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        now = datetime.now()
        timestamp_str = now.strftime("%Y-%m-%d-%H-%M-%S")
        microseconds = now.microsecond
        
        filename = f"{timestamp_str}-{microseconds:06d}.json"
        return cls.LOG_DIR / filename
    
    @classmethod
    def log_message(cls, metadata: Dict[str, Any]) -> Path:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª
        
        Args:
            metadata: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            Path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–∞
        """
        log_path = cls.get_legacy_log_path()
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'timestamp' not in metadata:
            metadata['timestamp'] = datetime.now().isoformat()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            with open(log_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üìù Telegram message logged: {log_path}")
            return log_path
            
        except Exception as e:
            logger.error(f"‚ùå Failed to log telegram message: {e}")
            raise
    
    @classmethod
    def update_log(cls, log_path: Path, updates: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            log_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
            updates: –°–ª–æ–≤–∞—Ä—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥
            with open(log_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            data.update(updates)
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            data['updated_at'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥
            with open(log_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üìù Telegram message log updated: {log_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to update telegram message log {log_path}: {e}")
            return False
    
    @classmethod
    def log_success(cls, log_path: Path, message_id: Optional[int] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            log_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
            message_id: ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        updates = {
            'success': True,
            'completed_at': datetime.now().isoformat()
        }
        
        if message_id is not None:
            updates['message_id'] = message_id
        
        return cls.update_log(log_path, updates)
    
    @classmethod
    def log_error(cls, log_path: Path, error: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            log_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        updates = {
            'success': False,
            'error': str(error),
            'failed_at': datetime.now().isoformat()
        }
        
        return cls.update_log(log_path, updates)
    
    @classmethod
    def log_incoming_message(cls,
                            update: Update,
                            **kwargs) -> Optional[Path]:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            update: Update –æ–±—ä–µ–∫—Ç –æ—Ç Telegram
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            Path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ –∏–ª–∏ None –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        """
        if not cls.is_logging_enabled('incoming'):
            return None
        
        try:
            message = update.effective_message
            user = update.effective_user
            chat = update.effective_chat
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            is_callback = update.callback_query is not None
            
            metadata = {
                'timestamp': datetime.now().isoformat(),
                'direction': 'incoming',
                'user_id': user.id if user else None,
                'username': user.username if user else None,
                'first_name': user.first_name if user else None,
                'last_name': user.last_name if user else None,
                'chat_id': chat.id,
                'chat_type': chat.type,
                'message_id': message.message_id if message else None,
                'text': None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
                'caption': None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
                'has_photo': bool(message and message.photo),
                'has_document': bool(message and message.document),
                'has_video': bool(message and message.video),
                'has_audio': bool(message and message.audio),
                'command': None,
                'callback_data': None
            }
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if is_callback:
                # –î–ª—è callback queries –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ callback_data, –Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                metadata['callback_data'] = update.callback_query.data
                metadata['text'] = None  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è callback queries
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                metadata['text'] = message.text if message and message.text else None
                metadata['caption'] = message.caption if message and message.caption else None
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
                if message and message.text and message.text.startswith('/'):
                    metadata['command'] = message.text.split()[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for key, value in kwargs.items():
                if key not in metadata:
                    metadata[key] = value
            
            log_path = cls.get_log_path('incoming', chat.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            with open(log_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üì• Incoming message logged: {log_path}")
            return log_path
            
        except Exception as e:
            logger.error(f"‚ùå Failed to log incoming message: {e}")
            return None
    
    @classmethod
    def log_outgoing_message(cls,
                            chat_id: int,
                            text: str,
                            action: str = "send",
                            parse_mode: str = "Markdown",
                            context: Optional[Dict[str, Any]] = None,
                            **kwargs) -> Optional[Path]:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            action: –î–µ–π—Å—Ç–≤–∏–µ (send/edit)
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            Path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ –∏–ª–∏ None –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        """
        if not cls.is_logging_enabled('outgoing'):
            return None
        
        try:
            chat_type = "group" if chat_id < 0 else "user"
            
            metadata = {
                'timestamp': datetime.now().isoformat(),
                'direction': 'outgoing',
                'chat_id': chat_id,
                'chat_type': chat_type,
                'action': action,
                'parse_mode': parse_mode,
                'original_text': text,
                'formatted_text': kwargs.get('formatted_text', text),
                'content_type': kwargs.get('content_type', 'FORMATTED'),
                'success': None,
                'context': context or {}
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            for key, value in kwargs.items():
                if key not in metadata:
                    metadata[key] = value
            
            log_path = cls.get_log_path('outgoing', chat_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            with open(log_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üì§ Outgoing message logged: {log_path}")
            return log_path
            
        except Exception as e:
            logger.error(f"‚ùå Failed to log outgoing message: {e}")
            return None
    
    @classmethod
    def log_message_to_path(cls, log_path: Path, metadata: Dict[str, Any]) -> Path:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        try:
            with open(log_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            return log_path
        except Exception as e:
            logger.error(f"‚ùå Failed to log message to {log_path}: {e}")
            raise
    
    @classmethod
    def create_metadata(cls, 
                       chat_id: Optional[int] = None,
                       action: str = "send",
                       parse_mode: str = "MarkdownV2",
                       content_type: str = "FORMATTED",
                       original_text: str = "",
                       formatted_text: str = "") -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            action: –î–µ–π—Å—Ç–≤–∏–µ (send/edit)
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            original_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            formatted_text: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        return {
            'timestamp': datetime.now().isoformat(),
            'chat_id': chat_id,
            'action': action,
            'parse_mode': parse_mode,
            'content_type': content_type,
            'original_text': original_text,
            'formatted_text': formatted_text,
            'success': None  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
