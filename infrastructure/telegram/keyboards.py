"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram –±–æ—Ç–∞
"""
import json
import os
from typing import List, Dict
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from shared.utils import shorten_callback_data

def main_menu_keyboard(chats_count: int = 0, chats: list = None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)"""
    keyboard = []
    
    # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –º–∞–ª–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
    if chats and len(chats) <= 3:
        for chat in chats:
            # Support both Pydantic models and dicts
            if hasattr(chat, 'chat_id'):
                chat_id = chat.chat_id
                chat_name = chat.chat_name
            else:
                chat_id = chat['chat_id']
                chat_name = chat.get('chat_name', f'–ß–∞—Ç {chat_id}')
            
            keyboard.append([InlineKeyboardButton(
                f"üí¨ {chat_name}", 
                callback_data=f"quick_chat_{chat_id}"
            )])
    else:
        keyboard.append([InlineKeyboardButton(
            "üìä –í—ã–±—Ä–∞—Ç—å —á–∞—Ç", 
            callback_data="select_chat_quick"
        )])
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–±–µ–∑ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞)
    keyboard.append([InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="quick_actions")])
    
    # AI, –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    keyboard.extend([
        [InlineKeyboardButton("ü§ñ AI –ú–æ–¥–µ–ª–∏", callback_data="select_ai_provider")],
        [InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="schedule_management")],
        [InlineKeyboardButton("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏", callback_data="manage_chats")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
    ])
    
    return InlineKeyboardMarkup(keyboard)

def group_selection_keyboard(groups: list):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    keyboard = []
    for group in groups:
        # Support both Pydantic models and dicts
        if hasattr(group, 'group_id'):
            group_id = group.group_id
            group_name = group.group_name
        else:
            group_id = group['group_id']
            group_name = group['group_name']
        
        keyboard.append([InlineKeyboardButton(
            f"üì± {group_name}", 
            callback_data=f"select_group_{group_id}"
        )])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)

def group_selection_for_schedule_keyboard(groups: list):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    keyboard = []
    for group in groups:
        # Support both Pydantic models and dicts
        if hasattr(group, 'group_id'):
            group_id = group.group_id
            group_name = group.group_name
        else:
            group_id = group['group_id']
            group_name = group['group_name']
        
        keyboard.append([InlineKeyboardButton(
            f"üì± {group_name}", 
            callback_data=f"select_group_for_schedule_{group_id}"
        )])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

def chat_management_keyboard(group_id: int = None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="remove_chat")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data="list_chats")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞", callback_data="chat_settings")]
    ]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–µ–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if group_id:
        # –ï—Å–ª–∏ –º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_group_{group_id}")])
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–µ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

def group_chat_management_keyboard(group_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="remove_chat")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data="list_chats")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞", callback_data="chat_settings")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–µ", callback_data=f"back_to_group_{group_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def chat_list_keyboard(chats: list, has_schedule: bool = False, context: str = "select"):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    context: "select" (–¥–ª—è select_chat_) –∏–ª–∏ "quick" (–¥–ª—è quick_chat_)
    """
    keyboard = []
    for chat in chats:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context == "quick":
            callback_data = f"quick_chat_{chat['chat_id']}"
        else:
            callback_data = f"select_chat_{chat['chat_id']}"
            
        keyboard.append([InlineKeyboardButton(
            f"üí¨ {chat['chat_name']}", 
            callback_data=callback_data
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if has_schedule:
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="delete_schedule")])
    else:
        keyboard.append([InlineKeyboardButton("üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="set_schedule")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])  # –ò–°–ü–†–ê–í–õ–ï–ù–û
    return InlineKeyboardMarkup(keyboard)

def chat_settings_keyboard(vk_chat_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"chat_stats_{vk_chat_id}")],
        [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"load_messages_{vk_chat_id}")],
        [InlineKeyboardButton("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é", callback_data=f"check_summary_{vk_chat_id}")],
        [InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", callback_data=f"publish_menu_{vk_chat_id}")],  # –ò–ó–ú–ï–ù–ï–ù–û
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"quick_chat_{vk_chat_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_keyboard():
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(keyboard)

def cancel_keyboard():
    """–ö–Ω–æ–ø–∫–∞ '–û—Ç–º–µ–Ω–∞'"""
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    return InlineKeyboardMarkup(keyboard)

def confirm_keyboard(action: str, data: str = ""):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{action}_{data}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def date_selection_keyboard(dates: list, vk_chat_id: str = None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    keyboard = []
    for date in dates:
        # Handle both dict and model objects
        if hasattr(date, 'date'):
            date_str = date.date
            count = date.count
        else:
            date_str = date['date']
            count = date['count']
            
        keyboard.append([InlineKeyboardButton(
            f"üìÖ {date_str} ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)", 
            callback_data=f"select_date_{date_str}"
        )])
    keyboard.append([InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", callback_data="select_model_for_analysis")])
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if vk_chat_id:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"quick_chat_{vk_chat_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

def available_chats_keyboard(chats: list, page: int = 0, per_page: int = 10, context: str = "select"):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ VK MAX
    context: "select" (–¥–ª—è select_chat_) –∏–ª–∏ "quick" (–¥–ª—è quick_chat_)
    """
    keyboard = []
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_chats = chats[start_idx:end_idx]
    
    for chat in page_chats:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
        title = chat['title'][:30] + "..." if len(chat['title']) > 30 else chat['title']
        participants = chat['participants_count']
        
        button_text = f"üí¨ {title} ({participants} —á–µ–ª.)"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context == "quick":
            callback_data = f"quick_chat_{chat['id']}"
        else:
            callback_data = f"select_available_chat_{chat['id']}"
            
        keyboard.append([InlineKeyboardButton(
            button_text,
            callback_data=callback_data
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"chats_page_{page-1}"))
    
    if end_idx < len(chats):
        navigation_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"chats_page_{page+1}"))
    
    if navigation_buttons:
        keyboard.append(navigation_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="search_chat_by_id")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])  # –ò–°–ü–†–ê–í–õ–ï–ù–û
    
    return InlineKeyboardMarkup(keyboard)

def chat_add_method_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="select_from_list")],
        [InlineKeyboardButton("üîç –í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data="enter_chat_id")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_chats")]
    ]
    return InlineKeyboardMarkup(keyboard)

# AI Provider Keyboards
def ai_provider_selection_keyboard(available_providers: List[str], current_provider: str = None, provider_info: List[Dict] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    buttons = []
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    provider_display_names = {
        'gigachat': 'ü§ñ GigaChat',
        'chatgpt': 'üß† ChatGPT',
        'openrouter': 'üîó OpenRouter',
        'gemini': 'üíé Gemini',
        'ollama': 'ü¶ô Ollama'
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    provider_status = {}
    if provider_info:
        for info in provider_info:
            # info –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–µ–º, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç–æ–º ProviderInfo
            if hasattr(info, 'name'):
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç ProviderInfo
                provider_status[info.name] = info.available
            else:
                # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                provider_status[info['name']] = info.get('available', False)
    
    for provider in available_providers:
        display_name = provider_display_names.get(provider, f"‚öôÔ∏è {provider.title()}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        if provider == current_provider:
            prefix = "‚úÖ "
        elif provider_status.get(provider, False):
            prefix = "‚ö™ "
        else:
            prefix = "‚ùå "
        
        buttons.append([InlineKeyboardButton(
            f"{prefix}{display_name}",
            callback_data=f"select_provider:{provider}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–¢–æ–ø-5 –º–æ–¥–µ–ª–µ–π" –µ—Å–ª–∏ OpenRouter –¥–æ—Å—Ç—É–ø–µ–Ω
    if 'openrouter' in available_providers and provider_status.get('openrouter', False):
        buttons.append([InlineKeyboardButton("üèÜ –¢–æ–ø-5 –º–æ–¥–µ–ª–µ–π", callback_data="top5_models_selection")])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(buttons)

def ai_provider_settings_keyboard(user_preferences: Dict = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    buttons = [
        [InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="select_ai_provider")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="ai_provider_defaults")],
        [InlineKeyboardButton("üìã –°—Ü–µ–Ω–∞—Ä–∏–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", callback_data="scenario_defaults")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="clear_ai_settings")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", callback_data="ai_provider_status")],
        [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data="check_providers_availability")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def ai_provider_defaults_keyboard(current_default: str = 'gigachat') -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    buttons = []
    
    provider_display_names = {
        'gigachat': 'ü§ñ GigaChat',
        'chatgpt': 'üß† ChatGPT', 
        'openrouter': 'üîó OpenRouter',
        'gemini': 'üíé Gemini',
        'ollama': 'ü¶ô Ollama'
    }
    
    for provider, display_name in provider_display_names.items():
        prefix = "‚úÖ " if provider == current_default else "‚ö™ "
        buttons.append([InlineKeyboardButton(
            f"{prefix}{display_name}",
            callback_data=f"set_default_provider:{provider}"
        )])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ai_provider_settings")])
    return InlineKeyboardMarkup(buttons)

def scenario_defaults_keyboard(current_default: str = 'fast') -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    buttons = []
    
    scenario_display_names = {
        'fast': '‚ö° –ë—ã—Å—Ç—Ä–∞—è',
        'reflection': 'üîÑ –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π',
        'cleaning': 'üßπ –° –æ—á–∏—Å—Ç–∫–æ–π',
        'structured': 'üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
    }
    
    for scenario, display_name in scenario_display_names.items():
        prefix = "‚úÖ " if scenario == current_default else "‚ö™ "
        buttons.append([InlineKeyboardButton(
            f"{prefix}{display_name}",
            callback_data=f"set_default_scenario:{scenario}"
        )])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ai_provider_settings")])
    return InlineKeyboardMarkup(buttons)

def confirm_ai_provider_change_keyboard(provider_name: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    provider_display_names = {
        'gigachat': 'GigaChat',
        'chatgpt': 'ChatGPT',
        'openrouter': 'OpenRouter', 
        'gemini': 'Gemini',
        'ollama': 'Ollama'
    }
    
    display_name = provider_display_names.get(provider_name, provider_name.title())
    
    buttons = [
        [InlineKeyboardButton(f"‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {display_name}", callback_data=f"confirm_provider:{provider_name}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="select_ai_provider")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")]
    ]
    return InlineKeyboardMarkup(buttons)

# OpenRouter Model Selection Keyboards
def openrouter_model_selection_keyboard(available_models: Dict[str, Dict], current_model: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenRouter"""
    buttons = []
    
    for model_id, model_info in available_models.items():
        display_name = model_info.get('display_name', model_id)
        free_indicator = "üÜì" if model_info.get('free', False) else "üí∞"
        prefix = "‚úÖ " if model_id == current_model else "‚ö™ "
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if len(display_name) > 30:
            display_name = display_name[:27] + "..."
        
        buttons.append([InlineKeyboardButton(
            f"{prefix}{free_indicator} {display_name}",
            callback_data=shorten_callback_data(f"select_openrouter_model:{model_id}")
        )])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º", callback_data="select_ai_provider")])
    return InlineKeyboardMarkup(buttons)

def openrouter_model_info_keyboard(model_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª–∏ OpenRouter"""
    buttons = [
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å", callback_data=f"confirm_openrouter_model:{model_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥–µ–ª—è–º", callback_data="openrouter_model_selection")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º", callback_data="select_ai_provider")]
    ]
    return InlineKeyboardMarkup(buttons)

def top5_models_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–ø-5 –ª—É—á—à–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π
        config_path = os.path.join(os.path.dirname(__file__), 'top5_models_config.json')
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            top5_models = config.get('top5_models', [])
        else:
            # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            top5_models = [
                {
                    "id": "nvidia/nemotron-nano-9b-v2:free",
                    "name": "NVIDIA Nemotron Nano 9B v2",
                    "description": "üöÄ –ë—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –º–æ–¥–µ–ª—å NVIDIA"
                },
                {
                    "id": "deepseek/deepseek-chat-v3.1:free",
                    "name": "DeepSeek V3.1", 
                    "description": "üß† –ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å —Å reasoning"
                },
                {
                    "id": "qwen/qwen3-235b-a22b:free",
                    "name": "Qwen3 235B A22B",
                    "description": "üíé –°–∞–º–∞—è –º–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
                },
                {
                    "id": "mistralai/mistral-small-3.2-24b-instruct:free",
                    "name": "Mistral Small 3.2 24B",
                    "description": "‚ö° –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Mistral"
                },
                {
                    "id": "meta-llama/llama-3.3-8b-instruct:free",
                    "name": "Meta Llama 3.3 8B",
                    "description": "ü¶ô –ù–∞–¥–µ–∂–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Meta"
                }
            ]
        
        buttons = []
        for i, model in enumerate(top5_models, 1):
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
            button_text = f"{i}. {model['name']}"
            callback_data = shorten_callback_data(f"select_top5_model:{model['id']}")
            buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([InlineKeyboardButton("üìã –í—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter", callback_data="openrouter_model_selection")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º", callback_data="select_ai_provider")])
        
        return InlineKeyboardMarkup(buttons)
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = [
            [InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π", callback_data="select_ai_provider")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")]
        ]
        return InlineKeyboardMarkup(buttons)

def top5_model_info_keyboard(model_id: str, model_name: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ø-5 –º–æ–¥–µ–ª–∏"""
    buttons = [
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å", callback_data=f"confirm_top5_model:{model_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–ø-5", callback_data="top5_models_selection")],
        [InlineKeyboardButton("üìã –í—Å–µ –º–æ–¥–µ–ª–∏ OpenRouter", callback_data="openrouter_model_selection")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º", callback_data="select_ai_provider")]
    ]
    return InlineKeyboardMarkup(buttons)

def ollama_model_selection_keyboard(available_models: List[str], current_model: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Ollama"""
    buttons = []
    
    for model_name in available_models:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        if model_name == current_model:
            prefix = "‚úÖ "
        else:
            prefix = "‚ö™ "
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        display_name = model_name
        if len(display_name) > 30:
            display_name = display_name[:27] + "..."
        
        buttons.append([InlineKeyboardButton(
            f"{prefix}{display_name}",
            callback_data=f"select_ollama_model:{model_name}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")])
    
    return InlineKeyboardMarkup(buttons)

# –ù–æ–≤—ã–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX

def quick_actions_keyboard(selected_chat_id: str = None):
    """–ú–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    keyboard = []
    
    if selected_chat_id:
        # –ï—Å–ª–∏ —á–∞—Ç –≤—ã–±—Ä–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–µ–≥–æ
        keyboard.extend([
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é", callback_data=f"quick_create_{selected_chat_id}")],
            [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏", callback_data=f"check_summary_{selected_chat_id}")],
            [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"load_messages_{selected_chat_id}")]
        ])
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç
        keyboard.append([InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å —á–∞—Ç", callback_data="select_chat_for_action")])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

def chat_quick_menu_keyboard(vk_chat_id: str, group_id: int = None):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç–∞"""
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        [
            InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å", callback_data=f"quick_create_{vk_chat_id}"),
            InlineKeyboardButton("üìã –°–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"check_summary_{vk_chat_id}")
        ],
        [
            InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data=f"load_messages_{vk_chat_id}"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"chat_stats_{vk_chat_id}")
        ],
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        [InlineKeyboardButton("üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data=f"image_analysis_menu_{vk_chat_id}")],
        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_menu_{vk_chat_id}")],
    ]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–µ–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if group_id:
        # –ï—Å–ª–∏ –º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
        keyboard.append([InlineKeyboardButton("üîô –ö –≥—Ä—É–ø–ø–µ", callback_data=f"back_to_group_{group_id}")])
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–µ–µ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —á–∞—Ç–æ–≤
        keyboard.append([InlineKeyboardButton("üîô –ú–æ–∏ —á–∞—Ç—ã", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

def image_analysis_menu_keyboard(vk_chat_id: str, has_schedule: bool = False):
    """–ú–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data=f"start_image_analysis_{vk_chat_id}")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞", callback_data=f"image_analysis_settings_{vk_chat_id}")],
    ]
    
    if has_schedule:
        keyboard.insert(1, [InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data=f"show_schedule_analysis_{vk_chat_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —á–∞—Ç—É", callback_data=f"quick_chat_{vk_chat_id}")])
    return InlineKeyboardMarkup(keyboard)

def image_analysis_settings_keyboard(vk_chat_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data=f"select_analysis_model_{vk_chat_id}")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data=f"change_analysis_prompt_{vk_chat_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"image_analysis_menu_{vk_chat_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_summary_keyboard(vk_chat_id: str, available_dates: list, show_all: bool = False):
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    keyboard = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–∞—Ç—ã –∏–ª–∏ –≤—Å–µ
    dates_to_show = available_dates if show_all else available_dates[:3]
    
    for date in dates_to_show:
        date_str = date.date if hasattr(date, 'date') else date['date']
        count = date.count if hasattr(date, 'count') else date['count']
        keyboard.append([InlineKeyboardButton(
            f"üìÖ {date_str} ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)", 
            callback_data=f"create_for_date_{vk_chat_id}_{date_str}"
        )])
    
    # –ë–æ–ª—å—à–µ –¥–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ)
    if not show_all and len(available_dates) > 3:
        keyboard.append([InlineKeyboardButton("üìÖ –í—Å–µ –¥–∞—Ç—ã...", callback_data=f"all_dates_{vk_chat_id}")])
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≤–Ω–∏–∑—É
    keyboard.append([InlineKeyboardButton("ü§ñ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="select_model_for_analysis")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"quick_chat_{vk_chat_id}")])
    
    return InlineKeyboardMarkup(keyboard)


def settings_menu_keyboard():
    """–ù–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_chat")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="remove_chat")],
        [InlineKeyboardButton("ü§ñ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (–¥–µ—Ç–∞–ª—å–Ω–æ)", callback_data="ai_provider_settings")],
        [InlineKeyboardButton("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="schedule_management")],
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def schedule_management_keyboard(has_schedule: bool = False, has_analysis: bool = False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã"""
    keyboard = []
    
    if has_schedule:
        keyboard.append([InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="show_schedule")])
        
        if has_analysis:
            keyboard.append([InlineKeyboardButton("üìù –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="show_full_schedule_text")])
        
        keyboard.append([InlineKeyboardButton("üì§ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="set_schedule")])
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="delete_schedule")])
    else:
        keyboard.append([InlineKeyboardButton("üì§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="set_schedule")])
    
    keyboard.append([InlineKeyboardButton("üîô –ö –≥—Ä—É–ø–ø–µ", callback_data="back_to_group_menu")])
    return InlineKeyboardMarkup(keyboard)

def publish_format_keyboard(vk_chat_id: str, date: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    keyboard = [
        [InlineKeyboardButton("üìù Markdown —Ñ–æ—Ä–º–∞—Ç", callback_data=f"publish_md_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üåê HTML —Ñ–æ—Ä–º–∞—Ç", callback_data=f"publish_html_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"publish_menu_{vk_chat_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def scenario_selection_keyboard(vk_chat_id: str, date: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏"""
    keyboard = [
        # –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è", 
            callback_data=f"preset_fast_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üîÑ –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π", 
            callback_data=f"preset_reflection_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üßπ –° –æ—á–∏—Å—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö", 
            callback_data=f"preset_cleaning_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
            callback_data=f"preset_structured_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üìÖ –° –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", 
            callback_data=f"preset_with_schedule_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üéØ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
            callback_data=f"preset_full_{vk_chat_id}_{date}")],
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        [InlineKeyboardButton("üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)", 
            callback_data=f"custom_pipeline_{vk_chat_id}_{date}")],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"quick_create_{vk_chat_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def custom_pipeline_keyboard(vk_chat_id: str, date: str, selected_steps: list):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ pipeline"""
    from domains.ai.models import StepType
    
    keyboard = []
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    is_cleaning = StepType.CLEANING in selected_steps
    keyboard.append([InlineKeyboardButton(
        f"{'‚úÖ' if is_cleaning else '‚¨ú'} 1. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
        callback_data=f"toggle_step_cleaning_{vk_chat_id}_{date}"
    )])
    
    # –®–∞–≥ 2: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω)
    keyboard.append([InlineKeyboardButton(
        "‚úÖ 2. –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)",
        callback_data="noop"  # –ù–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ
    )])
    
    # –®–∞–≥ 3: –†–µ—Ñ–ª–µ–∫—Å–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    is_reflection = StepType.REFLECTION in selected_steps
    keyboard.append([InlineKeyboardButton(
        f"{'‚úÖ' if is_reflection else '‚¨ú'} 3. –†–µ—Ñ–ª–µ–∫—Å–∏—è",
        callback_data=f"toggle_step_reflection_{vk_chat_id}_{date}"
    )])
    
    # –®–∞–≥ 4: –£–ª—É—á—à–µ–Ω–∏–µ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏)
    is_improvement = StepType.IMPROVEMENT in selected_steps
    can_improve = is_reflection
    keyboard.append([InlineKeyboardButton(
        f"{'‚úÖ' if is_improvement else '‚¨ú'} 4. –£–ª—É—á—à–µ–Ω–∏–µ {'(—Ç—Ä–µ–±—É–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏—é)' if not can_improve else ''}",
        callback_data=f"toggle_step_improvement_{vk_chat_id}_{date}" if can_improve else "noop"
    )])
    
    # –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ù–û–í–û–ï)
    is_schedule = StepType.SCHEDULE_ANALYSIS in selected_steps
    keyboard.append([InlineKeyboardButton(
        f"{'‚úÖ' if is_schedule else '‚¨ú'} 5. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
        callback_data=f"toggle_step_schedule_analysis_{vk_chat_id}_{date}"
    )])
    
    # –®–∞–≥ 6: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
    is_structured = StepType.CLASSIFICATION in selected_steps
    keyboard.append([InlineKeyboardButton(
        f"{'‚úÖ' if is_structured else '‚¨ú'} 6. –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        callback_data=f"toggle_step_structured_{vk_chat_id}_{date}"
    )])
    
    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    estimated_time = len(selected_steps) * 30  # —Å–µ–∫—É–Ω–¥ –Ω–∞ —à–∞–≥
    keyboard.append([InlineKeyboardButton(
        f"üìä –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {len(selected_steps)} —à–∞–≥–æ–≤, ~{estimated_time}—Å",
        callback_data="noop"
    )])
    
    # –î–µ–π—Å—Ç–≤–∏—è
    keyboard.extend([
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –ø—Ä–µ—Å–µ—Ç", callback_data=f"save_custom_preset_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data=f"run_custom_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_scenario_{vk_chat_id}_{date}")]
    ])
    
    return InlineKeyboardMarkup(keyboard)

def model_selection_for_summary_keyboard(vk_chat_id: str, date: str, scenario: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª—å—é", 
            callback_data=f"run_summary_{vk_chat_id}_{date}_{scenario}")],
        [InlineKeyboardButton("ü§ñ –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", 
            callback_data=f"change_model_for_summary_{vk_chat_id}_{date}_{scenario}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ü–µ–Ω–∞—Ä–∏—è", 
            callback_data=f"create_for_date_{vk_chat_id}_{date}")]
    ]
    return InlineKeyboardMarkup(keyboard)

def summary_result_keyboard(vk_chat_id: str, date: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    keyboard = [
        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (Markdown)", callback_data=f"publish_md_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (HTML)", callback_data=f"publish_html_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üîô –ö —á–∞—Ç—É", callback_data=f"select_chat_{vk_chat_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def summary_view_keyboard(vk_chat_id: str, date: str, show_recreate: bool = True):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    
    Args:
        vk_chat_id: ID —á–∞—Ç–∞ VK MAX
        date: –î–∞—Ç–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (YYYY-MM-DD)
        show_recreate: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    keyboard = [
        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (Markdown)", callback_data=f"publish_md_{vk_chat_id}_{date}")],
        [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å (HTML)", callback_data=f"publish_html_{vk_chat_id}_{date}")],
    ]
    
    if show_recreate:
        keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é", callback_data=f"recreate_summary_{vk_chat_id}_{date}")])
    
    keyboard.extend([
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –¥–∞—Ç", callback_data=f"check_summary_{vk_chat_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    return InlineKeyboardMarkup(keyboard)

def admin_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="toggle_logging")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)
