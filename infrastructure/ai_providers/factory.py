"""
–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
from typing import Dict, List, Optional, Any
import logging
from .providers.base import BaseAIProvider

logger = logging.getLogger(__name__)

class ProviderFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    
    # –†–µ–µ—Å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    _providers: Dict[str, type] = {}
    
    @classmethod
    def register_provider(cls, provider_type: str, provider_class: type):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gigachat')
            provider_class: –ö–ª–∞—Å—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        if not issubclass(provider_class, BaseAIProvider):
            raise ValueError(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_class} –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseAIProvider")
        
        cls._providers[provider_type.lower()] = provider_class
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_type}")
    
    @classmethod
    def create_provider(cls, provider_type: str, config: Dict[str, Any]) -> Optional[BaseAIProvider]:
        """
        –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ None –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        provider_type = provider_type.lower()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.debug(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_type}, config type: {type(config)}, config: {config}")
        
        if provider_type not in cls._providers:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_type}")
            return None
        
        try:
            provider_class = cls._providers[provider_type]
            provider = provider_class(config)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_type}")
            return provider
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_type}: {e}")
            return None
    
    @classmethod
    def get_available_providers(cls) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        return list(cls._providers.keys())
    
    @classmethod
    def is_provider_available(cls, provider_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        return provider_type.lower() in cls._providers

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
def _register_providers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    try:
        from .providers.gigachat import GigaChatProvider
        from .providers.chatgpt import ChatGPTProvider
        from .providers.openrouter import OpenRouterProvider
        from .providers.gemini import GeminiProvider
        from .providers.ollama import OllamaProvider
        
        ProviderFactory.register_provider('gigachat', GigaChatProvider)
        ProviderFactory.register_provider('chatgpt', ChatGPTProvider)
        ProviderFactory.register_provider('openrouter', OpenRouterProvider)
        ProviderFactory.register_provider('gemini', GeminiProvider)
        ProviderFactory.register_provider('ollama', OllamaProvider)
        
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
_register_providers()