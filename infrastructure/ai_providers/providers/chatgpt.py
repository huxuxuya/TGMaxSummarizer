"""
ChatGPT AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤
"""
import openai
from typing import List, Dict, Optional, Any
from .base import BaseAIProvider

class ChatGPTProvider(BaseAIProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI ChatGPT API"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.api_key = config.get('OPENAI_API_KEY', '')
        self.client = None
        self.model = "gpt-4"
        
        if self.api_key and self.api_key != 'your_openai_key':
            self.client = openai.OpenAI(api_key=self.api_key)
    
    async def summarize_chat(self, messages: List[Dict], chat_context: Optional[Dict] = None) -> str:
        """
        –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é ChatGPT
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            chat_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        try:
            if not self.client:
                return "‚ùå ChatGPT –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            self.logger.info("üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è ChatGPT...")
            optimized_messages = self.optimize_text(messages)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            formatted_text = self.format_messages_for_analysis(optimized_messages)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ü–û–°–õ–ï –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
            if self.llm_logger:
                self.llm_logger.log_formatted_messages(formatted_text, len(optimized_messages))
            
            self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ChatGPT:")
            self.logger.info(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            self.logger.info(f"   –ü–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(optimized_messages)}")
            self.logger.info(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –í—ã–∑—ã–≤–∞–µ–º ChatGPT API
            self.logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ChatGPT...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if self.llm_logger:
                self.llm_logger.log_llm_request(formatted_text, "summarization")
            
            summary = await self._call_chatgpt_api(formatted_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if self.llm_logger and summary:
                self.llm_logger.log_llm_response(summary, "summarization")
            
            if summary:
                self.logger.info("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç ChatGPT")
                return summary
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ –æ—Ç ChatGPT")
                return "‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ChatGPT"
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ChatGPT: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
    
    async def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ChatGPT
        
        Returns:
            True –µ—Å–ª–∏ ChatGPT –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if not self.validate_config():
            return False
        
        try:
            if not self.client:
                return False
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": "Hello"}],
                max_tokens=5
            )
            
            return response.choices[0].message.content is not None
            
        except Exception as e:
            self.logger.error(f"‚ùå ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def generate_response(self, prompt: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not self.client:
                self.logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç ChatGPT –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
            
            self.logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ ChatGPT –Ω–∞ –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            self.logger.debug(f"=== GENERATE_RESPONSE INPUT ===")
            self.logger.debug(f"Prompt length: {len(prompt)}")
            self.logger.debug(f"Prompt preview: {prompt[:200]}...")
            self.logger.debug(f"=== END INPUT ===")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if self.llm_logger:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø—Ä–æ–º–ø—Ç–∞
                request_type = "reflection" if "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è" in prompt.lower() or "–∞–Ω–∞–ª–∏–∑" in prompt.lower() else "improvement"
                self.llm_logger.log_llm_request(prompt, request_type)
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=2000,
                temperature=0.3
            )
            
            if response.choices and response.choices[0].message.content:
                content = response.choices[0].message.content
                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                self.logger.debug(f"=== GENERATE_RESPONSE OUTPUT ===")
                self.logger.debug(f"Response length: {len(content)}")
                self.logger.debug(f"Response preview: {content[:200]}...")
                self.logger.debug(f"=== END OUTPUT ===")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –ª–æ–≥–≥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if self.llm_logger:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø—Ä–æ–º–ø—Ç–∞
                    request_type = "reflection" if "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è" in prompt.lower() or "–∞–Ω–∞–ª–∏–∑" in prompt.lower() else "improvement"
                    self.llm_logger.log_llm_response(content, request_type)
                
                return content
            else:
                self.logger.warning("‚ö†Ô∏è ChatGPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT: {e}")
            return None
    
    def get_provider_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ ChatGPT
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        """
        return {
            'name': 'ChatGPT',
            'display_name': 'ChatGPT',
            'description': 'OpenAI ChatGPT –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤',
            'version': self.model,
            'max_tokens': 4000,
            'supports_streaming': True,
            'api_endpoint': 'https://api.openai.com/v1',
            'provider_type': 'chatgpt'
        }
    
    def validate_config(self) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ChatGPT
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if not self.api_key or self.api_key == 'your_openai_key':
            self.logger.error("‚ùå ChatGPT API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        if len(self.api_key) < 20:
            self.logger.error("‚ùå ChatGPT API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False
        
        if not self.api_key.startswith('sk-'):
            self.logger.warning("‚ö†Ô∏è ChatGPT API –∫–ª—é—á –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'sk-'")
        
        return True
    
    async def _call_chatgpt_api(self, text: str) -> Optional[str]:
        """
        –í—ã–∑–≤–∞—Ç—å ChatGPT API –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            from prompts import PromptTemplates
            prompt = PromptTemplates.get_summarization_prompt(text, 'chatgpt')

            self.logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ChatGPT")
            self.logger.info(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=1000
            )
            
            self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ChatGPT: {response.usage.total_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            
            if response.choices and len(response.choices) > 0:
                return response.choices[0].message.content
            else:
                self.logger.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT")
                return None
                
        except openai.RateLimitError as e:
            self.logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ChatGPT: {e}")
            return None
        except openai.AuthenticationError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ChatGPT: {e}")
            return None
        except openai.APIError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ API ChatGPT: {e}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ChatGPT: {e}")
            return None
