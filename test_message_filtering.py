#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

def test_message_filtering():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        {
            'message_id': '1',
            'sender_id': 44502596,
            'text': '–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏',
            'time': '10:30'
        },
        {
            'message_id': '2', 
            'sender_id': 12345,
            'text': 'üëç',
            'time': '10:31'
        },
        {
            'message_id': '3',
            'sender_id': 67890,
            'text': '–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ú–∞—à—É –≤ 15:00?',
            'time': '10:32'
        },
        {
            'message_id': '4',
            'sender_id': 44502596,
            'text': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
            'time': '10:33'
        },
        {
            'message_id': '5',
            'sender_id': 11111,
            'text': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            'time': '10:34'
        }
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    test_classification = [
        {'message_id': '1', 'class': 'announcement'},
        {'message_id': '2', 'class': 'irrelevant'},
        {'message_id': '3', 'class': 'release_pickup'},
        {'message_id': '4', 'class': 'schedule_change'},
        {'message_id': '5', 'class': 'irrelevant'}
    ]
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ChatAnalyzer
    from chat_analyzer import ChatAnalyzer
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    analyzer = ChatAnalyzer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    filtered_messages = analyzer._filter_by_classification(test_messages, test_classification)
    
    print("=== –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(test_messages)}")
    print(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(filtered_messages)}")
    print()
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    for i, msg in enumerate(test_messages):
        msg_class = next((c['class'] for c in test_classification if c['message_id'] == msg['message_id']), 'unknown')
        print(f"  {i+1}. [{msg_class}] {msg['text'][:50]}...")
    
    print("\n–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    for i, msg in enumerate(filtered_messages):
        msg_class = next((c['class'] for c in test_classification if c['message_id'] == msg['message_id']), 'unknown')
        print(f"  {i+1}. [{msg_class}] {msg['text'][:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expected_filtered_ids = {'1', '4'}  # announcement –∏ schedule_change
    actual_filtered_ids = {msg['message_id'] for msg in filtered_messages}
    
    print(f"\n–û–∂–∏–¥–∞–µ–º—ã–µ ID: {expected_filtered_ids}")
    print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ ID: {actual_filtered_ids}")
    
    if expected_filtered_ids == actual_filtered_ids:
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ò—Å–∫–ª—é—á–µ–Ω—ã irrelevant –∏ release_pickup —Å–æ–æ–±—â–µ–Ω–∏—è")
        return True
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")
        return False

if __name__ == "__main__":
    test_message_filtering()
