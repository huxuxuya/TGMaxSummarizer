from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .service import SummaryService
from .models import SummaryType
from shared.utils import format_success_message, format_error_message, format_date_for_display
from shared.constants import CallbackActions
import logging

logger = logging.getLogger(__name__)

class SummaryHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è–º–∏"""
    
    def __init__(self, summary_service: SummaryService, user_service=None):
        self.summary_service = summary_service
        self.user_service = user_service
    
    async def check_summary_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('check_summary_', '', 1)
            
            available_summaries = self.summary_service.get_available_summaries(vk_chat_id)
            
            if not available_summaries:
                await query.edit_message_text(
                    "üìã –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞."
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.date_selection_keyboard(available_summaries, vk_chat_id)
            
            summary_list_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
            for summary in available_summaries[:5]:
                date_display = format_date_for_display(summary.date)
                summary_list_text += f"üìÖ {date_display}\n"
            
            await query.edit_message_text(
                summary_list_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_summary_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_date_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            date = query.data.split('_')[-1]
            context.user_data['selected_date'] = date
            
            vk_chat_id = context.user_data.get('selected_chat_id')
            if not vk_chat_id:
                await query.edit_message_text(
                    "‚ùå –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
                )
                return
            
            summary = self.summary_service.get_summary(vk_chat_id, date, SummaryType.DAILY)
            
            if not summary:
                await query.edit_message_text(
                    f"‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {format_date_for_display(date)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return
            
            from infrastructure.telegram import keyboards
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –¥–∞—Ç
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"check_summary_{vk_chat_id}")]]
            
            summary_text = summary.summary_text
            if len(summary_text) > 1000:
                summary_text = summary_text[:1000] + "..."
            
            await query.edit_message_text(
                f"üìã –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {format_date_for_display(date)}\n\n"
                f"{summary_text}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_date_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def publish_summary_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('publish_summary_', '', 1)
            group_id = context.user_data.get('selected_group_id')
            
            if not group_id:
                await query.edit_message_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                )
                return
            
            available_summaries = self.summary_service.get_available_summaries(vk_chat_id)
            
            if not available_summaries:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.date_selection_keyboard(available_summaries, vk_chat_id)
            
            await query.edit_message_text(
                "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_summary_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def publish_summary_html_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('publish_summary_html_', '', 1)
            group_id = context.user_data.get('selected_group_id')
            
            if not group_id:
                await query.edit_message_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                )
                return
            
            available_summaries = self.summary_service.get_available_summaries(vk_chat_id)
            
            if not available_summaries:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.date_selection_keyboard(available_summaries, vk_chat_id)
            
            await query.edit_message_text(
                "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (HTML)\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_summary_html_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def publish_to_group_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É"""
        query = update.callback_query
        await query.answer()
        
        try:
            date = context.user_data.get('selected_date')
            vk_chat_id = context.user_data.get('selected_chat_id')
            group_id = context.user_data.get('selected_group_id')
            use_html = context.user_data.get('use_html_format', False)
            
            if not all([date, vk_chat_id, group_id]):
                await query.edit_message_text(
                    "‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã"
                )
                return
            
            summary = self.summary_service.get_summary(vk_chat_id, date, SummaryType.DAILY)
            
            logger.info(f"DEBUG: summary type = {type(summary)}, summary = {summary}")
            
            if not summary:
                await query.edit_message_text(
                    f"‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {format_date_for_display(date)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return
            
            from infrastructure.telegram import sender
            from infrastructure.telegram import formatter
            from shared.utils import format_summary_for_telegram_html_universal
            
            if use_html:
                formatted_parts = format_summary_for_telegram_html_universal(
                    summary.summary_text, 
                    date, 
                    summary.vk_chat_id
                )
                parse_mode = 'HTML'
            else:
                from shared.utils import format_summary_for_telegram
                formatted_parts = format_summary_for_telegram(
                    summary.summary_text, 
                    date, 
                    summary.vk_chat_id
                )
                parse_mode = 'MarkdownV2'
            
            for part in formatted_parts:
                await sender.TelegramMessageSender.safe_send_message(
                    context.bot,
                    group_id,
                    part,
                    parse_mode=parse_mode
                )
            
            await query.edit_message_text(
                format_success_message(
                    f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø—É"
                )
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_to_group_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def create_for_date_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            # create_for_date_{vk_chat_id}_{date}
            data_without_prefix = query.data.replace('create_for_date_', '', 1)
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø—Ä–∞–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –∫–∞–∫ date
            parts = data_without_prefix.rsplit('_', 1)
            
            if len(parts) != 2:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
                
            vk_chat_id = parts[0]
            date = parts[1]
            
            context.user_data['selected_chat_id'] = vk_chat_id
            context.user_data['selected_date'] = date
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
            from infrastructure.telegram import keyboards
            keyboard = keyboards.scenario_selection_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {date}\n\n"
                f"‚ö° **–ë—ã—Å—Ç—Ä–∞—è** - —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (1-2 –º–∏–Ω)\n"
                f"üîÑ **–° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π** - –∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ (2-4 –º–∏–Ω)\n"
                f"üßπ **–° –æ—á–∏—Å—Ç–∫–æ–π** - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (3-5 –º–∏–Ω)\n"
                f"üîç **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è** - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (4-6 –º–∏–Ω)",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_for_date_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def publish_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('publish_menu_', '', 1)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            summaries = self.summary_service.get_available_summaries(vk_chat_id)
            
            if not summaries:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é."
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è–º–∏
            keyboard = []
            for summary in summaries[:10]:
                date_str = summary.date
                keyboard.append([InlineKeyboardButton(
                    f"üìÖ {date_str} ({summary.summary_type.value})",
                    callback_data=f"select_publish_date_{vk_chat_id}_{date_str}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"quick_chat_{vk_chat_id}")])
            
            await query.edit_message_text(
                "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_menu_handler: {e}")
            await query.edit_message_text(format_error_message(e))
    
    async def select_publish_date_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            # select_publish_date_{vk_chat_id}_{date}
            parts = query.data.split('_')
            date = parts[-1]
            vk_chat_id = '_'.join(parts[3:-1])
            
            context.user_data['selected_date'] = date
            context.user_data['selected_chat_id'] = vk_chat_id
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.publish_format_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞ {date}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_publish_date_handler: {e}")
            await query.edit_message_text(format_error_message(e))
    
    async def select_scenario_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º: scenario_{type}_{vk_chat_id}_{date}
            parts = query.data.replace('scenario_', '', 1).split('_')
            scenario_type = parts[0]
            date = parts[-1]
            vk_chat_id = '_'.join(parts[1:-1])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            context.user_data['selected_scenario'] = scenario_type
            context.user_data['selected_date'] = date
            context.user_data['selected_chat_id'] = vk_chat_id
            
            # Save scenario selection to database
            if self.user_service:
                self.user_service.save_user_ai_settings(
                    update.effective_user.id, 
                    scenario=scenario_type
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            current_provider = context.user_data.get('confirmed_provider')
            current_model = context.user_data.get('selected_model_id')
            
            if current_provider and current_model and current_provider != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ' and current_model != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ':
                # –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É
                print(f"üîç DEBUG: –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É:")
                print(f"   provider: {current_provider}")
                print(f"   model: {current_model}")
                print(f"   scenario: {scenario_type}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞
                from domains.summaries.constants import SummarizationScenarios
                scenario_names = SummarizationScenarios.NAMES
                
                await query.edit_message_text(
                    f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...\n\n"
                    f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(scenario_type, scenario_type)}\n"
                    f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                    f"üß† –ú–æ–¥–µ–ª—å: {current_model}\n"
                    f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                    f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä—è–º—É—é
                await self._run_actual_analysis(query, vk_chat_id, date, scenario_type, current_provider, current_model)
            else:
                # –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
                print(f"üîç DEBUG: –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:")
                print(f"   provider: {current_provider}")
                print(f"   model: {current_model}")
                
                await self._show_model_selection_for_scenario(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_scenario_handler: {e}")
            await query.edit_message_text(format_error_message(e))

    async def _show_model_selection_for_scenario(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        query = update.callback_query
        
        try:
            scenario = context.user_data.get('selected_scenario')
            date = context.user_data.get('selected_date')
            vk_chat_id = context.user_data.get('selected_chat_id')
            
            # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            scenario_names = {
                'fast': '‚ö° –ë—ã—Å—Ç—Ä–∞—è',
                'reflection': 'üîÑ –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π',
                'cleaning': 'üßπ –° –æ—á–∏—Å—Ç–∫–æ–π',
                'structured': 'üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–ª—é—á–∏, —á—Ç–æ –∏ –≤ AI handlers)
            current_provider = context.user_data.get('confirmed_provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            current_model = context.user_data.get('selected_model_id', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            current_default_scenario = context.user_data.get('default_scenario', 'fast')
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.model_selection_for_summary_keyboard(vk_chat_id, date, scenario)
            
            await query.edit_message_text(
                f"ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n\n"
                f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(scenario, scenario)}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                f"üß† –ú–æ–¥–µ–ª—å: {current_model}\n"
                f"‚öôÔ∏è –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(current_default_scenario, current_default_scenario)}\n\n"
                f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–π?",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _show_model_selection_for_scenario: {e}")
            await query.edit_message_text(format_error_message(e))
    
    async def run_summary_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        print(f"üîç DEBUG: run_summary_handler –≤—ã–∑–≤–∞–Ω —Å callback_data: {query.data}")
        logger.info(f"üîç DEBUG: run_summary_handler –≤—ã–∑–≤–∞–Ω —Å callback_data: {query.data}")
        
        try:
            # –ü–∞—Ä—Å–∏–º: run_summary_{vk_chat_id}_{date}_{scenario}
            parts = query.data.replace('run_summary_', '', 1).split('_')
            scenario = parts[-1]
            date = parts[-2]
            vk_chat_id = '_'.join(parts[:-2])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–ª—é—á–∏, —á—Ç–æ –∏ –≤ AI handlers)
            provider = context.user_data.get('confirmed_provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            model = context.user_data.get('selected_model_id', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            
            # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            scenario_names = {
                'fast': '‚ö° –ë—ã—Å—Ç—Ä–∞—è',
                'reflection': 'üîÑ –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π',
                'cleaning': 'üßπ –° –æ—á–∏—Å—Ç–∫–æ–π',
                'structured': 'üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
            }
            
            await query.edit_message_text(
                f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...\n\n"
                f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(scenario, scenario)}\n"
                f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}\n"
                f"üß† –ú–æ–¥–µ–ª—å: {model}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            await self._run_actual_analysis(query, vk_chat_id, date, scenario, provider, model)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ run_summary_handler: {e}")
            await query.edit_message_text(format_error_message(e))
    
    async def _run_actual_analysis(self, query, vk_chat_id: str, date: str, scenario: str, provider: str, model: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞"""
        print(f"üîç DEBUG: _run_actual_analysis –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print(f"   vk_chat_id: {vk_chat_id}")
        print(f"   date: {date}")
        print(f"   scenario: {scenario}")
        print(f"   provider: {provider}")
        print(f"   model: {model}")
        logger.info(f"üîç DEBUG: _run_actual_analysis –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        logger.info(f"   vk_chat_id: {vk_chat_id}")
        logger.info(f"   date: {date}")
        logger.info(f"   scenario: {scenario}")
        logger.info(f"   provider: {provider}")
        logger.info(f"   model: {model}")
        
        try:
            from domains.chats.service import ChatService
            from core.database.connection import DatabaseConnection
            from core.config import load_config
            from domains.ai.models import AnalysisRequest, AnalysisType
            from domains.summaries.models import Summary, SummaryType
            from shared.utils import format_success_message, format_error_message
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            config = load_config()
            db_connection = DatabaseConnection(config['database'].path)
            chat_service = ChatService(db_connection)
            
            messages = chat_service.get_messages_by_date(vk_chat_id, date)
            
            if not messages:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            messages_data = [msg.model_dump() if hasattr(msg, 'model_dump') else msg.dict() for msg in messages]
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º AnalysisRequest —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            print(f"   provider_name: {provider}")
            print(f"   model_id: {model}")
            print(f"   user_id: {query.from_user.id}")
            logger.info(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º AnalysisRequest —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            logger.info(f"   provider_name: {provider}")
            logger.info(f"   model_id: {model}")
            logger.info(f"   user_id: {query.from_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
            # –ü–æ–ª—É—á–∞–µ–º AI —Å–µ—Ä–≤–∏—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            from core.app_context import get_app_context
            ctx = get_app_context()
            ai_service = ctx.ai_service
            
            # –°–æ–∑–¥–∞–µ–º LLM Logger –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
            from llm_logger import LLMLogger
            import os
            
            LLM_LOGS_DIR = os.environ.get('LLM_LOGS_DIR', 'llm_logs')
            print(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º LLM Logger —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            print(f"   LLM_LOGS_DIR: {LLM_LOGS_DIR}")
            print(f"   date: {date}")
            print(f"   scenario: {scenario}")
            print(f"   model: {model}")
            print(f"   user_id: {query.from_user.id}")
            
            llm_logger = LLMLogger(
                LLM_LOGS_DIR, 
                date=date, 
                scenario=scenario,
                test_mode=False,
                model_name=model
            )
            llm_logger.set_session_info(provider, model, None, query.from_user.id)
            logs_path = llm_logger.get_logs_path()
            print(f"üîç DEBUG: LLM Logger —Å–æ–∑–¥–∞–Ω, –ø—É—Ç—å –∫ –ª–æ–≥–∞–º: {logs_path}")
            logger.info(f"üìÅ LLM Logger —Å–æ–∑–¥–∞–Ω: {logs_path}")
            
            analysis_request = AnalysisRequest(
                messages=messages_data,
                provider_name=provider,
                model_id=model,
                user_id=query.from_user.id,
                analysis_type=AnalysisType.SUMMARIZATION,
                llm_logger=llm_logger
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            result = await ai_service.analyze_chat(analysis_request)
            
            if result.success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                summary = Summary(
                    vk_chat_id=vk_chat_id,
                    date=date,
                    summary_text=result.result,
                    provider_name=result.provider_name,
                    processing_time=result.processing_time
                )
                
                self.summary_service.save_summary(summary)
                
                # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                scenario_names = {
                    'fast': '‚ö° –ë—ã—Å—Ç—Ä–∞—è',
                    'reflection': 'üîÑ –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π',
                    'cleaning': 'üßπ –° –æ—á–∏—Å—Ç–∫–æ–π',
                    'structured': 'üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
                }
                
                from infrastructure.telegram import keyboards
                keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
                
                await query.edit_message_text(
                    format_success_message(
                        f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {result.processing_time:.2f}—Å\n\n"
                        f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(scenario, scenario)}\n"
                        f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.provider_name}\n"
                        f"üß† –ú–æ–¥–µ–ª—å: {model}\n"
                        f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                        f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result.result[:500]}..."
                    ),
                    reply_markup=keyboard
                )
            else:
                from infrastructure.telegram import keyboards
                keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
                
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.error}",
                    reply_markup=keyboard
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _run_actual_analysis: {e}")
            from infrastructure.telegram import keyboards
            keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                format_error_message(e),
                reply_markup=keyboard
            )

