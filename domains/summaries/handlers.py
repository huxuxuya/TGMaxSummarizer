from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .service import SummaryService
from .models import Summary, SummaryType
from shared.utils import format_success_message, format_error_message, format_date_for_display
from shared.constants import CallbackActions
import logging
import time
from typing import List, Dict, Optional
from domains.ai.models import StepType

logger = logging.getLogger(__name__)

class SummaryHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è–º–∏"""
    
    def __init__(self, summary_service: SummaryService, user_service=None):
        self.summary_service = summary_service
        self.user_service = user_service
    
    async def check_summary_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('check_summary_', '', 1)
            
            available_summaries = self.summary_service.get_available_summaries(vk_chat_id)
            
            if not available_summaries:
                await query.edit_message_text(
                    "üìã –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞."
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.date_selection_keyboard(available_summaries, vk_chat_id)
            
            summary_list_text = "üìã [–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏]:\n\n"
            for summary in available_summaries[:5]:
                date_display = format_date_for_display(summary.date)
                summary_list_text += f"üìÖ {date_display}\n"
            
            await query.edit_message_text(
                summary_list_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_summary_handler: {e}", exc_info=True)
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_date_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            date = query.data.split('_')[-1]
            context.user_data['selected_date'] = date
            
            vk_chat_id = context.user_data.get('selected_chat_id')
            if not vk_chat_id:
                await query.edit_message_text(
                    "‚ùå –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
                )
                return
            
            summary = self.summary_service.get_summary(vk_chat_id, date, SummaryType.DAILY)
            
            if not summary:
                await query.edit_message_text(
                    f"‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {format_date_for_display(date)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return
            
            from infrastructure.telegram import keyboards
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = keyboards.summary_view_keyboard(vk_chat_id, date)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            metadata_text = ""
            if summary.model_provider or summary.model_id or summary.scenario_type:
                metadata_text = "\n\nüìä *–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:*\n"
                if summary.model_provider:
                    metadata_text += f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {summary.model_provider}\n"
                if summary.model_id:
                    metadata_text += f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {summary.model_id}\n"
                if summary.scenario_type:
                    from domains.summaries.constants import SummarizationScenarios
                    scenario_name = SummarizationScenarios.get_display_name(summary.scenario_type)
                    metadata_text += f"   ‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_name}\n"
                if summary.processing_time:
                    metadata_text += f"   ‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {summary.processing_time:.2f}—Å\n"

            full_text = f"üìã –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {format_date_for_display(date)}\n\n{summary.summary_text}{metadata_text}"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            from shared.utils import format_message_for_telegram
            message_parts = format_message_for_telegram(full_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            from infrastructure.logging.message_logger import TelegramMessageLogger
            log_path = TelegramMessageLogger.log_outgoing_message(
                chat_id=query.message.chat_id,
                text=message_parts[0],
                action='edit',
                parse_mode='None',
                message_id=query.message.message_id,
                context={'handler': 'select_date_handler'}
            )

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await query.edit_message_text(
                    message_parts[0],
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )
                if log_path:
                    TelegramMessageLogger.log_success(log_path, query.message.message_id)
            except Exception as e:
                if log_path:
                    TelegramMessageLogger.log_error(log_path, str(e))
                raise
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            for part in message_parts[1:]:
                # –õ–æ–≥–∏—Ä—É–µ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                from infrastructure.logging.message_logger import TelegramMessageLogger
                log_path = TelegramMessageLogger.log_outgoing_message(
                    chat_id=query.message.chat_id,
                    text=part,
                    action='send',
                    parse_mode='None',
                    context={
                        'handler': 'select_date_handler',
                        'part_number': message_parts.index(part) + 1
                    }
                )
                
                try:
                    message = await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=part,
                        disable_web_page_preview=True
                    )
                    if log_path:
                        TelegramMessageLogger.log_success(log_path, message.message_id)
                except Exception as e:
                    if log_path:
                        TelegramMessageLogger.log_error(log_path, str(e))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_date_handler: {e}", exc_info=True)
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def recreate_summary_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∞—Ç—ã
        """
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º callback_data: recreate_summary_{vk_chat_id}_{date}
            parts = query.data.split('_')
            date = parts[-1]
            vk_chat_id = '_'.join(parts[2:-1])  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['selected_chat_id'] = vk_chat_id
            context.user_data['selected_date'] = date
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç—É –¥–∞—Ç—É
            from domains.chats.service import ChatService
            from core.database.connection import DatabaseConnection
            from core.config import load_config
            
            config = load_config()
            db_connection = DatabaseConnection(config['database'].path)
            chat_service = ChatService(db_connection)
            
            messages = chat_service.get_messages_by_date(vk_chat_id, date)
            
            if not messages or len(messages) == 0:
                await query.edit_message_text(
                    f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {format_date_for_display(date)} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"check_summary_{vk_chat_id}")
                    ]])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
            from infrastructure.telegram import keyboards
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏
            current_provider = context.user_data.get('selected_provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            current_model = context.user_data.get('selected_model_id', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            summary = self.summary_service.get_summary(vk_chat_id, date, SummaryType.DAILY)
            
            metadata_text = ""
            if summary:
                metadata_text = f"\nüìä *–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n"
                if summary.model_provider:
                    metadata_text += f"   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {summary.model_provider}\n"
                if summary.model_id:
                    metadata_text += f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {summary.model_id}\n"
                if summary.scenario_type:
                    from domains.summaries.constants import SummarizationScenarios
                    scenario_name = SummarizationScenarios.get_display_name(summary.scenario_type)
                    metadata_text += f"   ‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_name}\n"
            
            keyboard = keyboards.scenario_selection_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                f"üîÑ *[–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏]*\n\n"
                f"üìÖ –î–∞—Ç–∞: {format_date_for_display(date)}\n"
                f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"
                f"{metadata_text}\n"
                f"ü§ñ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                f"üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ recreate_summary_handler: {e}", exc_info=True)
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def publish_summary_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('publish_summary_', '', 1)
            group_id = context.user_data.get('selected_group_id')
            
            if not group_id:
                await query.edit_message_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                )
                return
            
            available_summaries = self.summary_service.get_available_summaries(vk_chat_id)
            
            if not available_summaries:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.date_selection_keyboard(available_summaries, vk_chat_id)
            
            await query.edit_message_text(
                "üì§ [–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏]\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_summary_handler: {e}", exc_info=True)
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def publish_summary_html_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('publish_summary_html_', '', 1)
            group_id = context.user_data.get('selected_group_id')
            
            if not group_id:
                await query.edit_message_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                )
                return
            
            available_summaries = self.summary_service.get_available_summaries(vk_chat_id)
            
            if not available_summaries:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.date_selection_keyboard(available_summaries, vk_chat_id)
            
            await query.edit_message_text(
                "üì§ [–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏] (HTML)\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_summary_html_handler: {e}", exc_info=True)
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def publish_to_group_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É"""
        query = update.callback_query
        await query.answer()
        
        try:
            date = context.user_data.get('selected_date')
            vk_chat_id = context.user_data.get('selected_chat_id')
            group_id = context.user_data.get('selected_group_id')
            use_html = context.user_data.get('use_html_format', False)
            
            logger.info(f"üîç publish_to_group_handler: date={date}, vk_chat_id={vk_chat_id}, group_id={group_id}, use_html={use_html}")
            
            if not all([date, vk_chat_id, group_id]):
                logger.warning(f"‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã: date={date}, vk_chat_id={vk_chat_id}, group_id={group_id}")
                await query.edit_message_text(
                    "‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã"
                )
                return
            
            summary = self.summary_service.get_summary(vk_chat_id, date, SummaryType.DAILY)
            logger.info(f"üîç publish_to_group_handler: summary found = {summary is not None}")
            
            if not summary:
                logger.info(f"üîç publish_to_group_handler: —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —ç—Ç—É –¥–∞—Ç—É
                from domains.chats.repository import MessageRepository
                from core.database.connection import DatabaseConnection
                
                db_connection = DatabaseConnection('bot_database.db')
                message_repo = MessageRepository(db_connection)
                messages_count = message_repo.get_messages_count_for_date(vk_chat_id, date)
                
                logger.info(f"üîç publish_to_group_handler: messages_count = {messages_count}")
                
                if messages_count > 0:
                    # –ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
                    from infrastructure.telegram import keyboards
                    keyboard = keyboards.scenario_selection_keyboard(vk_chat_id, date)
                    
                    logger.info(f"üîç publish_to_group_handler: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
                    await query.edit_message_text(
                        f"‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {format_date_for_display(date)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                        f"üìä –ù–∞–π–¥–µ–Ω–æ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç—É –¥–∞—Ç—É\n\n"
                        f"üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é:",
                        reply_markup=keyboard
                    )
                else:
                    # –ù–µ—Ç –Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                    logger.info(f"üîç publish_to_group_handler: –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç—É –¥–∞—Ç—É")
                    await query.edit_message_text(
                        f"‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {format_date_for_display(date)} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                        f"üìä –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —ç—Ç—É –¥–∞—Ç—É"
                    )
                return
            
            from infrastructure.telegram import sender
            from infrastructure.telegram import formatter
            from infrastructure.telegram.sender import ParseMode
            from shared.utils import format_summary_for_telegram_html_universal
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            if summary.reflection_text or summary.improved_summary_text:
                # –ü—É–±–ª–∏–∫—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                text_to_publish = summary.improved_summary_text or summary.summary_text
            else:
                # –ü—É–±–ª–∏–∫—É–µ–º –æ–±—ã—á–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                text_to_publish = summary.summary_text
            
            if use_html:
                formatted_parts = format_summary_for_telegram_html_universal(
                    text_to_publish, 
                    date, 
                    summary.vk_chat_id
                )
                parse_mode = ParseMode.HTML
            else:
                from shared.utils import format_summary_for_telegram
                formatted_parts = format_summary_for_telegram(
                    text_to_publish, 
                    date, 
                    summary.vk_chat_id
                )
                parse_mode = ParseMode.MARKDOWN_V2
            
            for part in formatted_parts:
                if use_html:
                    # –î–ª—è HTML –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ bot.send_message
                    await context.bot.send_message(
                        chat_id=group_id,
                        text=part,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                else:
                    # –î–ª—è Markdown –∏—Å–ø–æ–ª—å–∑—É–µ–º safe_send_message
                    await sender.TelegramMessageSender.safe_send_message(
                        context.bot,
                        group_id,
                        part,
                        parse_mode=parse_mode
                    )
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                format_success_message(
                    f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø—É"
                ),
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_to_group_handler: {e}", exc_info=True)
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def create_for_date_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            # create_for_date_{vk_chat_id}_{date}
            data_without_prefix = query.data.replace('create_for_date_', '', 1)
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø—Ä–∞–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –∫–∞–∫ date
            parts = data_without_prefix.rsplit('_', 1)
            
            if len(parts) != 2:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
                
            vk_chat_id = parts[0]
            date = parts[1]
            
            context.user_data['selected_chat_id'] = vk_chat_id
            context.user_data['selected_date'] = date
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
            from infrastructure.telegram import keyboards
            keyboard = keyboards.scenario_selection_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {date}\n\n"
                f"‚ö° **–ë—ã—Å—Ç—Ä–∞—è** - —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (1-2 –º–∏–Ω)\n"
                f"üîÑ **–° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π** - –∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ (2-4 –º–∏–Ω)\n"
                f"üßπ **–° –æ—á–∏—Å—Ç–∫–æ–π** - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è (3-5 –º–∏–Ω)\n"
                f"üîç **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è** - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (4-6 –º–∏–Ω)",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_for_date_handler: {e}", exc_info=True)
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def publish_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('publish_menu_', '', 1)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            summaries = self.summary_service.get_available_summaries(vk_chat_id)
            
            if not summaries:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é."
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è–º–∏
            keyboard = []
            for summary in summaries[:10]:
                date_str = summary.date
                # Handle both enum and string types for summary_type
                summary_type_display = summary.summary_type.value if hasattr(summary.summary_type, 'value') else str(summary.summary_type)
                keyboard.append([InlineKeyboardButton(
                    f"üìÖ {date_str} ({summary_type_display})",
                    callback_data=f"select_publish_date_{vk_chat_id}_{date_str}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"quick_chat_{vk_chat_id}")])
            
            await query.edit_message_text(
                "üì§ [–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏]\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_menu_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))
    
    async def select_publish_date_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            # select_publish_date_{vk_chat_id}_{date}
            parts = query.data.split('_')
            date = parts[-1]
            vk_chat_id = '_'.join(parts[3:-1])
            
            context.user_data['selected_date'] = date
            context.user_data['selected_chat_id'] = vk_chat_id
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.publish_format_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                f"üì§ [–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏] –∑–∞ {date}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_publish_date_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))
    
    async def select_scenario_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º: scenario_{type}_{vk_chat_id}_{date}
            parts = query.data.replace('scenario_', '', 1).split('_')
            scenario_type = parts[0]
            date = parts[-1]
            vk_chat_id = '_'.join(parts[1:-1])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            context.user_data['selected_scenario'] = scenario_type
            context.user_data['selected_date'] = date
            context.user_data['selected_chat_id'] = vk_chat_id
            
            # Save scenario selection to database
            if self.user_service:
                self.user_service.save_user_ai_settings(
                    update.effective_user.id, 
                    scenario=scenario_type
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            current_provider = context.user_data.get('confirmed_provider')
            current_model = context.user_data.get('selected_model_id')
            
            if current_provider and current_model and current_provider != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ' and current_model != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ':
                # –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É
                print(f"üîç DEBUG: –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É:")
                print(f"   provider: {current_provider}")
                print(f"   model: {current_model}")
                print(f"   scenario: {scenario_type}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞
                from domains.summaries.constants import SummarizationScenarios
                scenario_names = SummarizationScenarios.NAMES
                
                await query.edit_message_text(
                    f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...\n\n"
                    f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(scenario_type, scenario_type)}\n"
                    f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                    f"üß† –ú–æ–¥–µ–ª—å: {current_model}\n"
                    f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                    f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä—è–º—É—é
                await self._run_actual_analysis(query, vk_chat_id, date, scenario_type, current_provider, current_model, context)
            else:
                # –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
                print(f"üîç DEBUG: –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:")
                print(f"   provider: {current_provider}")
                print(f"   model: {current_model}")
                
                await self._show_model_selection_for_scenario(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_scenario_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))

    async def _show_model_selection_for_scenario(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        query = update.callback_query
        
        try:
            scenario = context.user_data.get('selected_scenario')
            date = context.user_data.get('selected_date')
            vk_chat_id = context.user_data.get('selected_chat_id')
            
            # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            scenario_names = {
                'fast': '‚ö° –ë—ã—Å—Ç—Ä–∞—è',
                'reflection': 'üîÑ –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π',
                'cleaning': 'üßπ –° –æ—á–∏—Å—Ç–∫–æ–π',
                'structured': 'üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–ª—é—á–∏, —á—Ç–æ –∏ –≤ AI handlers)
            current_provider = context.user_data.get('confirmed_provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            current_model = context.user_data.get('selected_model_id', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            current_default_scenario = context.user_data.get('default_scenario', 'fast')
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.model_selection_for_summary_keyboard(vk_chat_id, date, scenario)
            
            await query.edit_message_text(
                f"ü§ñ [–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏] –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n\n"
                f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(scenario, scenario)}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                f"üß† –ú–æ–¥–µ–ª—å: {current_model}\n"
                f"‚öôÔ∏è –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(current_default_scenario, current_default_scenario)}\n\n"
                f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–π?",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _show_model_selection_for_scenario: {e}")
            await query.edit_message_text(format_error_message(e))
    
    async def run_summary_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        print(f"üîç DEBUG: run_summary_handler –≤—ã–∑–≤–∞–Ω —Å callback_data: {query.data}")
        logger.info(f"üîç DEBUG: run_summary_handler –≤—ã–∑–≤–∞–Ω —Å callback_data: {query.data}")
        
        try:
            # –ü–∞—Ä—Å–∏–º: run_summary_{vk_chat_id}_{date}_{scenario}
            parts = query.data.replace('run_summary_', '', 1).split('_')
            scenario = parts[-1]
            date = parts[-2]
            vk_chat_id = '_'.join(parts[:-2])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–ª—é—á–∏, —á—Ç–æ –∏ –≤ AI handlers)
            provider = context.user_data.get('confirmed_provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            model = context.user_data.get('selected_model_id', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            
            # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            scenario_names = {
                'fast': '‚ö° –ë—ã—Å—Ç—Ä–∞—è',
                'reflection': 'üîÑ –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π',
                'cleaning': 'üßπ –° –æ—á–∏—Å—Ç–∫–æ–π',
                'structured': 'üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
            }
            
            await query.edit_message_text(
                f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...\n\n"
                f"üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_names.get(scenario, scenario)}\n"
                f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}\n"
                f"üß† –ú–æ–¥–µ–ª—å: {model}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            await self._run_actual_analysis(query, vk_chat_id, date, scenario, provider, model, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ run_summary_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))
    
    def _convert_scenario_to_steps(self, scenario: str, clean_data_first: bool) -> List[StepType]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤"""
        from domains.ai.models import StepType
        
        steps = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if clean_data_first:
            steps.append(StepType.CLEANING)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
        if scenario == 'fast':
            steps.append(StepType.SUMMARIZATION)
        elif scenario == 'reflection':
            steps.extend([StepType.SUMMARIZATION, StepType.REFLECTION, StepType.IMPROVEMENT])
        elif scenario == 'cleaning':
            steps.extend([StepType.CLEANING, StepType.SUMMARIZATION])
        elif scenario == 'structured':
            steps.extend([StepType.SUMMARIZATION, StepType.CLASSIFICATION, StepType.EXTRACTION, StepType.PARENT_SUMMARY])
        elif scenario == 'with_schedule':
            steps.extend([StepType.SUMMARIZATION, StepType.SCHEDULE_ANALYSIS])
        elif scenario == 'full':
            steps.extend([StepType.CLEANING, StepType.SUMMARIZATION, StepType.REFLECTION, StepType.IMPROVEMENT, StepType.CLASSIFICATION, StepType.EXTRACTION, StepType.SCHEDULE_ANALYSIS, StepType.PARENT_SUMMARY])
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            steps.append(StepType.SUMMARIZATION)
        
        return steps

    def _map_scenario_to_analysis_type(self, scenario: str) -> tuple:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã AnalysisRequest
        
        Returns:
            tuple: (analysis_type, clean_data_first)
        """
        from domains.ai.models import AnalysisType
        
        if scenario == 'fast':
            return (AnalysisType.SUMMARIZATION, False)
        elif scenario == 'reflection':
            return (AnalysisType.REFLECTION, False)
        elif scenario == 'structured':
            return (AnalysisType.STRUCTURED, False)
        elif scenario == 'cleaning':
            return (AnalysisType.SUMMARIZATION, True)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –±—ã—Å—Ç—Ä–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            return (AnalysisType.SUMMARIZATION, False)

    async def _run_actual_analysis(self, query, vk_chat_id: str, date: str, scenario: str, provider: str, model: str, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞"""
        print(f"üîç DEBUG: _run_actual_analysis –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print(f"   vk_chat_id: {vk_chat_id}")
        print(f"   date: {date}")
        print(f"   scenario: {scenario}")
        print(f"   provider: {provider}")
        print(f"   model: {model}")
        logger.info(f"üîç DEBUG: _run_actual_analysis –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        logger.info(f"   vk_chat_id: {vk_chat_id}")
        logger.info(f"   date: {date}")
        logger.info(f"   scenario: {scenario}")
        logger.info(f"   provider: {provider}")
        logger.info(f"   model: {model}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        analysis_type, clean_data_first = self._map_scenario_to_analysis_type(scenario)
        logger.info(f"üìã –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
        logger.info(f"üìã –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}")
        logger.info(f"üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: {clean_data_first}")
        
        try:
            from domains.chats.service import ChatService
            from core.database.connection import DatabaseConnection
            from core.config import load_config
            from domains.ai.models import AnalysisRequest, AnalysisType
            from domains.summaries.models import Summary, SummaryType
            from shared.utils import format_success_message, format_error_message
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            config = load_config()
            db_connection = DatabaseConnection(config['database'].path)
            chat_service = ChatService(db_connection)
            
            messages = chat_service.get_messages_by_date(vk_chat_id, date)
            
            if not messages:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            messages_data = [msg.model_dump() if hasattr(msg, 'model_dump') else msg.dict() for msg in messages]
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º AnalysisRequest —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            print(f"   provider_name: {provider}")
            print(f"   model_id: {model}")
            print(f"   user_id: {query.from_user.id}")
            logger.info(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º AnalysisRequest —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            logger.info(f"   provider_name: {provider}")
            logger.info(f"   model_id: {model}")
            logger.info(f"   user_id: {query.from_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
            # –ü–æ–ª—É—á–∞–µ–º AI —Å–µ—Ä–≤–∏—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            from core.app_context import get_app_context
            ctx = get_app_context()
            ai_service = ctx.ai_service
            
            # –°–æ–∑–¥–∞–µ–º LLM Logger –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
            llm_logger = self._create_llm_logger(date, scenario, model, provider, query.from_user.id)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
            from domains.ai.models import StepType
            steps = self._convert_scenario_to_steps(scenario, clean_data_first)
            
            analysis_request = AnalysisRequest(
                messages=messages_data,
                provider_name=provider,
                model_id=model,
                user_id=query.from_user.id,
                chat_context={'group_id': 1, 'date': date},  # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π group_id
                llm_logger=llm_logger,
                steps=steps  # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–£
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            result = await ai_service.analyze_chat(analysis_request)
            
            if result.success:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                step_data = self.summary_service.extract_step_results_from_analysis(
                    result, scenario
                )

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Summary —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                summary = Summary(
                    vk_chat_id=vk_chat_id,
                    date=date,
                    summary_text=step_data.get('summary') or result.result,
                    reflection_text=step_data.get('reflection'),
                    improved_summary_text=step_data.get('improved'),
                    classification_data=step_data.get('classification'),
                    extraction_data=step_data.get('extraction'),
                    parent_summary_text=step_data.get('parent_summary'),
                    provider_name=result.provider_name,
                    processing_time=result.processing_time,
                    model_provider=provider,
                    model_id=model,
                    scenario_type=scenario,
                    generation_time_seconds=result.processing_time
                )

                self.summary_service.save_summary(summary)
                
                # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                scenario_names = {
                    'fast': '‚ö° –ë—ã—Å—Ç—Ä–∞—è',
                    'reflection': 'üîÑ –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π',
                    'cleaning': 'üßπ –° –æ—á–∏—Å—Ç–∫–æ–π',
                    'structured': 'üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'
                }
                
                from infrastructure.telegram import keyboards
                keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                display_text = self._get_display_text_for_scenario(
                    scenario, step_data, result.result
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                result_text = display_text
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                from shared.utils import format_message_for_telegram
                message_parts = format_message_for_telegram(result_text)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                from infrastructure.logging.message_logger import TelegramMessageLogger
                log_path = TelegramMessageLogger.log_outgoing_message(
                    chat_id=query.message.chat_id,
                    text=message_parts[0],
                    action='edit',
                    parse_mode='Markdown',
                    message_id=query.message.message_id,
                    context={
                        'handler': '_run_actual_analysis',
                        'scenario': scenario,
                        'provider': provider,
                        'model': model,
                        'is_result': True
                    }
                )

                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏, –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ format_success_message
                    await query.edit_message_text(
                        message_parts[0],
                        reply_markup=keyboard,
                        disable_web_page_preview=True,
                        parse_mode='Markdown'
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    if log_path:
                        TelegramMessageLogger.log_success(log_path, query.message.message_id)
                        
                except Exception as e:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if log_path:
                        TelegramMessageLogger.log_error(log_path, str(e))
                    raise
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                for part in message_parts[1:]:
                    # –õ–æ–≥–∏—Ä—É–µ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                    from infrastructure.logging.message_logger import TelegramMessageLogger
                    log_path = TelegramMessageLogger.log_outgoing_message(
                        chat_id=query.message.chat_id,
                        text=part,
                        action='send',
                        parse_mode='Markdown',
                        context={
                            'handler': '_run_actual_analysis',
                            'scenario': scenario,
                            'part_number': message_parts.index(part) + 1
                        }
                    )
                    
                    try:
                        message = await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=part,
                            disable_web_page_preview=True,
                            parse_mode='Markdown'
                        )
                        if log_path:
                            TelegramMessageLogger.log_success(log_path, message.message_id)
                    except Exception as e:
                        if log_path:
                            TelegramMessageLogger.log_error(log_path, str(e))
            else:
                from infrastructure.telegram import keyboards
                keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
                
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.error}",
                    reply_markup=keyboard
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _run_actual_analysis: {e}")
            from infrastructure.telegram import keyboards
            keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                format_error_message(e),
                reply_markup=keyboard
            )
    
    def _get_display_text_for_scenario(
        self, 
        scenario: str, 
        step_data: Dict[str, Optional[str]], 
        fallback_result: str
    ) -> str:
        """
        –í—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
        
        Args:
            scenario: –¢–∏–ø —Å—Ü–µ–Ω–∞—Ä–∏—è (fast, reflection, cleaning, structured)
            step_data: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            fallback_result: –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if scenario == 'reflection':
            # –î–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            if step_data.get('improved'):
                return step_data['improved']
            # –ï—Å–ª–∏ –Ω–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            elif step_data.get('summary'):
                return step_data['summary']
        
        elif scenario == 'structured':
            # –î–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            if step_data.get('parent_summary'):
                return step_data['parent_summary']
            # –ò–ª–∏ –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            elif step_data.get('summary'):
                return step_data['summary']
        
        elif scenario in ['fast', 'cleaning']:
            # –î–ª—è –±—ã—Å—Ç—Ä–æ–π/–æ—á–∏—â–µ–Ω–Ω–æ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            if step_data.get('summary'):
                return step_data['summary']
        
        # Fallback –Ω–∞ –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return fallback_result
    
    async def preset_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º: preset_{type}_{vk_chat_id}_{date}
            parts = query.data.replace('preset_', '', 1).split('_')
            preset_type = parts[0]
            date = parts[-1]
            vk_chat_id = '_'.join(parts[1:-1])
            
            await self._handle_preset_selection(update, context, preset_type, vk_chat_id, date)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ preset_selection_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))
    
    async def _handle_preset_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, preset_type: str, vk_chat_id: str, date: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞"""
        query = update.callback_query
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Å–µ—Ç
        from domains.ai.presets import PresetRegistry
        preset = PresetRegistry.get_preset(preset_type)
        
        if not preset:
            # Fallback –¥–ª—è legacy —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            legacy_mapping = {
                'fast': 'fast',
                'reflection': 'reflection', 
                'cleaning': 'cleaning',
                'structured': 'structured'
            }
            preset_type = legacy_mapping.get(preset_type, 'fast')
            preset = PresetRegistry.get_preset(preset_type)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —à–∞–≥–∏
        context.user_data['selected_steps'] = [step.value for step in preset.steps]
        context.user_data['selected_scenario'] = preset_type  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        context.user_data['selected_date'] = date
        context.user_data['selected_chat_id'] = vk_chat_id
        
        # Save scenario selection to database
        if self.user_service:
            self.user_service.save_user_ai_settings(
                update.effective_user.id, 
                scenario=preset_type
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        current_provider = context.user_data.get('confirmed_provider')
        current_model = context.user_data.get('selected_model_id')
        
        if current_provider and current_model and current_provider != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ' and current_model != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ':
            # –ú–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É
            await query.edit_message_text(
                f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...\n\n"
                f"üìã –ü—Ä–µ—Å–µ—Ç: {preset.icon} {preset.name}\n"
                f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                f"üß† –ú–æ–¥–µ–ª—å: {current_model}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üîß –®–∞–≥–∏: {', '.join([step.value for step in preset.steps])}\n\n"
                f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤—ã–º–∏ —à–∞–≥–∞–º–∏
            await self._run_analysis_with_steps(query, vk_chat_id, date, preset.steps, current_provider, current_model, context)
        else:
            # –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            await self._show_model_selection_for_preset(update, context, preset)
    
    async def custom_pipeline_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ pipeline"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º: custom_pipeline_{vk_chat_id}_{date}
            parts = query.data.replace('custom_pipeline_', '', 1).split('_')
            date = parts[-1]
            vk_chat_id = '_'.join(parts[:-1])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
            from domains.ai.models import StepType
            if 'custom_steps' not in context.user_data:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
                context.user_data['custom_steps'] = await self._load_custom_steps(update.effective_user.id)
            
            selected_steps = context.user_data.get('custom_steps', [StepType.SUMMARIZATION])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['selected_date'] = date
            context.user_data['selected_chat_id'] = vk_chat_id
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.custom_pipeline_keyboard(vk_chat_id, date, selected_steps)
            
            await query.edit_message_text(
                "üé® [–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞]\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
                "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —à–∞–≥ —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å)\n\n"
                "üí° –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ custom_pipeline_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))
    
    async def toggle_step_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Toggle —à–∞–≥–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º: toggle_step_{step_name}_{vk_chat_id}_{date}
            parts = query.data.replace('toggle_step_', '', 1).split('_')
            step_name = parts[0]
            date = parts[-1]
            vk_chat_id = '_'.join(parts[1:-1])
            
            from domains.ai.models import StepType
            step_type = StepType(step_name)
            
            custom_steps = context.user_data.get('custom_steps', [StepType.SUMMARIZATION])
            
            if step_type in custom_steps:
                custom_steps.remove(step_type)
            else:
                custom_steps.append(step_type)
            
            context.user_data['custom_steps'] = custom_steps
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é
            from infrastructure.telegram import keyboards
            keyboard = keyboards.custom_pipeline_keyboard(vk_chat_id, date, custom_steps)
            
            await query.edit_message_text(
                "üé® [–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∞]\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
                "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —à–∞–≥ —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å)",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_step_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))
    
    async def _run_analysis_with_steps(self, query, vk_chat_id: str, date: str, steps, provider: str, model: str, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –Ω–æ–≤—ã–º–∏ —à–∞–≥–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            from core.app_context import get_app_context
            ctx = get_app_context()
            messages = ctx.chat_service.get_messages_by_date(vk_chat_id, date)
            if not messages:
                await query.edit_message_text("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–∏
            messages_data = [msg.model_dump() if hasattr(msg, 'model_dump') else msg.dict() for msg in messages]
            
            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å scenario –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
            scenario = self._get_scenario_name_from_steps(steps)
            
            # –°–æ–∑–¥–∞—Ç—å llm_logger —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            llm_logger = self._create_llm_logger(date, scenario, model, provider, context.user_data.get('user_id'))
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ —à–∞–≥–∞–º–∏
            from domains.ai.models import AnalysisRequest, StepType
            request = AnalysisRequest(
                messages=messages_data,
                provider_name=provider,
                model_id=model,
                user_id=context.user_data.get('user_id'),
                chat_context={'group_id': 1, 'date': date},  # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π group_id
                llm_logger=llm_logger,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π logger
                steps=steps
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result = await ctx.ai_service.analyze_chat(request)
            
            if result.success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                from infrastructure.telegram import keyboards
                keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                step_data = self.summary_service.extract_step_results_from_analysis(
                    result, scenario
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
                display_text = self._get_display_text_for_scenario(
                    scenario, step_data, result.result
                )
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Summary —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                summary = Summary(
                    vk_chat_id=vk_chat_id,
                    date=date,
                    summary_text=step_data.get('summary') or result.result,
                    reflection_text=step_data.get('reflection'),
                    improved_summary_text=step_data.get('improved'),
                    classification_data=step_data.get('classification'),
                    extraction_data=step_data.get('extraction'),
                    parent_summary_text=step_data.get('parent_summary'),
                    provider_name=result.provider_name,
                    processing_time=result.processing_time,
                    model_provider=provider,
                    model_id=model,
                    scenario_type=scenario,
                    generation_time_seconds=result.processing_time
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ –ë–î
                self.summary_service.save_summary(summary)
                logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {vk_chat_id}, {date}")
                
                result_text = f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {result.processing_time:.2f}—Å\n\n"
                result_text += f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏: {', '.join(result.metadata.get('executed_steps', []))}\n"
                result_text += f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.provider_name}\n"
                result_text += f"üß† –ú–æ–¥–µ–ª—å: {model}\n"
                result_text += f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                result_text += f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{display_text}"
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                from shared.utils import format_message_for_telegram
                message_parts = format_message_for_telegram(result_text)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                from infrastructure.logging.message_logger import TelegramMessageLogger
                log_path = TelegramMessageLogger.log_outgoing_message(
                    chat_id=query.message.chat_id,
                    text=format_success_message(message_parts[0]),
                    action='edit',
                    parse_mode='None',
                    message_id=query.message.message_id,
                    context={'handler': 'preset_selection_handler'}
                )

                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await query.edit_message_text(
                        format_success_message(message_parts[0]),
                        reply_markup=keyboard,
                        disable_web_page_preview=True
                    )
                    if log_path:
                        TelegramMessageLogger.log_success(log_path, query.message.message_id)
                except Exception as e:
                    if log_path:
                        TelegramMessageLogger.log_error(log_path, str(e))
                    raise
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                for part in message_parts[1:]:
                    # –õ–æ–≥–∏—Ä—É–µ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                    from infrastructure.logging.message_logger import TelegramMessageLogger
                    log_path = TelegramMessageLogger.log_outgoing_message(
                        chat_id=query.message.chat_id,
                        text=part,
                        action='send',
                        parse_mode='None',
                        context={
                            'handler': 'preset_selection_handler',
                            'scenario': scenario,
                            'part_number': message_parts.index(part) + 1
                        }
                    )
                    
                    try:
                        message = await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=format_success_message(part),
                            disable_web_page_preview=True
                        )
                        if log_path:
                            TelegramMessageLogger.log_success(log_path, message.message_id)
                    except Exception as e:
                        if log_path:
                            TelegramMessageLogger.log_error(log_path, str(e))
            else:
                from infrastructure.telegram import keyboards
                keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
                
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.error}",
                    reply_markup=keyboard
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _run_analysis_with_steps: {e}")
            from infrastructure.telegram import keyboards
            keyboard = keyboards.summary_result_keyboard(vk_chat_id, date)
            
            await query.edit_message_text(
                format_error_message(e),
                reply_markup=keyboard
            )
    
    async def run_custom_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º: run_custom_{vk_chat_id}_{date}
            parts = query.data.replace('run_custom_', '', 1).split('_')
            date = parts[-1]
            vk_chat_id = '_'.join(parts[:-1])
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —à–∞–≥–∏
            from domains.ai.models import StepType
            custom_steps = context.user_data.get('custom_steps', [StepType.SUMMARIZATION])
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not custom_steps:
                await query.edit_message_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await self._save_custom_steps(update.effective_user.id, custom_steps)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
            current_provider = context.user_data.get('confirmed_provider')
            current_model = context.user_data.get('selected_model_id')
            
            if current_provider and current_model and current_provider != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ' and current_model != '–ù–µ –≤—ã–±—Ä–∞–Ω–æ':
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                steps_display = ', '.join([s.value for s in custom_steps])
                await query.edit_message_text(
                    f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑...\n\n"
                    f"üîß –®–∞–≥–∏: {steps_display}\n"
                    f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                    f"üß† –ú–æ–¥–µ–ª—å: {current_model}\n"
                    f"üìÖ –î–∞—Ç–∞: {date}\n\n"
                    f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                    f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
                
                await self._run_analysis_with_steps(query, vk_chat_id, date, custom_steps, current_provider, current_model, context)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
                await query.edit_message_text(
                    "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –º–æ–¥–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n\n"
                    "üíæ –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI", callback_data="select_ai_provider"),
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"custom_pipeline_{vk_chat_id}_{date}")
                    ]])
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ run_custom_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))
    
    async def _save_custom_steps(self, user_id: int, steps: list):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
        import json
        
        if self.user_service:
            try:
                steps_json = json.dumps([s.value if hasattr(s, 'value') else s for s in steps])
                self.user_service.save_user_ai_settings(user_id, custom_steps=steps_json)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {steps_json}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    async def _load_custom_steps(self, user_id: int) -> list:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
        import json
        
        if self.user_service:
            try:
                settings = self.user_service.get_user_ai_settings(user_id)
                if settings and 'custom_steps' in settings:
                    from domains.ai.models import StepType
                    steps_list = json.loads(settings['custom_steps'])
                    steps = [StepType(s) for s in steps_list]
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {steps}")
                    return steps
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        from domains.ai.models import StepType
        return [StepType.SUMMARIZATION]
    
    def _create_llm_logger(self, date: str, scenario: str, model: str, provider: str, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å LLM Logger —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        from infrastructure.logging.llm_logger import LLMLogger
        import os
        
        LLM_LOGS_DIR = os.environ.get('LLM_LOGS_DIR', 'llm_logs')
        
        llm_logger = LLMLogger(
            LLM_LOGS_DIR,
            date=date,
            scenario=scenario,
            test_mode=False,
            model_name=model
        )
        llm_logger.set_session_info(provider, model, None, user_id)
        
        logger.info(f"üìÅ LLM Logger —Å–æ–∑–¥–∞–Ω: {llm_logger.get_logs_path()}")
        
        return llm_logger
    
    def _get_scenario_name_from_steps(self, steps):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–≥–æ–≤"""
        from domains.ai.models import StepType
        
        if len(steps) == 1 and steps[0] == StepType.SUMMARIZATION:
            return "fast"
        elif set(steps) == {StepType.SUMMARIZATION, StepType.REFLECTION, StepType.IMPROVEMENT}:
            return "reflection"
        elif StepType.CLEANING in steps and StepType.SUMMARIZATION in steps:
            return "cleaning"
        elif any(s in steps for s in [StepType.CLASSIFICATION, StepType.EXTRACTION]):
            return "structured"
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ —à–∞–≥–æ–≤
            return "custom_" + "_".join([s.value for s in steps])
    
    async def save_custom_preset_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º: save_custom_preset_{vk_chat_id}_{date}
            parts = query.data.replace('save_custom_preset_', '', 1).split('_')
            date = parts[-1]
            vk_chat_id = '_'.join(parts[:-1])
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —à–∞–≥–∏
            from domains.ai.models import StepType
            custom_steps = context.user_data.get('custom_steps', [StepType.SUMMARIZATION])
            
            if not custom_steps:
                await query.edit_message_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
            await query.edit_message_text(
                "üíæ [–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞]\n\n"
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —à–∞–≥–∏: {', '.join([s.value for s in custom_steps])}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"custom_pipeline_{vk_chat_id}_{date}")
                ]])
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
            context.user_data['waiting_for_preset_name'] = True
            context.user_data['preset_steps'] = custom_steps
            context.user_data['preset_vk_chat_id'] = vk_chat_id
            context.user_data['preset_date'] = date
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ save_custom_preset_handler: {e}", exc_info=True)
            await query.edit_message_text(format_error_message(e))
    
    async def handle_preset_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞"""
        if not context.user_data.get('waiting_for_preset_name'):
            return
        
        try:
            preset_name = update.message.text.strip()
            if not preset_name:
                await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ context
            steps = context.user_data.get('preset_steps', [])
            vk_chat_id = context.user_data.get('preset_vk_chat_id')
            date = context.user_data.get('preset_date')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Å–µ—Ç (–ø–æ–∫–∞ –≤ context, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –≤ –ë–î)
            user_id = update.effective_user.id
            if 'user_presets' not in context.user_data:
                context.user_data['user_presets'] = {}
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞
            preset_id = f"user_{user_id}_{int(time.time())}"
            
            context.user_data['user_presets'][preset_id] = {
                'name': preset_name,
                'steps': [s.value for s in steps],
                'created_at': time.time()
            }
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('waiting_for_preset_name', None)
            context.user_data.pop('preset_steps', None)
            context.user_data.pop('preset_vk_chat_id', None)
            context.user_data.pop('preset_date', None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            await update.message.reply_text(
                f"‚úÖ –ü—Ä–µ—Å–µ—Ç \"{preset_name}\" —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"–®–∞–≥–∏: {', '.join([s.value for s in steps])}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –º–µ–Ω—é \"–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã\"",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", callback_data=f"custom_pipeline_{vk_chat_id}_{date}")
                ]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_preset_name_input: {e}", exc_info=True)
            await update.message.reply_text(format_error_message(e))

