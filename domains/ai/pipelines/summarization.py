from typing import Any
from .base import BasePipeline
from ..models import PipelineStep, PipelineContext, AnalysisResult, AnalysisType

class SummarizationPipeline(BasePipeline):
    """Pipeline –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def _define_steps(self):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥–∏ pipeline"""
        self.steps = [
            PipelineStep(
                name="summarization",
                description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞",
                required=True,
                timeout=120
            )
        ]
    
    async def _execute_step(self, step: PipelineStep, context: PipelineContext) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        if step.name == "summarization":
            return await self._perform_summarization(context)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step.name}")
    
    async def _perform_summarization(self, context: PipelineContext) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é"""
        provider = context.provider
        messages = context.request.messages
        chat_context = context.request.chat_context or {}
        
        if not provider:
            raise ValueError("–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if not messages:
            raise ValueError("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        self.logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        summary = await provider.summarize_chat(messages, chat_context)
        
        if not summary:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        
        self.logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return summary
    
    async def _build_final_result(self, context: PipelineContext, processing_time: float) -> AnalysisResult:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        summary = self.get_step_result(context, "summarization")
        
        if not summary:
            return AnalysisResult(
                success=False,
                error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é",
                provider_name=context.request.provider_name,
                model_id=context.request.model_id,
                processing_time=processing_time,
                analysis_type=AnalysisType.SUMMARIZATION
            )
        
        return AnalysisResult(
            success=True,
            result=summary,
            provider_name=context.request.provider_name,
            model_id=context.request.model_id,
            processing_time=processing_time,
            analysis_type=AnalysisType.SUMMARIZATION,
            metadata={
                "messages_count": len(context.request.messages),
                "summary_length": len(summary)
            }
        )

