from typing import Any
from .base import BasePipeline
from ..models import PipelineStep, PipelineContext, AnalysisResult, AnalysisType

class ReflectionPipeline(BasePipeline):
    """Pipeline –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def _define_steps(self):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥–∏ pipeline"""
        self.steps = [
            PipelineStep(
                name="reflection",
                description="–ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π",
                required=True,
                timeout=90
            ),
            PipelineStep(
                name="improvement",
                description="–£–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏",
                required=True,
                timeout=90
            )
        ]
    
    async def _execute_step(self, step: PipelineStep, context: PipelineContext) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        if step.name == "reflection":
            return await self._perform_reflection(context)
        elif step.name == "improvement":
            return await self._perform_improvement(context)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step.name}")
    
    async def _perform_reflection(self, context: PipelineContext) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é"""
        provider = context.provider
        summary = context.step_results.get("summarization")
        
        if not summary:
            raise ValueError("–ù–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
        
        if not provider:
            raise ValueError("–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        self.logger.info("ü§î –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π")
        
        reflection_prompt = self._create_reflection_prompt(summary, context)
        reflection = await provider.generate_response(reflection_prompt)
        
        if not reflection:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é")
        
        self.logger.info(f"‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(reflection)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return reflection
    
    async def _perform_improvement(self, context: PipelineContext) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        provider = context.provider
        original_summary = context.step_results.get("summarization")
        reflection = context.step_results.get("reflection")
        
        if not original_summary or not reflection:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        
        if not provider:
            raise ValueError("–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        self.logger.info("‚ú® –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        
        improvement_prompt = self._create_improvement_prompt(original_summary, reflection)
        improved_summary = await provider.generate_response(improvement_prompt)
        
        if not improved_summary:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        
        self.logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(improved_summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return improved_summary
    
    def _create_reflection_prompt(self, summary: str, context: PipelineContext) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        messages = context.request.messages
        total_messages = len(messages)
        date = context.request.chat_context.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞') if context.request.chat_context else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–ø–µ—Ä–≤—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
        max_messages = min(50, total_messages)
        formatted_messages = ""
        
        for i, msg in enumerate(messages[:max_messages]):
            message_id = msg.get('id', i + 1)
            text = msg.get('text', '').strip()
            sender = msg.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            
            if text:
                # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                formatted_messages += f"{i+1}. [{sender}]: {text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if total_messages > max_messages:
            formatted_messages += f"\n... –∏ –µ—â–µ {total_messages - max_messages} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —á–∞—Ç–∞ –∏ –¥–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É:

–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:
{summary}

–ò–°–•–û–î–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø (–ø–µ—Ä–≤—ã–µ {max_messages} –∏–∑ {total_messages}):
{formatted_messages}

–ö–û–ù–¢–ï–ö–°–¢:
- –î–∞—Ç–∞: {date}
- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {max_messages}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
1. –ü–æ–ª–Ω–æ—Ç—É –æ—Ö–≤–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ä–∞–≤–Ω–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
2. –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ (–ø—Ä–æ–≤–µ—Ä—å –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º)
3. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å
4. –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (—á—Ç–æ –Ω–µ –≤–æ—à–ª–æ –≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é)
5. –í–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è

–î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∫—Ä–∏—Ç–∏–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."""
    
    def _create_improvement_prompt(self, original_summary: str, reflection: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        return f"""–ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:

–ò–°–•–û–î–ù–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:
{original_summary}

–ê–ù–ê–õ–ò–ó –ò –ö–†–ò–¢–ò–ö–ê:
{reflection}

–°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è:
1. –£—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
2. –ë–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ª–æ–≥–∏—á–Ω–∞
3. –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
4. –õ–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –∏ –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è

–£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:"""
    
    async def _build_final_result(self, context: PipelineContext, processing_time: float) -> AnalysisResult:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        summary = context.step_results.get("summarization")
        reflection = self.get_step_result(context, "reflection")
        improved = self.get_step_result(context, "improvement")
        
        if not summary:
            return AnalysisResult(
                success=False,
                error="–ù–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏",
                provider_name=context.request.provider_name,
                model_id=context.request.model_id,
                processing_time=processing_time,
                analysis_type=AnalysisType.REFLECTION
            )
        
        if not reflection:
            return AnalysisResult(
                success=False,
                error="–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é",
                provider_name=context.request.provider_name,
                model_id=context.request.model_id,
                processing_time=processing_time,
                analysis_type=AnalysisType.REFLECTION
            )
        
        result_text = f"üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:\n{summary}\n\n"
        result_text += f"ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑:\n{reflection}\n\n"
        result_text += f"‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:\n{improved}"
        
        return AnalysisResult(
            success=True,
            result=result_text,
            provider_name=context.request.provider_name,
            model_id=context.request.model_id,
            processing_time=processing_time,
            analysis_type=AnalysisType.REFLECTION,
            metadata={
                "has_reflection": bool(reflection),
                "has_improvement": bool(improved),
                "original_length": len(summary),
                "reflection_length": len(reflection) if reflection else 0,
                "improved_length": len(improved) if improved else 0
            }
        )

