from typing import Any
import json
from .base import BasePipeline
from ..models import PipelineStep, PipelineContext, AnalysisResult, AnalysisType

class StructuredAnalysisPipeline(BasePipeline):
    """Pipeline –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–µ–π"""
    
    def _define_steps(self):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥–∏ pipeline"""
        self.steps = [
            PipelineStep(
                name="classification",
                description="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                required=True,
                timeout=120
            ),
            PipelineStep(
                name="extraction",
                description="–≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π",
                required=True,
                timeout=120
            ),
            PipelineStep(
                name="parent_summary",
                description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
                required=True,
                timeout=90
            )
        ]
    
    async def _execute_step(self, step: PipelineStep, context: PipelineContext) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if step.name == "classification":
            return await self._perform_classification(context)
        elif step.name == "extraction":
            return await self._perform_extraction(context)
        elif step.name == "parent_summary":
            return await self._perform_parent_summary(context)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step.name}")
    
    async def _perform_classification(self, context: PipelineContext) -> list:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
        provider = context.provider
        messages = context.request.messages
        
        if not provider:
            raise ValueError("–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if not messages:
            raise ValueError("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        self.logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        classification_prompt = self._create_classification_prompt(messages)
        response = await provider.generate_response(classification_prompt)
        
        if not response:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é")
        
        classification = self._parse_classification_response(response)
        self.logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(classification)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return classification
    
    async def _perform_extraction(self, context: PipelineContext) -> list:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é —Å–ª–æ—Ç–æ–≤"""
        provider = context.provider
        messages = context.request.messages
        classification = self.get_step_result(context, "classification")
        
        if not provider:
            raise ValueError("–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if not classification:
            raise ValueError("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        self.logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é —Å–ª–æ—Ç–æ–≤")
        
        extraction_prompt = self._create_extraction_prompt(messages, classification)
        response = await provider.generate_response(extraction_prompt)
        
        if not response:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é")
        
        events = self._parse_extraction_response(response)
        self.logger.info(f"‚úÖ –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(events)} —Å–æ–±—ã—Ç–∏–π")
        
        return events
    
    async def _perform_parent_summary(self, context: PipelineContext) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        provider = context.provider
        events = self.get_step_result(context, "extraction")
        
        if not provider:
            raise ValueError("–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if not events:
            raise ValueError("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏")
        
        self.logger.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        
        summary_prompt = self._create_parent_summary_prompt(events)
        summary = await provider.generate_response(summary_prompt)
        
        if not summary:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É")
        
        self.logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return summary
    
    def _create_classification_prompt(self, messages: list) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        messages_json = json.dumps([
            {"id": msg.get('message_id', msg.get('id', '')), "text": msg.get('text')} 
            for msg in messages
        ], ensure_ascii=False)
        
        return f"""–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ —Ç–∏–ø–∞–º:

–°–û–û–ë–©–ï–ù–ò–Ø:
{messages_json}

–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
- "important": –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
- "coordination": –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- "micromanagement": –ú–∏–∫—Ä–æ–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
- "irrelevant": –ù–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- "release_pickup": –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–±–æ—Ä–µ –¥–µ—Ç–µ–π
- "rules": –ü—Ä–∞–≤–∏–ª–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- "events": –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å–æ–±—ã—Ç–∏—è
- "problems": –ü—Ä–æ–±–ª–µ–º—ã –∏ –∂–∞–ª–æ–±—ã

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏:
[{{"message_id": "id", "class": "category"}}, ...]"""
    
    def _create_extraction_prompt(self, messages: list, classification: list) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏"""
        classification_dict = {item.get('message_id'): item.get('class') for item in classification}
        
        messages_with_class = []
        for msg in messages:
            message_id = str(msg.get('message_id', msg.get('id', '')))
            msg_class = classification_dict.get(message_id, 'unknown')
            messages_with_class.append({
                "id": message_id,
                "text": msg.get('text'),
                "type": msg_class
            })
        
        messages_json = json.dumps(messages_with_class, ensure_ascii=False)
        
        return f"""–ò–∑–≤–ª–µ–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π:

–°–û–û–ë–©–ï–ù–ò–Ø –° –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ï–ô:
{messages_json}

–ò–∑–≤–ª–µ–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ —Å–æ–±—ã—Ç–∏–π. –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- type: —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (rule, event, problem, coordination, etc.)
- title: –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
- description: –æ–ø–∏—Å–∞–Ω–∏–µ
- importance: –≤–∞–∂–Ω–æ—Å—Ç—å (high, medium, low)
- action_required: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Å–æ–±—ã—Ç–∏–π."""
    
    def _create_parent_summary_prompt(self, events: list) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–≤–æ–¥–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        events_json = json.dumps(events, ensure_ascii=False, indent=2)
        
        return f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –∏ –ø–æ–Ω—è—Ç–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:

–°–û–ë–´–¢–ò–Ø:
{events_json}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É, –∫–æ—Ç–æ—Ä–∞—è:
1. –í—ã–¥–µ–ª—è–µ—Ç —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ
2. –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º
3. –£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
4. –õ–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –∏ –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."""
    
    def _parse_classification_response(self, response: str) -> list:
        """–ü–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            cleaned_response = self._clean_json_response(response)
            return json.loads(cleaned_response)
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return []
    
    def _parse_extraction_response(self, response: str) -> list:
        """–ü–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏"""
        try:
            cleaned_response = self._clean_json_response(response)
            return json.loads(cleaned_response)
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏: {e}")
            return []
    
    def _clean_json_response(self, response: str) -> str:
        """–û—á–∏—Å—Ç–∏—Ç—å JSON –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤"""
        if '```json' in response:
            start = response.find('```json') + 7
            end = response.find('```', start)
            if end != -1:
                response = response[start:end].strip()
        elif '```' in response:
            start = response.find('```') + 3
            end = response.find('```', start)
            if end != -1:
                response = response[start:end].strip()
        
        response = response.strip()
        
        start_bracket = response.find('[')
        end_bracket = response.rfind(']')
        
        if start_bracket != -1 and end_bracket != -1 and end_bracket > start_bracket:
            response = response[start_bracket:end_bracket + 1]
        
        return response
    
    async def _build_final_result(self, context: PipelineContext, processing_time: float) -> AnalysisResult:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        classification = self.get_step_result(context, "classification")
        events = self.get_step_result(context, "extraction")
        summary = self.get_step_result(context, "parent_summary")
        
        if not all([classification, events, summary]):
            return AnalysisResult(
                success=False,
                error="–ù–µ –≤—Å–µ —à–∞–≥–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã",
                provider_name=context.request.provider_name,
                model_id=context.request.model_id,
                processing_time=processing_time,
                analysis_type=AnalysisType.STRUCTURED
            )
        
        return AnalysisResult(
            success=True,
            result=summary,
            provider_name=context.request.provider_name,
            model_id=context.request.model_id,
            processing_time=processing_time,
            analysis_type=AnalysisType.STRUCTURED,
            metadata={
                "classification_count": len(classification),
                "events_count": len(events),
                "summary_length": len(summary)
            }
        )

