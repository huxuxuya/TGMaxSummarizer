from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional
import logging
import asyncio
from ..models import PipelineStep, PipelineContext, AnalysisResult, AnalysisType

logger = logging.getLogger(__name__)

class BasePipeline(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI pipelines"""
    
    def __init__(self):
        self.steps: List[PipelineStep] = []
        self.logger = logging.getLogger(self.__class__.__name__)
        self._define_steps()
    
    @abstractmethod
    def _define_steps(self):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥–∏ pipeline"""
        pass
    
    @abstractmethod
    async def _execute_step(self, step: PipelineStep, context: PipelineContext) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥"""
        pass
    
    async def execute(self, context: PipelineContext) -> AnalysisResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Å—å pipeline"""
        start_time = asyncio.get_event_loop().time()
        
        try:
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ pipeline: {self.__class__.__name__}")
            
            for step in self.steps:
                self.logger.info(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: {step.name}")
                
                try:
                    result = await asyncio.wait_for(
                        self._execute_step(step, context),
                        timeout=step.timeout
                    )
                    
                    context.step_results[step.name] = result
                    self.logger.info(f"‚úÖ –®–∞–≥ {step.name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                except asyncio.TimeoutError:
                    error_msg = f"–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {step.name}"
                    self.logger.error(f"‚è∞ {error_msg}")
                    
                    if step.required:
                        return AnalysisResult(
                            success=False,
                            error=error_msg,
                            provider_name=context.request.provider_name,
                            model_id=context.request.model_id,
                            analysis_type=context.request.analysis_type
                        )
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ {step.name}")
                        context.step_results[step.name] = None
                
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step.name}: {str(e)}"
                    self.logger.error(f"‚ùå {error_msg}")
                    
                    if step.required:
                        return AnalysisResult(
                            success=False,
                            error=error_msg,
                            provider_name=context.request.provider_name,
                            model_id=context.request.model_id,
                            analysis_type=context.request.analysis_type
                        )
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ {step.name}")
                        context.step_results[step.name] = None
            
            end_time = asyncio.get_event_loop().time()
            processing_time = end_time - start_time
            
            final_result = await self._build_final_result(context, processing_time)
            self.logger.info(f"‚úÖ Pipeline {self.__class__.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {processing_time:.2f}—Å")
            
            return final_result
            
        except Exception as e:
            end_time = asyncio.get_event_loop().time()
            processing_time = end_time - start_time
            
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ pipeline: {str(e)}"
            self.logger.error(f"üí• {error_msg}")
            
            return AnalysisResult(
                success=False,
                error=error_msg,
                provider_name=context.request.provider_name,
                model_id=context.request.model_id,
                processing_time=processing_time,
                analysis_type=context.request.analysis_type
            )
    
    @abstractmethod
    async def _build_final_result(self, context: PipelineContext, processing_time: float) -> AnalysisResult:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        pass
    
    def get_step_result(self, context: PipelineContext, step_name: str) -> Any:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞"""
        return context.step_results.get(step_name)
    
    def add_metadata(self, context: PipelineContext, key: str, value: Any):
        """–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context.metadata[key] = value

