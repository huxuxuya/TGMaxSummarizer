from typing import Any
import json
import re
from .base import BasePipeline
from ..models import PipelineStep, PipelineContext, AnalysisResult, AnalysisType

class DataCleaningPipeline(BasePipeline):
    """Pipeline –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    def _define_steps(self):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥–∏ pipeline"""
        self.steps = [
            PipelineStep(
                name="cleaning",
                description="–û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
                required=True,
                timeout=90
            )
        ]
    
    async def _execute_step(self, step: PipelineStep, context: PipelineContext) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ –æ—á–∏—Å—Ç–∫–∏"""
        if step.name == "cleaning":
            return await self._perform_cleaning(context)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step.name}")
    
    async def _perform_cleaning(self, context: PipelineContext) -> list:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        provider = context.provider
        messages = context.request.messages
        
        if not provider:
            raise ValueError("–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if not messages:
            raise ValueError("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        self.logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        cleaning_prompt = self._create_cleaning_prompt(messages)
        response = await provider.generate_response(cleaning_prompt)
        
        if not response:
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return messages
        
        selected_ids = self._parse_cleaning_response(response)
        
        if not selected_ids:
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return messages
        
        cleaned_messages = self._filter_messages_by_ids(messages, selected_ids)
        self.logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(cleaned_messages)} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return cleaned_messages
    
    def _create_cleaning_prompt(self, messages: list) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
        messages_text = ""
        for i, msg in enumerate(messages):
            message_id = msg.get('id', i)
            text = msg.get('text', '').strip()
            if text:
                messages_text += f"ID: {message_id}\n–¢–µ–∫—Å—Ç: {text}\n\n"
        
        return f"""–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π.

–°–û–û–ë–©–ï–ù–ò–Ø:
{messages_text}

–ò—Å–∫–ª—é—á–∏:
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ("–∫—Ç–æ –∑–∞–±–µ—Ä–µ—Ç", "–≤–æ —Å–∫–æ–ª—å–∫–æ", "–≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è")
- –ú–∏–∫—Ä–æ–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ("–Ω–µ –∑–∞–±—É–¥—å—Ç–µ", "–Ω–∞–ø–æ–º–Ω–∏—Ç–µ –¥–µ—Ç—è–º")
- –ù–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
- –ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ ("–æ–∫", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–Ω—è–ª")

–û—Å—Ç–∞–≤—å:
- –í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
- –ü—Ä–∞–≤–∏–ª–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ü—Ä–æ–±–ª–µ–º—ã –∏ –∂–∞–ª–æ–±—ã
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤ —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
[1, 5, 12, 23, ...]"""
    
    def _parse_cleaning_response(self, response: str) -> list:
        """–ü–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—á–∏—Å—Ç–∫–∏"""
        try:
            json_match = re.search(r'\[[\d,\s]+\]', response)
            if not json_match:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {response}")
                return []
            
            selected_ids = json.loads(json_match.group())
            return selected_ids
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—á–∏—Å—Ç–∫–∏: {e}")
            return []
    
    def _filter_messages_by_ids(self, messages: list, selected_ids: list) -> list:
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º ID"""
        cleaned_messages = []
        for i, msg in enumerate(messages):
            message_id = msg.get('id', i)
            if message_id in selected_ids:
                cleaned_messages.append(msg)
        return cleaned_messages
    
    async def _build_final_result(self, context: PipelineContext, processing_time: float) -> AnalysisResult:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        cleaned_messages = self.get_step_result(context, "cleaning")
        
        if not cleaned_messages:
            return AnalysisResult(
                success=False,
                error="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                provider_name=context.request.provider_name,
                model_id=context.request.model_id,
                processing_time=processing_time,
                analysis_type=AnalysisType.CLEANING
            )
        
        original_count = len(context.request.messages)
        cleaned_count = len(cleaned_messages)
        
        return AnalysisResult(
            success=True,
            result=f"–û—á–∏—â–µ–Ω–æ {cleaned_count} –∏–∑ {original_count} —Å–æ–æ–±—â–µ–Ω–∏–π",
            provider_name=context.request.provider_name,
            model_id=context.request.model_id,
            processing_time=processing_time,
            analysis_type=AnalysisType.CLEANING,
            metadata={
                "original_count": original_count,
                "cleaned_count": cleaned_count,
                "filtered_count": original_count - cleaned_count,
                "cleaned_messages": cleaned_messages
            }
        )

