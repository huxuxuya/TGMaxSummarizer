from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .service import AIService
from .models import AnalysisRequest, AnalysisType
from shared.utils import format_success_message, format_error_message, shorten_callback_data
from shared.constants import CallbackActions
import logging

logger = logging.getLogger(__name__)

class AIHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    
    def __init__(self, ai_service: AIService, user_service=None):
        self.ai_service = ai_service
        self.user_service = user_service
    
    async def select_ai_provider_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            available_providers = await self.ai_service.get_available_providers()
            provider_names = [p.name for p in available_providers]
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.ai_provider_selection_keyboard(provider_names, provider_info=available_providers)
            
            await query.edit_message_text(
                "ü§ñ [–í—ã–±–æ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞]\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–æ–≤:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_ai_provider_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_provider_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            provider_name = query.data.split(':')[-1]
            context.user_data['selected_provider'] = provider_name
            
            if provider_name == 'openrouter':
                await self._handle_openrouter_selection(update, context)
            elif provider_name == 'ollama':
                await self._handle_ollama_selection(update, context)
            else:
                await self._confirm_provider_selection(update, context, provider_name)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_provider_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def _handle_openrouter_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ OpenRouter"""
        query = update.callback_query
        
        try:
            from infrastructure.ai_providers.providers.openrouter import OpenRouterProvider
            from core.config import load_config
            
            config = load_config()
            provider = OpenRouterProvider(config['ai'].providers['openrouter'].model_dump())
            
            if not await provider.initialize():
                await query.edit_message_text(
                    "‚ùå OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                return
            
            available_models = await provider.get_available_models()
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.openrouter_model_selection_keyboard(available_models)
            
            await query.edit_message_text(
                "üîó –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenRouter\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_openrouter_selection: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def _handle_ollama_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ Ollama"""
        query = update.callback_query
        
        try:
            from infrastructure.ai_providers.providers.ollama import OllamaProvider
            from core.config import load_config
            
            config = load_config()
            provider = OllamaProvider(config['ai'].providers['ollama'].model_dump())
            
            if not await provider.initialize():
                await query.edit_message_text(
                    "‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                return
            
            available_models = await provider.get_available_models()
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.ollama_model_selection_keyboard(available_models)
            
            await query.edit_message_text(
                "ü¶ô –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ Ollama\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _handle_ollama_selection: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def _confirm_provider_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, provider_name: str):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        query = update.callback_query
        
        try:
            from infrastructure.telegram import keyboards
            keyboard = keyboards.confirm_ai_provider_change_keyboard(provider_name)
            
            provider_display_names = {
                'gigachat': 'GigaChat',
                'chatgpt': 'ChatGPT',
                'gemini': 'Gemini'
            }
            
            display_name = provider_display_names.get(provider_name, provider_name.title())
            
            await query.edit_message_text(
                f"ü§ñ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞\n\n"
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {display_name} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–æ–≤?",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _confirm_provider_selection: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def confirm_provider_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            provider_name = query.data.split(':')[-1]
            context.user_data['confirmed_provider'] = provider_name
            
            # Save provider selection to database
            if self.user_service:
                self.user_service.save_user_ai_settings(
                    update.effective_user.id, 
                    provider=provider_name
                )
            
            from infrastructure.telegram import keyboards
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            vk_chat_id = context.user_data.get('selected_chat_id')
            if vk_chat_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–º—É
                keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
            else:
                # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                keyboard = keyboards.ai_provider_selection_keyboard(
                    await self.ai_service.get_available_providers()
                )
            
            provider_display_names = {
                'gigachat': 'GigaChat',
                'chatgpt': 'ChatGPT',
                'openrouter': 'OpenRouter',
                'gemini': 'Gemini',
                'ollama': 'Ollama'
            }
            
            display_name = provider_display_names.get(provider_name, provider_name.title())
            
            await query.edit_message_text(
                format_success_message(
                    f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {display_name} –≤—ã–±—Ä–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {display_name}\n"
                    f"üß† –ú–æ–¥–µ–ª—å: –ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                ),
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_provider_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_model_for_analysis_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = context.user_data.get('selected_chat_id')
            if not vk_chat_id:
                await query.edit_message_text(
                    "‚ùå –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
                )
                return
            
            from infrastructure.telegram import keyboards
            available_providers = await self.ai_service.get_available_providers()
            provider_names = [p.name for p in available_providers]
            keyboard = keyboards.ai_provider_selection_keyboard(provider_names, provider_info=available_providers)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            current_provider = context.user_data.get('confirmed_provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            current_model = context.user_data.get('selected_model_id', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            
            await query.edit_message_text(
                f"ü§ñ [–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏] –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                f"ü§ñ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                f"üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –º–æ–¥–µ–ª—å:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_model_for_analysis_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def run_analysis_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = context.user_data.get('selected_chat_id')
            date = context.user_data.get('selected_date')
            provider_name = context.user_data.get('confirmed_provider')
            model_id = context.user_data.get('selected_model_id')
            
            if not all([vk_chat_id, date, provider_name]):
                await query.edit_message_text(
                    "‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                return
            
            await query.edit_message_text(
                "ü§ñ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            from domains.chats.service import ChatService
            from core.database.connection import DatabaseConnection
            from core.config import load_config
            
            config = load_config()
            db_connection = DatabaseConnection(config['database'].path)
            chat_service = ChatService(db_connection)
            
            messages = chat_service.get_messages_by_date(vk_chat_id, date)
            
            if not messages:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )
                return
            
            messages_data = [msg.dict() for msg in messages]
            
            analysis_request = AnalysisRequest(
                messages=messages_data,
                provider_name=provider_name,
                model_id=model_id,
                user_id=update.effective_user.id,
                analysis_type=AnalysisType.SUMMARIZATION
            )
            
            result = await self.ai_service.analyze_chat(analysis_request)
            
            if result.success:
                from domains.summaries.service import SummaryService
                from domains.summaries.models import Summary, SummaryType
                
                summary_service = SummaryService(db_connection)
                
                summary = Summary(
                    vk_chat_id=vk_chat_id,
                    date=date,
                    summary_text=result.result,
                    provider_name=result.provider_name,
                    processing_time=result.processing_time
                )
                
                summary_service.save_summary(summary)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_text = f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {result.processing_time:.2f}—Å\n\n"
                result_text += f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.provider_name}\n"
                result_text += f"üß† –ú–æ–¥–µ–ª—å: {model_id}\n\n"
                result_text += f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result.result}"
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                from shared.utils import format_message_for_telegram
                message_parts = format_message_for_telegram(result_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                await query.edit_message_text(
                    format_success_message(message_parts[0])
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                for part in message_parts[1:]:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=part
                    )
            else:
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.error}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ run_analysis_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def ai_provider_settings_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            keyboard = keyboards.ai_provider_settings_keyboard()
            
            await query.edit_message_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_provider_settings_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def ai_provider_defaults_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            # TODO: Get current default from user preferences
            current_default = 'gigachat'
            keyboard = keyboards.ai_provider_defaults_keyboard(current_default)
            
            await query.edit_message_text(
                "‚öôÔ∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_provider_defaults_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def ai_provider_status_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            available_providers = await self.ai_service.get_available_providers()
            
            status_text = "üìä –°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n\n"
            for provider in available_providers:
                status_icon = "‚úÖ" if provider.available else "‚ùå"
                status_text += f"{status_icon} {provider.name}\n"
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.back_keyboard()
            
            await query.edit_message_text(
                status_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_provider_status_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def check_providers_availability_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            await query.edit_message_text(
                "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            # TODO: Implement actual availability check
            available_providers = await self.ai_service.get_available_providers()
            
            status_text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
            for provider in available_providers:
                status_icon = "‚úÖ" if provider.available else "‚ùå"
                status_text += f"{status_icon} {provider.name}\n"
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.back_keyboard()
            
            await query.edit_message_text(
                status_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_providers_availability_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def scenario_defaults_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ user_data
            current_default = context.user_data.get('default_scenario', 'fast')
            keyboard = keyboards.scenario_defaults_keyboard(current_default)
            
            await query.edit_message_text(
                f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
                f"–¢–µ–∫—É—â–∏–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {current_default}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ scenario_defaults_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def set_default_scenario_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        query = update.callback_query
        await query.answer()
        
        try:
            scenario = query.data.split(':')[-1]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
            context.user_data['default_scenario'] = scenario
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.user_service:
                self.user_service.save_user_ai_settings(
                    update.effective_user.id, 
                    scenario=scenario
                )
            
            from infrastructure.telegram import keyboards
            from domains.summaries.constants import SummarizationScenarios
            
            scenario_name = SummarizationScenarios.get_display_name(scenario)
            keyboard = keyboards.scenario_defaults_keyboard(scenario)
            
            await query.edit_message_text(
                f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω\n\n"
                f"üìã –ù–æ–≤—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_name}\n\n"
                f"–≠—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π.",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_default_scenario_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def clear_ai_settings_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if self.user_service:
                success = self.user_service.clear_user_ai_settings(update.effective_user.id)
                if success:
                    # –û—á–∏—â–∞–µ–º context.user_data
                    context.user_data.pop('confirmed_provider', None)
                    context.user_data.pop('selected_model_id', None)
                    context.user_data.pop('default_scenario', None)
                    
                    from infrastructure.telegram import keyboards
                    keyboard = keyboards.ai_provider_settings_keyboard()
                    
                    await query.edit_message_text(
                        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –æ—á–∏—â–µ–Ω—ã\n\n"
                        "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –º–æ–¥–µ–ª–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —É–¥–∞–ª–µ–Ω—ã.\n"
                        "–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=keyboard
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                    )
            else:
                await query.edit_message_text(
                    "‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ clear_ai_settings_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def openrouter_model_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π OpenRouter"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.ai_providers.providers.openrouter import OpenRouterProvider
            from core.config import load_config
            
            config = load_config()
            provider = OpenRouterProvider(config['ai'].providers['openrouter'].model_dump())
            
            if not await provider.initialize():
                await query.edit_message_text(
                    "‚ùå OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                return
            
            available_models = await provider.get_available_models()
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.openrouter_model_selection_keyboard(available_models)
            
            await query.edit_message_text(
                "üîó –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenRouter\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ openrouter_model_selection_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_openrouter_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ OpenRouter"""
        query = update.callback_query
        await query.answer()
        
        try:
            model_id = query.data.split(':')[-1]
            context.user_data['selected_model_id'] = model_id
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.openrouter_model_info_keyboard(model_id)
            
            await query.edit_message_text(
                f"üîó –ú–æ–¥–µ–ª—å: {model_id}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_openrouter_model_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def confirm_openrouter_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenRouter"""
        query = update.callback_query
        await query.answer()
        
        try:
            model_id = query.data.split(':')[-1]
            context.user_data['confirmed_provider'] = 'openrouter'
            context.user_data['selected_model_id'] = model_id
            
            # Save model selection to database
            if self.user_service:
                self.user_service.save_user_ai_settings(
                    update.effective_user.id, 
                    provider='openrouter',
                    model_id=model_id
                )
            
            from infrastructure.telegram import keyboards
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            vk_chat_id = context.user_data.get('selected_chat_id')
            if vk_chat_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–º—É
                keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
            else:
                # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                keyboard = keyboards.ai_provider_selection_keyboard(
                    await self.ai_service.get_available_providers()
                )
            
            await query.edit_message_text(
                format_success_message(
                    f"‚úÖ –ú–æ–¥–µ–ª—å OpenRouter {model_id} –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: OpenRouter\n"
                    f"üß† –ú–æ–¥–µ–ª—å: {model_id}"
                ),
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_openrouter_model_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def top5_models_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            keyboard = keyboards.top5_models_keyboard()
            
            await query.edit_message_text(
                "üèÜ –¢–æ–ø-5 –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ top5_models_selection_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_top5_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ–ø-5 –º–æ–¥–µ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            model_id = query.data.split(':')[-1]
            context.user_data['selected_model_id'] = model_id
            
            # Extract model name from ID for display
            model_name = model_id.split('/')[-1] if '/' in model_id else model_id
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.top5_model_info_keyboard(model_id, model_name)
            
            await query.edit_message_text(
                f"üèÜ –ú–æ–¥–µ–ª—å: {model_name}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_top5_model_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def confirm_top5_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ø-5 –º–æ–¥–µ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            model_id = query.data.split(':')[-1]
            context.user_data['confirmed_provider'] = 'openrouter'
            context.user_data['selected_model_id'] = model_id
            
            # Save model selection to database
            if self.user_service:
                self.user_service.save_user_ai_settings(
                    update.effective_user.id, 
                    provider='openrouter',
                    model_id=model_id
                )
            
            from infrastructure.telegram import keyboards
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            vk_chat_id = context.user_data.get('selected_chat_id')
            if vk_chat_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–º—É
                keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
            else:
                # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                keyboard = keyboards.ai_provider_selection_keyboard(
                    await self.ai_service.get_available_providers()
                )
            
            model_name = model_id.split('/')[-1] if '/' in model_id else model_id
            
            await query.edit_message_text(
                format_success_message(
                    f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: OpenRouter\n"
                    f"üß† –ú–æ–¥–µ–ª—å: {model_name}"
                ),
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_top5_model_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def ollama_model_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π Ollama"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.ai_providers.providers.ollama import OllamaProvider
            from core.config import load_config
            
            config = load_config()
            provider = OllamaProvider(config['ai'].providers['ollama'].model_dump())
            
            if not await provider.initialize():
                await query.edit_message_text(
                    "‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                return
            
            available_models = await provider.get_available_models()
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.ollama_model_selection_keyboard(available_models)
            
            await query.edit_message_text(
                "ü¶ô –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ Ollama\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ollama_model_selection_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_ollama_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Ollama"""
        query = update.callback_query
        await query.answer()
        
        print(f"üîç DEBUG: select_ollama_model_handler –≤—ã–∑–≤–∞–Ω —Å callback_data: {query.data}")
        logger.info(f"üîç DEBUG: select_ollama_model_handler –≤—ã–∑–≤–∞–Ω —Å callback_data: {query.data}")
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ callback_data
            # callback_data: "select_ollama_model:gemma3:27b"
            # –ù—É–∂–Ω–æ –≤–∑—è—Ç—å –≤—Å–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è
            model_name = query.data.split(':', 1)[1]  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ ':'
            print(f"üîç DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏: {model_name}")
            logger.info(f"üîç DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏: {model_name}")
            
            context.user_data['selected_model_id'] = model_name
            context.user_data['confirmed_provider'] = 'ollama'
            
            print(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ context.user_data:")
            print(f"   selected_model_id: {context.user_data['selected_model_id']}")
            print(f"   confirmed_provider: {context.user_data['confirmed_provider']}")
            logger.info(f"üîç DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ context.user_data:")
            logger.info(f"   selected_model_id: {context.user_data['selected_model_id']}")
            logger.info(f"   confirmed_provider: {context.user_data['confirmed_provider']}")
            
            # Save model selection to database
            if self.user_service:
                self.user_service.save_user_ai_settings(
                    update.effective_user.id, 
                    provider='ollama',
                    model_id=model_name
                )
            
            from infrastructure.telegram import keyboards
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            vk_chat_id = context.user_data.get('selected_chat_id')
            if vk_chat_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–µ–º—É
                keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
            else:
                # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                keyboard = keyboards.ai_provider_selection_keyboard(
                    await self.ai_service.get_available_providers()
                )
            
            await query.edit_message_text(
                format_success_message(
                    f"‚úÖ –ú–æ–¥–µ–ª—å Ollama {model_name} –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: Ollama\n"
                    f"üß† –ú–æ–¥–µ–ª—å: {model_name}"
                ),
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_ollama_model_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def analyze_with_provider_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º"""
        query = update.callback_query
        await query.answer()
        
        try:
            provider_name = query.data.split(':')[-1]
            context.user_data['selected_provider'] = provider_name
            
            vk_chat_id = context.user_data.get('selected_chat_id')
            if not vk_chat_id:
                await query.edit_message_text(
                    "‚ùå –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
                )
                return
            
            # Redirect to model selection based on provider
            if provider_name == 'openrouter':
                await self.openrouter_model_selection_handler(update, context)
            elif provider_name == 'ollama':
                await self.ollama_model_selection_handler(update, context)
            else:
                # For other providers, confirm directly
                await self._confirm_provider_selection(update, context, provider_name)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ analyze_with_provider_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )

