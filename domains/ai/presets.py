"""
–†–µ–µ—Å—Ç—Ä –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""
from pydantic import BaseModel
from typing import List
from .models import StepType

class AnalysisPreset(BaseModel):
    """–ì–æ—Ç–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    id: str
    name: str
    description: str
    steps: List[StepType]
    icon: str = "‚ö°"

class PresetRegistry:
    """–†–µ–µ—Å—Ç—Ä –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    
    PRESETS = {
        "fast": AnalysisPreset(
            id="fast",
            name="–ë—ã—Å—Ç—Ä–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è",
            description="–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤",
            steps=[StepType.SUMMARIZATION],
            icon="‚ö°"
        ),
        "reflection": AnalysisPreset(
            id="reflection",
            name="–° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π",
            description="–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è + –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ + —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
            steps=[StepType.SUMMARIZATION, StepType.REFLECTION, StepType.IMPROVEMENT],
            icon="üîÑ"
        ),
        "cleaning": AnalysisPreset(
            id="cleaning",
            name="–° –æ—á–∏—Å—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö",
            description="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π + —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è",
            steps=[StepType.CLEANING, StepType.SUMMARIZATION],
            icon="üßπ"
        ),
        "structured": AnalysisPreset(
            id="structured",
            name="–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            description="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è + —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è + —Å–≤–æ–¥–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
            steps=[StepType.CLASSIFICATION, StepType.EXTRACTION, StepType.PARENT_SUMMARY],
            icon="üîç"
        ),
        "with_schedule": AnalysisPreset(
            id="with_schedule",
            name="–° –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            description="–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è + –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
            steps=[StepType.SUMMARIZATION, StepType.SCHEDULE_ANALYSIS],
            icon="üìÖ"
        ),
        "full": AnalysisPreset(
            id="full",
            name="–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            description="–í—Å–µ —à–∞–≥–∏: –æ—á–∏—Å—Ç–∫–∞ + —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è + —Ä–µ—Ñ–ª–µ–∫—Å–∏—è + —É–ª—É—á—à–µ–Ω–∏–µ + —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            steps=[StepType.CLEANING, StepType.SUMMARIZATION, StepType.REFLECTION, StepType.IMPROVEMENT, StepType.SCHEDULE_ANALYSIS],
            icon="üéØ"
        )
    }
    
    @classmethod
    def get_preset(cls, preset_id: str) -> AnalysisPreset:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –ø–æ ID"""
        return cls.PRESETS.get(preset_id)
    
    @classmethod
    def get_all_presets(cls) -> List[AnalysisPreset]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ—Å–µ—Ç—ã"""
        return list(cls.PRESETS.values())
    
    @classmethod
    def get_preset_ids(cls) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        return list(cls.PRESETS.keys())

