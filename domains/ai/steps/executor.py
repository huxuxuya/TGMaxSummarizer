"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —à–∞–≥–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""
import time
import logging
from typing import List, Any, Dict
from datetime import datetime, timedelta

from ..models import StepType, AnalysisResult, AnalysisType
from ..service import PipelineContext

class StepExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —à–∞–≥–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ —à–∞–≥–æ–≤ –Ω–∞ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
    STEP_TO_LOG_TYPE = {
        StepType.CLEANING: "cleaning",
        StepType.SUMMARIZATION: "summarization",
        StepType.REFLECTION: "reflection",
        StepType.IMPROVEMENT: "improvement",
        StepType.CLASSIFICATION: "classification",
        StepType.EXTRACTION: "extraction",
        StepType.SCHEDULE_ANALYSIS: "schedule_analysis",
        StepType.PARENT_SUMMARY: "parent_summary"
    }
    
    def __init__(self, context: PipelineContext):
        self.context = context
        self.logger = logging.getLogger(__name__)
    
    async def execute_steps(self, steps: List[StepType]) -> AnalysisResult:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
        start_time = time.time()
        
        try:
            for i, step in enumerate(steps):
                self.logger.info(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ {i+1}/{len(steps)}: {step}")
                try:
                    result = await self._execute_single_step(step)
                    self.context.step_results[step.value] = result
                    self.logger.info(f"‚úÖ –®–∞–≥ {step} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as step_error:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step}: {step_error}")
                    raise step_error
            
            return self._build_result(steps, time.time() - start_time)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤: {e}")
            return AnalysisResult(
                success=False, 
                error=str(e),
                provider_name=self.context.request.provider_name,
                model_id=self.context.request.model_id,
                processing_time=time.time() - start_time,
                analysis_type=AnalysisType.SUMMARIZATION
            )
    
    async def _execute_single_step(self, step: StepType) -> Any:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —à–∞–≥ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        log_type = self.STEP_TO_LOG_TYPE.get(step, "general")
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if step == StepType.CLEANING:
            return await self._do_cleaning_with_logging(log_type)
        elif step == StepType.SUMMARIZATION:
            return await self._do_summarization_with_logging(log_type)
        elif step == StepType.REFLECTION:
            return await self._do_reflection_with_logging(log_type)
        elif step == StepType.IMPROVEMENT:
            return await self._do_improvement_with_logging(log_type)
        elif step == StepType.CLASSIFICATION:
            return await self._do_classification_with_logging(log_type)
        elif step == StepType.EXTRACTION:
            return await self._do_extraction_with_logging(log_type)
        elif step == StepType.SCHEDULE_ANALYSIS:
            return await self._do_schedule_analysis_with_logging(log_type)
        elif step == StepType.PARENT_SUMMARY:
            return await self._do_parent_summary_with_logging(log_type)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step}")
    
    async def _do_cleaning(self) -> List[Dict]:
        """–õ–æ–≥–∏–∫–∞ –∏–∑ DataCleaningPipeline"""
        self.logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        messages = self.context.request.messages
        
        if not messages:
            raise ValueError("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        self.logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        cleaning_prompt = self._create_cleaning_prompt(messages)
        response = await self.context.provider.generate_response(cleaning_prompt)
        
        if not response:
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return messages
        
        selected_ids = self._parse_cleaning_response(response)
        
        if not selected_ids:
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return messages
        
        cleaned_messages = self._filter_messages_by_ids(messages, selected_ids)
        self.logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(cleaned_messages)} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return cleaned_messages
    
    def _create_cleaning_prompt(self, messages: list) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
        messages_text = ""
        for i, msg in enumerate(messages):
            message_id = msg.get('id', i)
            text = msg.get('text', '').strip()
            if text:
                messages_text += f"ID: {message_id}\n–¢–µ–∫—Å—Ç: {text}\n\n"
        
        return f"""–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π.

–°–û–û–ë–©–ï–ù–ò–Ø:
{messages_text}

–ò—Å–∫–ª—é—á–∏:
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ("–∫—Ç–æ –∑–∞–±–µ—Ä–µ—Ç", "–≤–æ —Å–∫–æ–ª—å–∫–æ", "–≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è")
- –ú–∏–∫—Ä–æ–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ("–Ω–µ –∑–∞–±—É–¥—å—Ç–µ", "–Ω–∞–ø–æ–º–Ω–∏—Ç–µ –¥–µ—Ç—è–º")
- –ù–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
- –ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ ("–æ–∫", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–Ω—è–ª")

–û—Å—Ç–∞–≤—å:
- –í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
- –ü—Ä–∞–≤–∏–ª–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ü—Ä–æ–±–ª–µ–º—ã –∏ –∂–∞–ª–æ–±—ã
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤ —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
[1, 5, 12, 23, ...]"""
    
    def _parse_cleaning_response(self, response: str) -> list:
        """–ü–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—á–∏—Å—Ç–∫–∏"""
        import json
        import re
        
        try:
            json_match = re.search(r'\[[\d,\s]+\]', response)
            if not json_match:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {response}")
                return []
            
            selected_ids = json.loads(json_match.group())
            return selected_ids
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—á–∏—Å—Ç–∫–∏: {e}")
            return []
    
    def _filter_messages_by_ids(self, messages: list, selected_ids: list) -> list:
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º ID"""
        cleaned_messages = []
        for i, msg in enumerate(messages):
            message_id = msg.get('id', i)
            if message_id in selected_ids:
                cleaned_messages.append(msg)
        return cleaned_messages
    
    async def _do_summarization(self) -> str:
        """–õ–æ–≥–∏–∫–∞ –∏–∑ SummarizationPipeline"""
        self.logger.info("üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        
        messages = self.context.step_results.get('cleaning', self.context.request.messages)
        chat_context = self.context.request.chat_context or {}
        
        if not messages:
            raise ValueError("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        self.logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        summary = await self.context.provider.summarize_chat(messages, chat_context)
        
        if not summary:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        
        self.logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return summary
    
    async def _do_reflection(self) -> str:
        """–õ–æ–≥–∏–∫–∞ –∏–∑ ReflectionPipeline"""
        self.logger.info("ü§î –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
        
        summary = self.context.step_results.get('summarization')
        if not summary:
            raise ValueError("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
        
        self.logger.info("ü§î –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π")
        
        reflection_prompt = self._create_reflection_prompt(summary)
        reflection = await self.context.provider.generate_response(reflection_prompt)
        
        if not reflection:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é")
        
        self.logger.info(f"‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(reflection)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return reflection
    
    def _create_reflection_prompt(self, summary: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        messages = self.context.request.messages
        total_messages = len(messages)
        date = self.context.request.chat_context.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞') if self.context.request.chat_context else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–ø–µ—Ä–≤—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
        max_messages = min(50, total_messages)
        formatted_messages = ""
        
        for i, msg in enumerate(messages[:max_messages]):
            message_id = msg.get('id', i + 1)
            text = msg.get('text', '').strip()
            time_str = msg.get('time', '??:??')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å ID –∏ –≤—Ä–µ–º–µ–Ω–µ–º, –Ω–æ –¥–ª—è –í–∏–∫—Ç–æ—Ä–∏–∏ –†–æ–º–∞–Ω–æ–≤–Ω—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            from shared.utils import get_sender_display_name_with_id
            sender_id = msg.get('sender_id')
            sender = get_sender_display_name_with_id(
                sender_id,
                msg.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                time_str
            )
            
            if text:
                # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                formatted_messages += f"{i+1}. {sender}: {text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if total_messages > max_messages:
            formatted_messages += f"\n... –∏ –µ—â–µ {total_messages - max_messages} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        
        return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —á–∞—Ç–∞ –∏ –¥–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É:

–°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:
{summary}

–ò–°–•–û–î–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø (–ø–µ—Ä–≤—ã–µ {max_messages} –∏–∑ {total_messages}):
{formatted_messages}

–ö–û–ù–¢–ï–ö–°–¢:
- –î–∞—Ç–∞: {date}
- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {max_messages}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
1. –ü–æ–ª–Ω–æ—Ç—É –æ—Ö–≤–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ä–∞–≤–Ω–∏ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
2. –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ (–ø—Ä–æ–≤–µ—Ä—å –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º)
3. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å
4. –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (—á—Ç–æ –Ω–µ –≤–æ—à–ª–æ –≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é)
5. –í–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è

–î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∫—Ä–∏—Ç–∏–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."""
    
    async def _do_improvement(self) -> str:
        """–õ–æ–≥–∏–∫–∞ –∏–∑ ReflectionPipeline"""
        self.logger.info("‚ú® –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤
        self.logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤: {list(self.context.step_results.keys())}")
        
        original_summary = self.context.step_results.get('summarization')
        reflection = self.context.step_results.get('reflection')
        
        self.logger.info(f"üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'–µ—Å—Ç—å' if original_summary else '–ù–ï–¢'}")
        self.logger.info(f"ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è: {'–µ—Å—Ç—å' if reflection else '–ù–ï–¢'}")
        
        if not original_summary:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        if not reflection:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        
        self.logger.info("‚ú® –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        
        improvement_prompt = self._create_improvement_prompt(original_summary, reflection)
        self.logger.info(f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω ({len(improvement_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        improved_summary = await self.context.provider.generate_response(improvement_prompt)
        
        if not improved_summary:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        
        self.logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(improved_summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return improved_summary
    
    def _create_improvement_prompt(self, original_summary: str, reflection: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        return f"""–ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:

–ò–°–•–û–î–ù–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:
{original_summary}

–ê–ù–ê–õ–ò–ó –ò –ö–†–ò–¢–ò–ö–ê:
{reflection}

–°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è:
1. –£—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
2. –ë–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ª–æ–≥–∏—á–Ω–∞
3. –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
4. –õ–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –∏ –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è

–£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:"""
    
    async def _do_classification(self) -> List[Dict]:
        """–õ–æ–≥–∏–∫–∞ –∏–∑ StructuredAnalysisPipeline"""
        self.logger.info("üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        messages = self.context.request.messages
        
        if not messages:
            raise ValueError("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        self.logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        classification_prompt = self._create_classification_prompt(messages)
        response = await self.context.provider.generate_response(classification_prompt)
        
        if not response:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é")
        
        classification = self._parse_classification_response(response)
        self.logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(classification)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return classification
    
    def _create_classification_prompt(self, messages: list) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        import json
        
        messages_json = json.dumps([
            {"id": msg.get('message_id', msg.get('id', '')), "text": msg.get('text')} 
            for msg in messages
        ], ensure_ascii=False)
        
        return f"""–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ —Ç–∏–ø–∞–º:

–°–û–û–ë–©–ï–ù–ò–Ø:
{messages_json}

–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
- "important": –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
- "coordination": –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- "micromanagement": –ú–∏–∫—Ä–æ–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
- "irrelevant": –ù–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- "release_pickup": –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–±–æ—Ä–µ –¥–µ—Ç–µ–π
- "rules": –ü—Ä–∞–≤–∏–ª–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- "events": –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å–æ–±—ã—Ç–∏—è
- "problems": –ü—Ä–æ–±–ª–µ–º—ã –∏ –∂–∞–ª–æ–±—ã

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏:
[{{"message_id": "id", "class": "category"}}, ...]"""
    
    def _parse_classification_response(self, response: str) -> list:
        """–ü–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        import json
        import re
        
        try:
            json_match = re.search(r'\[.*\]', response, re.DOTALL)
            if not json_match:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {response}")
                return []
            
            classification = json.loads(json_match.group())
            return classification
        except json.JSONDecodeError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return []
    
    async def _do_extraction(self) -> List[Dict]:
        """–õ–æ–≥–∏–∫–∞ –∏–∑ StructuredAnalysisPipeline"""
        self.logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏")
        
        classification = self.context.step_results.get('classification')
        if not classification:
            raise ValueError("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        self.logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é —Å–ª–æ—Ç–æ–≤")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–∞–∫ –µ—Å—Ç—å
        events = []
        for item in classification:
            if item.get('class') in ['events', 'important', 'rules']:
                events.append({
                    'type': item.get('class'),
                    'message_id': item.get('message_id'),
                    'description': f"–°–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ {item.get('class')}"
                })
        
        self.logger.info(f"‚úÖ –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(events)} —Å–æ–±—ã—Ç–∏–π")
        return events
    
    async def _do_schedule_analysis(self) -> str:
        """–ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        self.logger.info("üìÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º group_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            group_id = self.context.request.chat_context.get('group_id')
            if not group_id:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            mock_schedule_text = """
            –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 09:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, 10:30 –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
            –í—Ç–æ—Ä–Ω–∏–∫: 09:00 –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, 11:00 –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞
            –°—Ä–µ–¥–∞: 09:00 –ò—Å—Ç–æ—Ä–∏—è, 10:30 –ë–∏–æ–ª–æ–≥–∏—è
            –ß–µ—Ç–≤–µ—Ä–≥: 09:00 –ì–µ–æ–≥—Ä–∞—Ñ–∏—è, 11:00 –•–∏–º–∏—è
            –ü—è—Ç–Ω–∏—Ü–∞: 09:00 –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, 10:30 –§–∏–∑–∏–∫–∞
            """
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            tomorrow_schedule = await self._extract_tomorrow_schedule(mock_schedule_text)
            
            if not tomorrow_schedule:
                return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            return f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:**\n{tomorrow_schedule}"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
    
    async def _extract_tomorrow_schedule(self, schedule_text: str) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–∑ OCR —Ç–µ–∫—Å—Ç–∞"""
        tomorrow = datetime.now() + timedelta(days=1)
        tomorrow_weekday = tomorrow.strftime("%A").lower()
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–π–¥–∏ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ {tomorrow.strftime('%d.%m.%Y')} ({tomorrow_weekday}).

        –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
        {schedule_text}

        –ò–∑–≤–ª–µ–∫–∏:
        1. –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π
        2. –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        3. –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
        4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

        –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞–ø–∏—à–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {tomorrow.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ".

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        **{tomorrow.strftime('%d.%m.%Y')} ({tomorrow_weekday})**
        ‚Ä¢ –í—Ä–µ–º—è - –ü—Ä–µ–¥–º–µ—Ç/–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        ‚Ä¢ –í—Ä–µ–º—è - –ü—Ä–µ–¥–º–µ—Ç/–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        ...
        """
        
        response = await self.context.provider.generate_response(prompt)
        return response or "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    
    async def _do_parent_summary(self) -> str:
        """–õ–æ–≥–∏–∫–∞ –∏–∑ StructuredAnalysisPipeline"""
        self.logger.info("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        
        events = self.context.step_results.get('extraction')
        if not events:
            raise ValueError("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–≤–æ–¥–∫–∏")
        
        self.logger.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        
        summary_prompt = self._create_parent_summary_prompt(events)
        summary = await self.context.provider.generate_response(summary_prompt)
        
        if not summary:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É")
        
        self.logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return summary
    
    def _create_parent_summary_prompt(self, events: list) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–≤–æ–¥–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        events_text = ""
        for event in events:
            events_text += f"- {event.get('type', 'unknown')}: {event.get('description', '')}\n"
        
        return f"""–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π:

–°–û–ë–´–¢–ò–Ø:
{events_text}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É, –∫–æ—Ç–æ—Ä–∞—è:
1. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è
2. –í—ã–¥–µ–ª—è–µ—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
3. –£–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å
4. –õ–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –∏ –ø–æ–Ω–∏–º–∞–µ—Ç—Å—è

–°–í–û–î–ö–ê –î–õ–Ø –†–û–î–ò–¢–ï–õ–ï–ô:"""
    
    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –° –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú =====
    
    async def _do_summarization_with_logging(self, log_type: str) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        
        messages = self.context.step_results.get('cleaning', self.context.request.messages)
        chat_context = self.context.request.chat_context or {}
        
        if not messages:
            raise ValueError("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        self.logger.info(f"üìù –ù–∞—á–∏–Ω–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        formatted_text = self.context.provider.format_messages_for_analysis(messages)
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_formatted_messages(formatted_text, len(messages))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        from shared.prompts import PromptTemplates
        prompt = PromptTemplates.get_summarization_prompt(formatted_text, self.context.provider.get_name())
        
        # –õ–û–ì–ò–†–£–ï–ú –ó–ê–ü–†–û–°
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_request(prompt, log_type)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏)
        import time
        start_time = time.time()
        summary = await self.context.provider.generate_response(prompt)  # –ù–∞–ø—Ä—è–º—É—é, –Ω–µ —á–µ—Ä–µ–∑ summarize_chat
        response_time = time.time() - start_time
        
        if not summary:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        
        # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_response(summary, log_type, response_time)
        
        self.logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return summary
    
    async def _do_reflection_with_logging(self, log_type: str) -> str:
        """–†–µ—Ñ–ª–µ–∫—Å–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("ü§î –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
        
        summary = self.context.step_results.get('summarization')
        if not summary:
            raise ValueError("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
        
        self.logger.info("ü§î –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        reflection_prompt = self._create_reflection_prompt(summary)
        
        # –õ–û–ì–ò–†–£–ï–ú –ó–ê–ü–†–û–° (—è–≤–Ω–æ –∑–Ω–∞–µ–º —Ç–∏–ø!)
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_request(reflection_prompt, log_type)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏)
        import time
        start_time = time.time()
        reflection = await self.context.provider.generate_response(reflection_prompt)
        response_time = time.time() - start_time
        
        if not reflection:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é")
        
        # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢ (—è–≤–Ω–æ –∑–Ω–∞–µ–º —Ç–∏–ø!)
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_response(reflection, log_type, response_time)
        
        self.logger.info(f"‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(reflection)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return reflection
    
    async def _do_improvement_with_logging(self, log_type: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("‚ú® –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤
        self.logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤: {list(self.context.step_results.keys())}")
        
        original_summary = self.context.step_results.get('summarization')
        reflection = self.context.step_results.get('reflection')
        
        self.logger.info(f"üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'–µ—Å—Ç—å' if original_summary else '–ù–ï–¢'}")
        self.logger.info(f"ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è: {'–µ—Å—Ç—å' if reflection else '–ù–ï–¢'}")
        
        if not original_summary:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        if not reflection:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        
        self.logger.info("‚ú® –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        
        improvement_prompt = self._create_improvement_prompt(original_summary, reflection)
        self.logger.info(f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω ({len(improvement_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –õ–û–ì–ò–†–£–ï–ú –ó–ê–ü–†–û–°
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_request(improvement_prompt, log_type)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏)
        import time
        start_time = time.time()
        improved_summary = await self.context.provider.generate_response(improvement_prompt)
        response_time = time.time() - start_time
        
        if not improved_summary:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
        
        # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_response(improved_summary, log_type, response_time)
        
        self.logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(improved_summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return improved_summary
    
    async def _do_cleaning_with_logging(self, log_type: str) -> List[Dict]:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        messages = self.context.request.messages
        
        if not messages:
            raise ValueError("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        
        self.logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        cleaning_prompt = self._create_cleaning_prompt(messages)
        
        # –õ–û–ì–ò–†–£–ï–ú –ó–ê–ü–†–û–°
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_request(cleaning_prompt, log_type)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏)
        import time
        start_time = time.time()
        response = await self.context.provider.generate_response(cleaning_prompt)
        response_time = time.time() - start_time
        
        if not response:
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return messages
        
        # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_response(response, log_type, response_time)
        
        selected_ids = self._parse_cleaning_response(response)
        
        if not selected_ids:
            self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return messages
        
        cleaned_messages = self._filter_messages_by_ids(messages, selected_ids)
        self.logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(cleaned_messages)} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return cleaned_messages
    
    async def _do_classification_with_logging(self, log_type: str) -> List[Dict]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        summary = self.context.step_results.get('summarization')
        if not summary:
            raise ValueError("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        classification_prompt = self._create_classification_prompt(summary)
        
        # –õ–û–ì–ò–†–£–ï–ú –ó–ê–ü–†–û–°
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_request(classification_prompt, log_type)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏)
        import time
        start_time = time.time()
        response = await self.context.provider.generate_response(classification_prompt)
        response_time = time.time() - start_time
        
        if not response:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é")
        
        # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_response(response, log_type, response_time)
        
        events = self._parse_classification_response(response)
        self.logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(events)} —Å–æ–±—ã—Ç–∏–π")
        
        return events
    
    async def _do_extraction_with_logging(self, log_type: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π")
        
        events = self.context.step_results.get('classification', [])
        if not events:
            raise ValueError("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
        
        extraction_prompt = self._create_extraction_prompt(events)
        
        # –õ–û–ì–ò–†–£–ï–ú –ó–ê–ü–†–û–°
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_request(extraction_prompt, log_type)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏)
        import time
        start_time = time.time()
        response = await self.context.provider.generate_response(extraction_prompt)
        response_time = time.time() - start_time
        
        if not response:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
        
        # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_response(response, log_type, response_time)
        
        extracted_events = self._parse_extraction_response(response)
        self.logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(extracted_events)} —Å–æ–±—ã—Ç–∏–π")
        
        return extracted_events
    
    async def _do_schedule_analysis_with_logging(self, log_type: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("üìÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow_schedule = self._extract_tomorrow_schedule()
        
        if not tomorrow_schedule:
            return "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        
        schedule_prompt = self._create_schedule_analysis_prompt(tomorrow_schedule)
        
        # –õ–û–ì–ò–†–£–ï–ú –ó–ê–ü–†–û–°
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_request(schedule_prompt, log_type)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏)
        import time
        start_time = time.time()
        response = await self.context.provider.generate_response(schedule_prompt)
        response_time = time.time() - start_time
        
        if not response:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        
        # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_response(response, log_type, response_time)
        
        self.logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return response
    
    async def _do_parent_summary_with_logging(self, log_type: str) -> str:
        """–°–≤–æ–¥–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        
        events = self.context.step_results.get('extraction', [])
        if not events:
            raise ValueError("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–¥–∫–∏")
        
        parent_prompt = self._create_parent_summary_prompt(events)
        
        # –õ–û–ì–ò–†–£–ï–ú –ó–ê–ü–†–û–°
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_request(parent_prompt, log_type)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ë–ï–ó –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏)
        import time
        start_time = time.time()
        response = await self.context.provider.generate_response(parent_prompt)
        response_time = time.time() - start_time
        
        if not response:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π")
        
        # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
        if self.context.request.llm_logger:
            self.context.request.llm_logger.log_llm_response(response, log_type, response_time)
        
        self.logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return response

    def _build_result(self, steps: List[StepType], processing_time: float) -> AnalysisResult:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤"""
        result_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        if StepType.SUMMARIZATION in steps:
            summary = self.context.step_results.get('summarization', '')
            if summary:
                result_parts.append(f"üìù **–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–Ω—è:**\n{summary}")
        
        # –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ
        if StepType.IMPROVEMENT in steps:
            reflection = self.context.step_results.get('reflection', '')
            improvement = self.context.step_results.get('improvement', '')
            if reflection:
                result_parts.append(f"ü§î **–ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏—è:**\n{reflection}")
            if improvement:
                result_parts.append(f"‚ú® **–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:**\n{improvement}")
        elif StepType.REFLECTION in steps:
            reflection = self.context.step_results.get('reflection', '')
            if reflection:
                result_parts.append(f"ü§î **–ê–Ω–∞–ª–∏–∑:**\n{reflection}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if StepType.SCHEDULE_ANALYSIS in steps:
            schedule = self.context.step_results.get('schedule_analysis', '')
            if schedule:
                result_parts.append(schedule)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if StepType.PARENT_SUMMARY in steps:
            parent_summary = self.context.step_results.get('parent_summary', '')
            if parent_summary:
                result_parts.append(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–°–≤–æ–¥–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:**\n{parent_summary}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        result = "\n\n".join(result_parts) if result_parts else "‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω"
        
        return AnalysisResult(
            success=True,
            result=result,
            provider_name=self.context.request.provider_name,
            model_id=self.context.request.model_id,
            processing_time=processing_time,
            analysis_type=AnalysisType.SUMMARIZATION,
            metadata={
                'executed_steps': [s.value for s in steps],
                'step_results': dict(self.context.step_results)  # –ù–û–í–û–ï
            }
        )
