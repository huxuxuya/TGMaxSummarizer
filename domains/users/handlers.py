from telegram import Update
from telegram.ext import ContextTypes
from .service import UserService
from .models import User
from shared.utils import format_success_message, format_error_message
from shared.constants import CallbackActions
import logging

logger = logging.getLogger(__name__)

class UserHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, user_service: UserService):
        self.user_service = user_service
    
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        try:
            user_model = User(
                user_id=user.id,
                username=user.username,
                is_admin=False
            )
            
            self.user_service.create_or_update_user(
                user_model.user_id, 
                user_model.username, 
                user_model.is_admin
            )
            
            # Load user preferences into context
            self.user_service.load_user_preferences_to_context(user.id, context)
            
            if chat.type == "private":
                await self._handle_private_start(update, context)
            else:
                await self._handle_group_start(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
            await update.effective_message.reply_text(
                format_error_message(e)
            )
    
    async def _handle_private_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user = update.effective_user
        
        user_groups = self.user_service.get_user_groups(user.id)
        
        if not user_groups:
            await update.effective_message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return
        
        if len(user_groups) == 1:
            group_id = user_groups[0].group_id
            context.user_data['selected_group_id'] = group_id
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            from domains.chats.service import ChatService
            from core.database.connection import DatabaseConnection
            from core.config import load_config
            
            config = load_config()
            db_connection = DatabaseConnection(config['database'].path)
            chat_service = ChatService(db_connection)
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            group_id = user_groups[0].group_id
            chats = chat_service.get_group_vk_chats(group_id)
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.main_menu_keyboard(chats_count=len(chats), chats=chats)
            
            await update.effective_message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {user_groups[0].group_name}\n\n"
                f"üìä [–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX",
                reply_markup=keyboard
            )
        else:
            from infrastructure.telegram import keyboards
            keyboard = keyboards.group_selection_keyboard(user_groups)
            
            await update.effective_message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "[–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É] –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
                reply_markup=keyboard
            )
    
    async def _handle_group_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –≥—Ä—É–ø–ø–µ"""
        chat = update.effective_chat
        user = update.effective_user
        
        from domains.chats.models import Group, GroupUser
        from domains.chats.service import ChatService
        from core.database.connection import DatabaseConnection
        from core.config import load_config
        
        config = load_config()
        db_connection = DatabaseConnection(config['database'].path)
        chat_service = ChatService(db_connection)
        
        group = Group(
            group_id=chat.id,
            group_name=chat.title
        )
        chat_service.add_group(group)
        
        group_user = GroupUser(
            group_id=chat.id,
            user_id=user.id,
            is_admin=True
        )
        chat_service.add_group_user(group_user)
        
        await update.effective_message.reply_text(
            f"‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{chat.title}'\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."
        )
    
    async def change_group_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã"""
        user = update.effective_user
        
        try:
            user_groups = self.user_service.get_user_groups(user.id)
            
            if not user_groups:
                await update.effective_message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.group_selection_keyboard(user_groups)
            
            await update.effective_message.reply_text(
                "[–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É] –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ change_group_handler: {e}")
            await update.effective_message.reply_text(
                format_error_message(e)
            )
    
    async def select_group_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            group_id = int(query.data.split('_')[-1])
            user_id = update.effective_user.id
            context.user_data['selected_group_id'] = group_id
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            from domains.chats.service import ChatService
            from core.database.connection import DatabaseConnection
            from core.config import load_config
            
            config = load_config()
            db_connection = DatabaseConnection(config['database'].path)
            chat_service = ChatService(db_connection)
            
            group_chats = chat_service.get_group_vk_chats(group_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            group_info = chat_service.get_group(group_id)
            group_name = group_info.group_name if group_info else f"–ì—Ä—É–ø–ø–∞ {group_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            last_chat_id = self.user_service.get_last_chat(user_id, group_id)
            
            if last_chat_id and group_chats:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≥—Ä—É–ø–ø–µ
                chat_exists = any(chat.chat_id == last_chat_id for chat in group_chats)
                
                if chat_exists:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç
                    context.user_data['selected_chat_id'] = last_chat_id
                    context.user_data['last_chat_id'] = last_chat_id
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                    chat_info = chat_service.get_chat(last_chat_id)
                    chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {last_chat_id}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
                    stats = chat_service.get_chat_stats(last_chat_id)
                    
                    text = f"üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã –∏ —á–∞—Ç–∞]\n\n"
                    text += f"‚úÖ [–ì—Ä—É–ø–ø–∞]: {group_name}\n"
                    text += f"üí¨ [–ß–∞—Ç]: {chat_name}\n\n"
                    text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                    text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
                    text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.days_count}\n\n"
                    
                    if stats.recent_days:
                        text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
                        for day in stats.recent_days[:3]:
                            text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
                    
                    from infrastructure.telegram import keyboards
                    keyboard = keyboards.chat_quick_menu_keyboard(last_chat_id, group_id)
                    
                    await query.edit_message_text(
                        text,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                    return
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from infrastructure.telegram import keyboards
            keyboard = keyboards.main_menu_keyboard(chats_count=len(group_chats), chats=group_chats)
            
            await query.edit_message_text(
                f"‚úÖ [–ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞]: {group_name}\n\n"
                f"üìä [–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_group_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def schedule_settings_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings_menu")]]
            
            await query.edit_message_text(
                "üìÖ [–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π]\n\n"
                "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
                "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_settings_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )

