from telegram import Update
from telegram.ext import ContextTypes
from .service import UserService
from .models import User
from shared.utils import format_success_message, format_error_message
from shared.constants import CallbackActions
import logging

logger = logging.getLogger(__name__)

class UserHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, user_service: UserService):
        self.user_service = user_service
    
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        try:
            user_model = User(
                user_id=user.id,
                username=user.username,
                is_admin=False
            )
            
            self.user_service.create_or_update_user(
                user_model.user_id, 
                user_model.username, 
                user_model.is_admin
            )
            
            if chat.type == "private":
                await self._handle_private_start(update, context)
            else:
                await self._handle_group_start(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
            await update.effective_message.reply_text(
                format_error_message(e)
            )
    
    async def _handle_private_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user = update.effective_user
        
        user_groups = self.user_service.get_user_groups(user.id)
        
        if not user_groups:
            await update.effective_message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return
        
        if len(user_groups) == 1:
            group_id = user_groups[0]['group_id']
            context.user_data['selected_group_id'] = group_id
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_management_keyboard()
            
            await update.effective_message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {user_groups[0]['group_name']}\n\n"
                f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX",
                reply_markup=keyboard
            )
        else:
            from infrastructure.telegram import keyboards
            keyboard = keyboards.group_selection_keyboard(user_groups)
            
            await update.effective_message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
                reply_markup=keyboard
            )
    
    async def _handle_group_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –≥—Ä—É–ø–ø–µ"""
        chat = update.effective_chat
        user = update.effective_user
        
        from domains.chats.models import Group, GroupUser
        from domains.chats.service import ChatService
        from core.database.connection import DatabaseConnection
        from core.config import load_config
        
        config = load_config()
        db_connection = DatabaseConnection(config['database'].path)
        chat_service = ChatService(db_connection)
        
        group = Group(
            group_id=chat.id,
            group_name=chat.title
        )
        chat_service.add_group(group)
        
        group_user = GroupUser(
            group_id=chat.id,
            user_id=user.id,
            is_admin=True
        )
        chat_service.add_group_user(group_user)
        
        await update.effective_message.reply_text(
            format_success_message(
                f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{chat.title}'\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏."
            )
        )
    
    async def change_group_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã"""
        user = update.effective_user
        
        try:
            user_groups = self.user_service.get_user_groups(user.id)
            
            if not user_groups:
                await update.effective_message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.group_selection_keyboard(user_groups)
            
            await update.effective_message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ change_group_handler: {e}")
            await update.effective_message.reply_text(
                format_error_message(e)
            )
    
    async def select_group_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            group_id = int(query.data.split('_')[-1])
            context.user_data['selected_group_id'] = group_id
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_management_keyboard()
            
            await query.edit_message_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞\n\n"
                f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_group_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )

