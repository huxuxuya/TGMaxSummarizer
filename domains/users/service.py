from typing import List, Optional
from .models import User, UserPreferences, UserGroup
from .repository import UserRepository, UserPreferencesRepository, UserOpenRouterRepository, UserLastChatRepository
from ..chats.repository import GroupUserRepository
from core.database.connection import DatabaseConnection
from core.exceptions import ValidationError

class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, db_connection: DatabaseConnection):
        self.user_repo = UserRepository(db_connection)
        self.preferences_repo = UserPreferencesRepository(db_connection)
        self.openrouter_repo = UserOpenRouterRepository(db_connection)
        self.group_user_repo = GroupUserRepository(db_connection)
        self.last_chat_repo = UserLastChatRepository(db_connection)
        
        self.user_repo.create_table()
        self.preferences_repo.create_table()
        self.openrouter_repo.create_table()
        self.group_user_repo.create_table()
        self.last_chat_repo.create_table()
    
    def create_or_update_user(self, user_id: int, username: str = None, is_admin: bool = False) -> User:
        """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = User(
            user_id=user_id,
            username=username,
            is_admin=is_admin
        )
        
        if not self.user_repo.add_user(user):
            raise ValidationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return user
    
    def get_user(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_repo.get_user(user_id)
    
    def get_user_groups(self, user_id: int) -> List[UserGroup]:
        """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        groups_data = self.group_user_repo.get_user_groups(user_id)
        return [UserGroup(group_id=group['group_id'], group_name=group['group_name'], is_admin=group['is_admin']) for group in groups_data]
    
    def is_user_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return self.user_repo.is_user_admin(user_id)
    
    def get_user_preferences(self, user_id: int) -> UserPreferences:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        preferences = self.preferences_repo.get_preferences(user_id)
        if not preferences:
            preferences = UserPreferences(user_id=user_id)
            self.preferences_repo.save_preferences(preferences)
        return preferences
    
    def update_user_preferences(self, preferences: UserPreferences) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.preferences_repo.save_preferences(preferences)
    
    def set_user_openrouter_model(self, user_id: int, model_id: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å OpenRouter –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.openrouter_repo.set_user_model(user_id, model_id)
    
    def get_user_openrouter_model(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å OpenRouter –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.openrouter_repo.get_user_model(user_id)
    
    def set_last_chat(self, user_id: int, group_id: int, chat_id: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ"""
        return self.last_chat_repo.set_last_chat(user_id, group_id, chat_id)
    
    def get_last_chat(self, user_id: int, group_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ"""
        return self.last_chat_repo.get_last_chat(user_id, group_id)
    
    def load_user_preferences_to_context(self, user_id: int, context) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context.user_data"""
        preferences = self.get_user_preferences(user_id)
        if preferences:
            print(f"üîç DEBUG: load_user_preferences_to_context –¥–ª—è user_id {user_id}:")
            print(f"   confirmed_provider: {preferences.confirmed_provider}")
            print(f"   selected_model_id: {preferences.selected_model_id}")
            print(f"   default_scenario: {preferences.default_scenario}")
            
            context.user_data['confirmed_provider'] = preferences.confirmed_provider
            context.user_data['selected_model_id'] = preferences.selected_model_id
            context.user_data['default_scenario'] = preferences.default_scenario
        else:
            print(f"üîç DEBUG: –ù–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è user_id {user_id}")
    
    def save_user_ai_settings(self, user_id: int, provider: str = None, model_id: str = None, scenario: str = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)"""
        preferences = self.get_user_preferences(user_id)
        if not preferences:
            preferences = UserPreferences(user_id=user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if provider is not None:
            preferences.confirmed_provider = provider
        if model_id is not None:
            preferences.selected_model_id = model_id
        if scenario is not None:
            preferences.default_scenario = scenario

        return self.update_user_preferences(preferences)
    
    def clear_user_ai_settings(self, user_id: int) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.preferences_repo.delete_preferences(user_id)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False