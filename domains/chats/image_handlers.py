"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .image_analysis_service import ImageAnalysisService
from .repository import MessageRepository
from shared.utils import format_success_message, format_error_message
import logging
import asyncio

logger = logging.getLogger(__name__)

class ImageAnalysisHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, 
                 image_analysis_service: ImageAnalysisService,
                 message_repository: MessageRepository):
        self.image_analysis_service = image_analysis_service
        self.message_repository = message_repository
    
    async def image_analysis_menu_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = query.data.replace('image_analysis_menu_', '', 1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.message_repository.get_chat_stats(vk_chat_id)
            
            text = f"üñºÔ∏è *[–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π]*\n\n"
            text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats.total_images}\n"
            text += f"‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.analyzed_images}\n"
            text += f"‚Ä¢ –ù–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.unanalyzed_images}\n"
            
            if stats.unanalyzed_images > 0:
                text += f"\n‚ö†Ô∏è –ï—Å—Ç—å {stats.unanalyzed_images} –Ω–µ–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
                text += "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
            else:
                text += f"\n‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!"
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.image_analysis_menu_keyboard(vk_chat_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ image_analysis_menu_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def start_image_analysis_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = query.data.replace('start_image_analysis_', '', 1)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            unanalyzed_messages = await self.image_analysis_service.get_unanalyzed_messages(
                vk_chat_id, 
                self.message_repository
            )
            
            if not unanalyzed_messages:
                await query.edit_message_text(
                    "‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!",
                    parse_mode='Markdown'
                )
                return
            
            total_images = sum(len(msg.image_paths) for msg in unanalyzed_messages)
            
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...\n\n"
                f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(unanalyzed_messages)}\n"
                f"üñºÔ∏è –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}\n\n"
                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode='Markdown'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ context.user_data –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            model = context.user_data.get('image_analysis_model')
            prompt = context.user_data.get('image_analysis_prompt')
            
            # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            last_update_time = asyncio.get_event_loop().time()
            
            async def progress_callback(current, total, stats):
                nonlocal last_update_time
                current_time = asyncio.get_event_loop().time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                if current_time - last_update_time >= 5 or current % 5 == 0 or current == total:
                    last_update_time = current_time
                    
                    progress_text = f"üîÑ [–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π]...\n\n"
                    progress_text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    progress_text += f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['analyzed_images']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
                    progress_text += f"‚ùå –û—à–∏–±–æ–∫: {stats['failed_images']}\n\n"
                    progress_text += f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                    
                    try:
                        await query.edit_message_text(
                            progress_text,
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result_stats = await self.image_analysis_service.analyze_chat_images(
                vk_chat_id,
                self.message_repository,
                model=model,
                prompt=prompt,
                progress_callback=progress_callback
            )
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            success_text = f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
            success_text += f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n"
            success_text += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result_stats['total_messages']}\n"
            success_text += f"‚Ä¢ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {result_stats['total_images']}\n"
            success_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result_stats['analyzed_images']}\n"
            success_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {result_stats['failed_images']}\n"
            success_text += f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result_stats['processing_time']:.1f} —Å–µ–∫\n"
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.image_analysis_menu_keyboard(vk_chat_id)
            
            await query.edit_message_text(
                success_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_image_analysis_handler: {e}")
            import traceback
            traceback.print_exc()
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def image_analysis_settings_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = query.data.replace('image_analysis_settings_', '', 1)
            
            current_model = context.user_data.get('image_analysis_model', 
                                                  self.image_analysis_service.default_model)
            current_prompt = context.user_data.get('image_analysis_prompt', 
                                                   self.image_analysis_service.default_prompt)
            
            text = f"‚öôÔ∏è *[–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π]*\n\n"
            text += f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: `{current_model}`\n\n"
            text += f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n`{current_prompt[:100]}...`\n"
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.image_analysis_settings_keyboard(vk_chat_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ image_analysis_settings_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_analysis_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = query.data.replace('select_analysis_model_', '', 1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            available_models = await self.image_analysis_service.get_available_models()
            
            if not available_models:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ Ollama.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä Ollama –¥–æ—Å—Ç—É–ø–µ–Ω.",
                    parse_mode='Markdown'
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
            keyboard = []
            for model in available_models[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –º–æ–¥–µ–ª—è–º–∏
                keyboard.append([InlineKeyboardButton(
                    f"ü§ñ {model}",
                    callback_data=f"set_analysis_model_{vk_chat_id}_{model}"
                )])
            
            keyboard.append([InlineKeyboardButton(
                "üîô –ù–∞–∑–∞–¥",
                callback_data=f"image_analysis_settings_{vk_chat_id}"
            )])
            
            await query.edit_message_text(
                "ü§ñ [–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å] –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_analysis_model_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def set_analysis_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: set_analysis_model_{vk_chat_id}_{model}
            parts = query.data.replace('set_analysis_model_', '', 1).split('_', 1)
            if len(parts) < 2:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            
            vk_chat_id = parts[0]
            model = parts[1]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ context.user_data
            context.user_data['image_analysis_model'] = model
            
            await query.edit_message_text(
                f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: `{model}`",
                parse_mode='Markdown'
            )
            
            # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await asyncio.sleep(2)
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.image_analysis_settings_keyboard(vk_chat_id)
            
            current_prompt = context.user_data.get('image_analysis_prompt', 
                                                   self.image_analysis_service.default_prompt)
            
            text = f"‚öôÔ∏è *[–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π]*\n\n"
            text += f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: `{model}`\n\n"
            text += f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n`{current_prompt[:100]}...`\n"
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_analysis_model_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def change_analysis_prompt_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = query.data.replace('change_analysis_prompt_', '', 1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º vk_chat_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data['pending_prompt_change_chat_id'] = vk_chat_id
            
            await query.edit_message_text(
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`–û–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∫–ª—é—á–∞—è –ª—é–¥–µ–π, –æ–±—ä–µ–∫—Ç—ã –∏ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É.`\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ change_analysis_prompt_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )

