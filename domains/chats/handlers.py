from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .service import ChatService
from .models import Chat, Message, GroupVKChat
from shared.utils import format_success_message, format_error_message, format_chat_stats
from shared.constants import CallbackActions
import logging

logger = logging.getLogger(__name__)

class ChatHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏"""
    
    def __init__(self, chat_service: ChatService):
        self.chat_service = chat_service
    
    async def manage_chats_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            selected_group_id = context.user_data.get('selected_group_id')
            
            if selected_group_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã
                keyboard = keyboards.group_chat_management_keyboard(selected_group_id)
                group_info = self.chat_service.get_group(selected_group_id)
                group_name = group_info.group_name if group_info else f"–ì—Ä—É–ø–ø–∞ {selected_group_id}"
                
                await query.edit_message_text(
                    f"üìä [–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏] VK MAX\n\n"
                    f"[–ì—Ä—É–ø–ø–∞]: {group_name}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = keyboards.chat_management_keyboard()
                
                await query.edit_message_text(
                    "üìä [–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏] VK MAX\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_chats_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def add_chat_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_add_method_keyboard()
            
            await query.edit_message_text(
                "‚ûï [–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞] VK MAX\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_chat_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def list_chats_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            group_id = context.user_data.get('selected_group_id')
            if not group_id:
                await query.edit_message_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                )
                return
            
            chats = self.chat_service.get_group_vk_chats(group_id)
            
            if not chats:
                await query.edit_message_text(
                    "üìã [–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤] –ø—É—Å—Ç\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã VK MAX –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_list_keyboard(chats, context="quick")  # –ò–ó–ú–ï–ù–ï–ù–û
            
            chat_list_text = "üìã [–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤] VK MAX:\n\n"
            for chat in chats:
                chat_list_text += f"üí¨ {chat.chat_name}\n"
            
            await query.edit_message_text(
                chat_list_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ list_chats_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def chat_settings_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('chat_settings_', '', 1)
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_settings_keyboard(vk_chat_id)
            
            chat_info = self.chat_service.get_chat(vk_chat_id)
            chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {vk_chat_id}"
            
            await query.edit_message_text(
                f"‚öôÔ∏è [–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞]: {chat_name}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ chat_settings_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def chat_stats_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('chat_stats_', '', 1)
            
            stats = self.chat_service.get_chat_stats(vk_chat_id)
            stats_text = format_chat_stats(stats)
            
            from infrastructure.telegram import keyboards
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∫ –º–µ–Ω—é —á–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"quick_chat_{vk_chat_id}")]]
            
            await query.edit_message_text(
                stats_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ chat_stats_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def load_messages_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('load_messages_', '', 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
            last_timestamp = self.chat_service.get_last_message_timestamp(vk_chat_id)
            
            if last_timestamp:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
                from infrastructure.telegram import keyboards
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ", callback_data=f"load_new_messages_{vk_chat_id}")],
                    [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ", callback_data=f"load_all_messages_{vk_chat_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{vk_chat_id}")]
                ]
                
                await query.edit_message_text(
                    "üìä –í —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ
                await self._load_messages_worker(update, context, vk_chat_id, load_only_new=False)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ load_messages_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def _load_messages_worker(self, update: Update, context: ContextTypes.DEFAULT_TYPE, vk_chat_id: str, load_only_new: bool = False):
        """–†–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        query = update.callback_query
        
        try:
            await query.edit_message_text(
                f"üîÑ {'–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' if load_only_new else '–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è'}...\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            
            from infrastructure.vk.client import VKMaxClient
            from core.config import load_config
            
            config = load_config()
            vk_client = VKMaxClient(config['bot'].vk_max_token)
            
            if not await vk_client.connect():
                from infrastructure.telegram import keyboards
                keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VK MAX",
                    reply_markup=keyboard
                )
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if load_only_new:
                # –ü–æ–ª—É—á–∞–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                last_timestamp = self.chat_service.get_last_message_timestamp(vk_chat_id)
                messages = await vk_client.load_chat_messages(vk_chat_id, days_back=7, load_only_new=True, last_timestamp=last_timestamp)
            else:
                messages = await vk_client.load_chat_messages(vk_chat_id, days_back=7, load_only_new=False)
            
            if not messages:
                message_type = "–Ω–æ–≤—ã—Ö" if load_only_new else ""
                from infrastructure.telegram import keyboards
                keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
                await query.edit_message_text(
                    f"‚ùå {'–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π' if load_only_new else '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'}",
                    reply_markup=keyboard
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            formatted_messages = await vk_client.format_messages_for_db(messages, vk_chat_id)
            saved_count = self.chat_service.save_messages(formatted_messages)
            
            message_type = "–Ω–æ–≤—ã—Ö" if load_only_new else ""
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
            await query.edit_message_text(
                format_success_message(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} {message_type} —Å–æ–æ–±—â–µ–Ω–∏–π"
                ),
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _load_messages_worker: {e}")
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
            await query.edit_message_text(
                format_error_message(e),
                reply_markup=keyboard
            )
    
    async def remove_chat_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            group_id = context.user_data.get('selected_group_id')
            if not group_id:
                await query.edit_message_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                )
                return
            
            chats = self.chat_service.get_group_vk_chats(group_id)
            
            if not chats:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_list_keyboard(chats)
            
            await query.edit_message_text(
                "‚ùå [–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞]\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_chat_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_chat_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ callback_data
            chat_id = query.data.split('_')[2]
            user_id = update.effective_user.id
            group_id = context.user_data.get('selected_group_id')
            
            context.user_data['selected_chat_id'] = chat_id
            context.user_data['last_chat_id'] = chat_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
            if group_id:
                from domains.users.service import UserService
                from core.database.connection import DatabaseConnection
                from core.config import load_config
                
                config = load_config()
                db_connection = DatabaseConnection(config['database'].path)
                user_service = UserService(db_connection)
                user_service.set_last_chat(user_id, group_id, chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = self.chat_service.get_chat(chat_id)
            chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {chat_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
            stats = self.chat_service.get_chat_stats(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
            text = f"üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞]\n\n"
            text += f"üí¨ –ß–∞—Ç: {chat_name}\n\n"
            text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
            text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.days_count}\n\n"
            
            if stats.recent_days:
                text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
                for day in stats.recent_days[:5]:
                    text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_settings_keyboard(chat_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_chat_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def show_chat_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = self.chat_service.get_chat(chat_id)
            chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {chat_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
            stats = self.chat_service.get_chat_stats(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
            from infrastructure.telegram.formatter import TelegramFormatter
            text = f"üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞]\n\n"
            text += f"üí¨ –ß–∞—Ç: {TelegramFormatter.escape_markdown_v1(chat_name)}\n\n"
            text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
            text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.days_count}\n\n"
            
            if stats.recent_days:
                text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
                for day in stats.recent_days[:5]:
                    text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_settings_keyboard(chat_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_chat_settings: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def quick_chat_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('quick_chat_', '', 1)
            user_id = update.effective_user.id
            group_id = context.user_data.get('selected_group_id')
            
            context.user_data['selected_chat_id'] = vk_chat_id
            context.user_data['last_chat_id'] = vk_chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
            if group_id:
                from domains.users.service import UserService
                from core.database.connection import DatabaseConnection
                from core.config import load_config
                
                config = load_config()
                db_connection = DatabaseConnection(config['database'].path)
                user_service = UserService(db_connection)
                user_service.set_last_chat(user_id, group_id, vk_chat_id)
            
            chat_info = self.chat_service.get_chat(vk_chat_id)
            chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {vk_chat_id}"
            
            stats = self.chat_service.get_chat_stats(vk_chat_id)
            
            from infrastructure.telegram.formatter import TelegramFormatter
            text = f"üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞]\n\n"
            text += f"üí¨ –ß–∞—Ç: {TelegramFormatter.escape_markdown_v1(chat_name)}\n\n"
            text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
            text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.days_count}\n\n"
            
            if stats.recent_days:
                text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
                for day in stats.recent_days[:3]:
                    text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_quick_menu_keyboard(vk_chat_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ quick_chat_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def quick_create_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('quick_create_', '', 1)
            context.user_data['selected_chat_id'] = vk_chat_id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            from domains.summaries.service import SummaryService
            from core.database.connection import DatabaseConnection
            from core.config import load_config
            
            config = load_config()
            db_connection = DatabaseConnection(config['database'].path)
            summary_service = SummaryService(db_connection)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            stats = self.chat_service.get_chat_stats(vk_chat_id)
            
            if not stats.recent_days:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ VK MAX."
                )
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            available_dates = []
            for day in stats.recent_days:
                available_dates.append({
                    'date': day['date'],
                    'count': day['count']
                })
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.create_summary_keyboard(vk_chat_id, available_dates)
            
            chat_info = self.chat_service.get_chat(vk_chat_id)
            chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {vk_chat_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            current_provider = context.user_data.get('confirmed_provider', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            current_model = context.user_data.get('selected_model_id', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
            
            await query.edit_message_text(
                f"üìù [–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏]\n\n"
                f"üí¨ –ß–∞—Ç: {chat_name}\n"
                f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}\n"
                f"üß† –ú–æ–¥–µ–ª—å: {current_model}\n"
                f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –¥–∞—Ç: {len(available_dates)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ quick_create_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def all_dates_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ vk_chat_id —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
            vk_chat_id = query.data.replace('all_dates_', '', 1)
            stats = self.chat_service.get_chat_stats(vk_chat_id)
            
            if not stats.recent_days:
                await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã (–Ω–µ —Ç–æ–ª—å–∫–æ 3)
            available_dates = [{'date': day['date'], 'count': day['count']} for day in stats.recent_days]
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.create_summary_keyboard(vk_chat_id, available_dates, show_all=True)
            
            await query.edit_message_text(
                f"üìÖ [–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã] ({len(available_dates)}):\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ all_dates_handler: {e}")
            await query.edit_message_text(format_error_message(e))
    
    async def set_schedule_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º group_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑ —á–∞—Ç–∞
            group_id = context.user_data.get('selected_group_id')
            if not group_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –±–µ—Ä–µ–º –∏–∑ —á–∞—Ç–∞ (–¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö)
                if update.effective_chat.type in ['group', 'supergroup']:
                    group_id = update.effective_chat.id
                else:
                    await query.edit_message_text(
                        "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                    )
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø
            user_id = update.effective_user.id
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if update.effective_chat.type in ['group', 'supergroup']:
                administrators = await context.bot.get_chat_administrators(group_id)
                admin_ids = [admin.user.id for admin in administrators]
                
                if user_id not in admin_ids:
                    await query.edit_message_text(
                        "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                    )
                    return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            context.user_data['uploading_schedule'] = True
            context.user_data['schedule_group_id'] = group_id
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.schedule_management_keyboard(False, False)  # –ù–µ—Ç —Ñ–æ—Ç–æ, –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–∞
            
            await query.edit_message_text(
                "üìÖ [–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è]\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ set_schedule_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def delete_schedule_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º group_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑ —á–∞—Ç–∞
            group_id = context.user_data.get('selected_group_id')
            if not group_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –±–µ—Ä–µ–º –∏–∑ —á–∞—Ç–∞ (–¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö)
                if update.effective_chat.type in ['group', 'supergroup']:
                    group_id = update.effective_chat.id
                else:
                    await query.edit_message_text(
                        "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                    )
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø
            user_id = update.effective_user.id
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if update.effective_chat.type in ['group', 'supergroup']:
                administrators = await context.bot.get_chat_administrators(group_id)
                admin_ids = [admin.user.id for admin in administrators]
                
                if user_id not in admin_ids:
                    await query.edit_message_text(
                        "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                    )
                    return
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            success = self.chat_service.delete_schedule_photo(group_id)
            
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if success:
                from core.database.connection import DatabaseConnection
                from core.config import load_config
                from .repository import ScheduleAnalysisRepository
                
                config = load_config()
                db_connection = DatabaseConnection(config['database'].path)
                schedule_analysis_repo = ScheduleAnalysisRepository(db_connection)
                schedule_analysis_repo.delete_schedule_analysis(group_id)
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.schedule_management_keyboard(False, False)  # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç —Ñ–æ—Ç–æ –∏ –∞–Ω–∞–ª–∏–∑–∞
            
            if success:
                await query.edit_message_text(
                    "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
                    reply_markup=keyboard
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                    reply_markup=keyboard
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_schedule_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def show_schedule_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º group_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑ —á–∞—Ç–∞
            group_id = context.user_data.get('selected_group_id')
            if not group_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –±–µ—Ä–µ–º –∏–∑ —á–∞—Ç–∞ (–¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö)
                if update.effective_chat.type in ['group', 'supergroup']:
                    group_id = update.effective_chat.id
                else:
                    await query.edit_message_text(
                        "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                    )
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º file_id —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            file_id = self.chat_service.get_schedule_photo(group_id)
            
            if file_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=file_id,
                    caption="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
                )
            else:
                await query.edit_message_text(
                    "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_schedule_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def schedule_command_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
        try:
            chat_id = update.effective_chat.id
            
            # –ü–æ–ª—É—á–∞–µ–º file_id —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            file_id = self.chat_service.get_schedule_photo(chat_id)
            
            if file_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                await update.message.reply_photo(
                    photo=file_id,
                    caption="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
                )
            else:
                await update.message.reply_text(
                    "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ."
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_command_handler: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            )