from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .service import ChatService
from .models import Chat, Message, GroupVKChat
from shared.utils import format_success_message, format_error_message, format_chat_stats
from shared.constants import CallbackActions
import logging

logger = logging.getLogger(__name__)

class ChatHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏"""
    
    def __init__(self, chat_service: ChatService):
        self.chat_service = chat_service
    
    async def manage_chats_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_management_keyboard()
            
            await query.edit_message_text(
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_chats_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def add_chat_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_add_method_keyboard()
            
            await query.edit_message_text(
                "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ VK MAX\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ add_chat_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def list_chats_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            group_id = context.user_data.get('selected_group_id')
            if not group_id:
                await query.edit_message_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                )
                return
            
            chats = self.chat_service.get_group_vk_chats(group_id)
            
            if not chats:
                await query.edit_message_text(
                    "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã VK MAX –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_list_keyboard(chats)
            
            chat_list_text = "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:\n\n"
            for chat in chats:
                chat_list_text += f"üí¨ {chat['chat_name']}\n"
            
            await query.edit_message_text(
                chat_list_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ list_chats_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def chat_settings_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = query.data.split('_')[-1]
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_settings_keyboard(vk_chat_id)
            
            chat_info = self.chat_service.get_chat(vk_chat_id)
            chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {vk_chat_id}"
            
            await query.edit_message_text(
                f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞: {chat_name}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ chat_settings_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def chat_stats_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = query.data.split('_')[-1]
            
            stats = self.chat_service.get_chat_stats(vk_chat_id)
            stats_text = format_chat_stats(stats)
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.back_keyboard()
            
            await query.edit_message_text(
                stats_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ chat_stats_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def load_messages_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            vk_chat_id = query.data.split('_')[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
            last_timestamp = self.chat_service.get_last_message_timestamp(vk_chat_id)
            
            if last_timestamp:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
                from infrastructure.telegram import keyboards
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ", callback_data=f"load_new_messages_{vk_chat_id}")],
                    [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ", callback_data=f"load_all_messages_{vk_chat_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{vk_chat_id}")]
                ]
                
                await query.edit_message_text(
                    "üìä –í —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ
                await self._load_messages_worker(update, context, vk_chat_id, load_only_new=False)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ load_messages_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def _load_messages_worker(self, update: Update, context: ContextTypes.DEFAULT_TYPE, vk_chat_id: str, load_only_new: bool = False):
        """–†–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        query = update.callback_query
        
        try:
            await query.edit_message_text(
                f"üîÑ {'–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' if load_only_new else '–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è'}...\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            
            from infrastructure.vk.client import VKMaxClient
            from core.config import load_config
            
            config = load_config()
            vk_client = VKMaxClient(config['bot'].vk_max_token)
            
            if not await vk_client.connect():
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VK MAX"
                )
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if load_only_new:
                # –ü–æ–ª—É—á–∞–µ–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                last_timestamp = self.chat_service.get_last_message_timestamp(vk_chat_id)
                messages = await vk_client.load_chat_messages(vk_chat_id, days_back=7, load_only_new=True, last_timestamp=last_timestamp)
            else:
                messages = await vk_client.load_chat_messages(vk_chat_id, days_back=7, load_only_new=False)
            
            if not messages:
                message_type = "–Ω–æ–≤—ã—Ö" if load_only_new else ""
                await query.edit_message_text(
                    f"‚ùå {'–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π' if load_only_new else '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'}"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            formatted_messages = await vk_client.format_messages_for_db(messages, vk_chat_id)
            saved_count = self.chat_service.save_messages(formatted_messages)
            
            message_type = "–Ω–æ–≤—ã—Ö" if load_only_new else ""
            await query.edit_message_text(
                format_success_message(
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} {message_type} —Å–æ–æ–±—â–µ–Ω–∏–π"
                )
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _load_messages_worker: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def remove_chat_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            group_id = context.user_data.get('selected_group_id')
            if not group_id:
                await query.edit_message_text(
                    "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
                )
                return
            
            chats = self.chat_service.get_group_vk_chats(group_id)
            
            if not chats:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return
            
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_list_keyboard(chats)
            
            await query.edit_message_text(
                "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_chat_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def select_chat_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ callback_data
            chat_id = query.data.split('_')[2]
            context.user_data['selected_chat_id'] = chat_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = self.chat_service.get_chat(chat_id)
            chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {chat_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
            stats = self.chat_service.get_chat_stats(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
            text = f"üí¨ –ß–∞—Ç: {chat_name}\n\n"
            text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
            text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.days_count}\n\n"
            
            if stats.recent_days:
                text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
                for day in stats.recent_days[:5]:
                    text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_settings_keyboard(chat_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ select_chat_handler: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )
    
    async def show_chat_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = self.chat_service.get_chat(chat_id)
            chat_name = chat_info.chat_name if chat_info else f"–ß–∞—Ç {chat_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
            stats = self.chat_service.get_chat_stats(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
            text = f"üí¨ –ß–∞—Ç: {chat_name}\n\n"
            text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}\n"
            text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.days_count}\n\n"
            
            if stats.recent_days:
                text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
                for day in stats.recent_days[:5]:
                    text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
            from infrastructure.telegram import keyboards
            keyboard = keyboards.chat_settings_keyboard(chat_id)
            
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_chat_settings: {e}")
            await query.edit_message_text(
                format_error_message(e)
            )