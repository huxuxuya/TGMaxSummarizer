#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å telegramify-markdown
–û—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Å–ª—É—á–∞—è –∏–∑ JSON –ª–æ–≥–∞ —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º–∏ bold —Ç–µ–≥–∞–º–∏
"""

import unittest
import logging
from telegram_message_sender import TelegramMessageSender
from telegram_formatter import TextContentType, TelegramFormatter
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

class TestTelegramifyFixes(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.sender = TelegramMessageSender()
    
    def test_problematic_case_from_json_log(self):
        """
        –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞—è –∏–∑ JSON –ª–æ–≥–∞ 2025-10-16-10-42-42-973448.json
        –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ telegramify-markdown –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏ —Å *
        """
        # –¢–µ–∫—Å—Ç –∏–∑ JSON –ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫—É "can't find end of bold entity"
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown
        problematic_text = """üìä **–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ –∑–∞ 2025-10-15**

> üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
> ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: 62
> ‚Ä¢ –î–∞—Ç–∞: 2025-10-15
> ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: Ollama (–õ–æ–∫–∞–ª—å–Ω–∞—è)
> ‚Ä¢ –ú–æ–¥–µ–ª—å: gemma3:27b
> ‚Ä¢ –†–µ–∂–∏–º: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π)

**üìù –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:**
> ## üìã –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
> - –ö–∞–Ω–∏–∫—É–ª—ã —Å 25 –æ–∫—Ç—è–±—Ä—è –ø–æ 4 –Ω–æ—è–±—Ä—è.
> 
> ## üö® –†–æ–¥–∏—Ç–µ–ª—è–º:
> - –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –ø—Ä–æ–ø–∏—Å–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 12 —Å—Ç—Ä–æ—á–∫–∏ 6,7,8.
> - –£—Ç–æ—á–Ω—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –∫—Ä—É–∂–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∏–∫—É–ª–∞—Ö.
> - –£—Ç–æ—á–Ω—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 1 –Ω–æ—è–±—Ä—è (—É—á–∞—Ç—Å—è –ª–∏ –¥–µ—Ç–∏).
> 
> ## ‚ö†Ô∏è –î–µ—Ç—è–º:
> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –ø—Ä–æ–ø–∏—Å–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 12 —Å—Ç—Ä–æ—á–∫–∏ 6,7,8.

**ü§î –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏:**
> –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
> 
> - **–ù–µ—è—Å–Ω–æ:** –í —Ä–∞–∑–¥–µ–ª–µ "–†–æ–¥–∏—Ç–µ–ª—è–º" –∏ "–î–µ—Ç—è–º" –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏. –ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å.
> - **–î–µ–π—Å—Ç–≤–∏—è:** –í —Ä–∞–∑–¥–µ–ª–µ "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ –∫—Ä—É–∂–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∏–∫—É–ª–∞—Ö" - –Ω–µ—è—Å–Ω–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å - –±—É–¥—É—Ç –ª–∏ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—Å—è –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –õ—É—á—à–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è, –±—É–¥—É—Ç –ª–∏ –∫—Ä—É–∂–∫–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –∫–∞–Ω–∏–∫—É–ª".
> - **–õ–∏—à–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** –ù–µ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
> - **–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** –ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã "–†–æ–¥–∏—Ç–µ–ª—è–º" –∏ "–î–µ—Ç—è–º" –≤ –æ–¥–∏–Ω, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è. –ù–∞–ø—Ä–∏–º–µ—Ä, "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –ø—Ä–æ–ø–∏—Å–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 12 —Å—Ç—Ä–æ—á–∫–∏ 6,7,8".
> - –î–æ–±–∞–≤–∏—Ç—å: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 1 –Ω–æ—è–±—Ä—è (—É—á–∞—Ç—Å—è –ª–∏ –¥–µ—Ç–∏) –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ".

**‚ú® –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:**
> ## üìã –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
> - –ö–∞–Ω–∏–∫—É–ª—ã —Å 25 –æ–∫—Ç—è–±—Ä—è –ø–æ 4 –Ω–æ—è–±—Ä—è.
> 
> ## üö® –†–æ–¥–∏—Ç–µ–ª—è–º –∏ –¥–µ—Ç—è–º:
> - –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: –ø—Ä–æ–ø–∏—Å–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 12 —Å—Ç—Ä–æ—á–∫–∏ 6,7,8.
> - –£—Ç–æ—á–Ω—è–µ—Ç—Å—è, –±—É–¥—É—Ç –ª–∏ –∫—Ä—É–∂–∫–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –∫–∞–Ω–∏–∫—É–ª.
> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 1 –Ω–æ—è–±—Ä—è (—É—á–∞—Ç—Å—è –ª–∏ –¥–µ—Ç–∏) –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ."""
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ telegramify-markdown
        try:
            telegram_text = TelegramMessageSender.convert_standard_markdown_to_telegram(problematic_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
            self._validate_telegram_markdown(telegram_text)
            
            logger.info("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {telegram_text[:200]}...")
            
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
    
    def test_list_markers_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–ø–∏—Å–∫–æ–≤"""
        test_cases = [
            {
                "name": "–°–ø–∏—Å–∫–∏ —Å * –º–∞—Ä–∫–µ—Ä–∞–º–∏",
                "input": """## –ê–Ω–∞–ª–∏–∑
*   **–ü—É–Ω–∫—Ç 1:** –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞
*   **–ü—É–Ω–∫—Ç 2:** –û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø—É–Ω–∫—Ç–∞
*   **–ü—É–Ω–∫—Ç 3:** –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—É–Ω–∫—Ç–∞""",
                "expected_contains": ["*", "–ü—É–Ω–∫—Ç 1", "–ü—É–Ω–∫—Ç 2", "–ü—É–Ω–∫—Ç 3"]
            },
            {
                "name": "–°–ø–∏—Å–∫–∏ —Å - –º–∞—Ä–∫–µ—Ä–∞–º–∏",
                "input": """## –°–ø–∏—Å–æ–∫ –¥–µ–ª
- –ü–µ—Ä–≤–æ–µ –¥–µ–ª–æ
- –í—Ç–æ—Ä–æ–µ –¥–µ–ª–æ
- –¢—Ä–µ—Ç—å–µ –¥–µ–ª–æ""",
                "expected_contains": ["–ü–µ—Ä–≤–æ–µ –¥–µ–ª–æ", "–í—Ç–æ—Ä–æ–µ –¥–µ–ª–æ", "–¢—Ä–µ—Ç—å–µ –¥–µ–ª–æ"]
            },
            {
                "name": "–°–º–µ—à–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏",
                "input": """## –°–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
*   **–í–∞–∂–Ω–æ:** –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
- –û–±—ã—á–Ω—ã–π –ø—É–Ω–∫—Ç
*   **–ö—Ä–∏—Ç–∏—á–Ω–æ:** –¢—Ä–µ—Ç–∏–π –ø—É–Ω–∫—Ç""",
                "expected_contains": ["–í–∞–∂–Ω–æ", "–û–±—ã—á–Ω—ã–π –ø—É–Ω–∫—Ç", "–ö—Ä–∏—Ç–∏—á–Ω–æ"]
            }
        ]
        
        for case in test_cases:
            with self.subTest(case=case["name"]):
                try:
                    telegram_text = TelegramMessageSender.convert_standard_markdown_to_telegram(case["input"])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    for expected in case["expected_contains"]:
                        self.assertIn(expected, telegram_text, 
                                    f"–û–∂–∏–¥–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç '{expected}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                    self._validate_telegram_markdown(telegram_text)
                    
                    logger.info(f"‚úÖ {case['name']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {case['name']}: {e}")
    
    def test_quote_blocks_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–æ–≤ —Ü–∏—Ç–∞—Ç"""
        test_text = """## –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞

> **–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
> - –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
> - –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç
> 
> **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
> –¢–µ–∫—Å—Ç –≤ —Ü–∏—Ç–∞—Ç–µ —Å **–∂–∏—Ä–Ω—ã–º** –∏ *–∫—É—Ä—Å–∏–≤–æ–º*."""
        
        try:
            telegram_text = TelegramMessageSender.convert_standard_markdown_to_telegram(test_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–∏—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            self.assertIn("–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", telegram_text)
            self.assertIn("–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç", telegram_text)
            self.assertIn("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", telegram_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            self._validate_telegram_markdown(telegram_text)
            
            logger.info("‚úÖ –ë–ª–æ–∫–∏ —Ü–∏—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–æ–≤ —Ü–∏—Ç–∞—Ç: {e}")
    
    def test_nested_formatting(self):
        """–¢–µ—Å—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        test_text = """## –°–ª–æ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

**–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞:**
- **–í–∞–∂–Ω—ã–π –ø—É–Ω–∫—Ç:** –û–ø–∏—Å–∞–Ω–∏–µ —Å *–∫—É—Ä—Å–∏–≤–æ–º* –∏ `–∫–æ–¥–æ–º`
- –û–±—ã—á–Ω—ã–π –ø—É–Ω–∫—Ç —Å [—Å—Å—ã–ª–∫–æ–π](https://example.com)
- **–ö—Ä–∏—Ç–∏—á–Ω—ã–π –ø—É–Ω–∫—Ç:** –¢–µ–∫—Å—Ç —Å **–∂–∏—Ä–Ω—ã–º** –∏ _–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º_

> **–¶–∏—Ç–∞—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:**
> - –ü—É–Ω–∫—Ç –≤ —Ü–∏—Ç–∞—Ç–µ
> - –ï—â–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç —Å **–∂–∏—Ä–Ω—ã–º** —Ç–µ–∫—Å—Ç–æ–º"""
        
        try:
            telegram_text = TelegramMessageSender.convert_standard_markdown_to_telegram(test_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
            self.assertIn("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞", telegram_text)
            self.assertIn("–í–∞–∂–Ω—ã–π –ø—É–Ω–∫—Ç", telegram_text)
            self.assertIn("–ö—Ä–∏—Ç–∏—á–Ω—ã–π –ø—É–Ω–∫—Ç", telegram_text)
            self.assertIn("–¶–∏—Ç–∞—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", telegram_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            self._validate_telegram_markdown(telegram_text)
            
            logger.info("‚úÖ –í–ª–æ–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def test_fallback_mechanism(self):
        """–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ fallback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
        problematic_text = "–¢–µ–∫—Å—Ç —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: * [ ] ( ) ~ ` > # + - = | { } . !"
        
        try:
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å fallback
            telegram_text = TelegramMessageSender.convert_standard_markdown_to_telegram(problematic_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            self.assertIsNotNone(telegram_text)
            self.assertGreater(len(telegram_text), 0)
            
            logger.info("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            self.fail(f"Fallback –º–µ—Ö–∞–Ω–∏–∑–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    def test_content_type_standard_markdown(self):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TextContentType.STANDARD_MARKDOWN"""
        test_text = """## –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ Markdown

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ *–∫—É—Ä—Å–∏–≤*

- –°–ø–∏—Å–æ–∫
- –≠–ª–µ–º–µ–Ω—Ç—ã

[–°—Å—ã–ª–∫–∞](https://example.com)"""
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ safe_send_message
            formatted_text = self._simulate_safe_send_message_processing(
                test_text, TextContentType.STANDARD_MARKDOWN
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            self.assertIsNotNone(formatted_text)
            self.assertGreater(len(formatted_text), 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            self._validate_telegram_markdown(formatted_text)
            
            logger.info("‚úÖ TextContentType.STANDARD_MARKDOWN —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TextContentType.STANDARD_MARKDOWN: {e}")
    
    def _convert_to_standard_markdown(self, text: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown"""
        # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown
        import re
        
        # –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = text.replace('\\*', '*')
        text = text.replace('\\_', '_')
        text = text.replace('\\[', '[')
        text = text.replace('\\]', ']')
        text = text.replace('\\(', '(')
        text = text.replace('\\)', ')')
        text = text.replace('\\~', '~')
        text = text.replace('\\`', '`')
        text = text.replace('\\>', '>')
        text = text.replace('\\#', '#')
        text = text.replace('\\+', '+')
        text = text.replace('\\-', '-')
        text = text.replace('\\=', '=')
        text = text.replace('\\|', '|')
        text = text.replace('\\{', '{')
        text = text.replace('\\}', '}')
        text = text.replace('\\.', '.')
        text = text.replace('\\!', '!')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Telegram MarkdownV2 –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown
        # *text* -> **text** (bold)
        text = re.sub(r'\*([^*]+)\*', r'**\1**', text)
        
        # _text_ -> *text* (italic)
        text = re.sub(r'_([^_]+)_', r'*\1*', text)
        
        return text
    
    def _validate_telegram_markdown(self, text: str) -> None:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Telegram MarkdownV2 —Ç–µ–∫—Å—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
        asterisk_count = text.count('*')
        if asterisk_count % 2 != 0:
            self.fail(f"–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ bold —Ç–µ–≥–∏: {asterisk_count} –∑–≤–µ–∑–¥–æ—á–µ–∫")
        
        underscore_count = text.count('_')
        if underscore_count % 2 != 0:
            self.fail(f"–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ italic —Ç–µ–≥–∏: {underscore_count} –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π")
        
        backtick_count = text.count('`')
        if backtick_count % 2 != 0:
            self.fail(f"–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ code —Ç–µ–≥–∏: {backtick_count} backticks")
    
    def _simulate_safe_send_message_processing(self, text: str, content_type: TextContentType) -> str:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ safe_send_message"""
        if content_type == TextContentType.STANDARD_MARKDOWN:
            return TelegramMessageSender.convert_standard_markdown_to_telegram(text)
        elif content_type == TextContentType.FORMATTED:
            return TelegramFormatter.smart_escape_markdown_v2(text)
        else:
            return text

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2)
