"""
–ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
from abc import ABC, abstractmethod
from typing import List, Dict, Optional, Any
import logging
import asyncio
from datetime import datetime

logger = logging.getLogger(__name__)

class BaseAIProvider(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            config: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        self.config = config
        self.logger = logging.getLogger(self.__class__.__name__)
        self.name = self.get_name()
        self.is_initialized = False
        self.llm_logger = None
    
    @abstractmethod
    async def summarize_chat(self, messages: List[Dict], chat_context: Optional[Dict] = None) -> str:
        """
        –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            chat_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        """
        pass
    
    @abstractmethod
    async def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        pass
    
    @abstractmethod
    async def generate_response(self, prompt: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        pass
    
    @abstractmethod
    def get_provider_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        """
        pass
    
    @abstractmethod
    def validate_config(self) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
        """
        pass
    
    def get_name(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        """
        return self.__class__.__name__.replace('Provider', '').lower()
    
    def get_display_name(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        name_mapping = {
            'gigachat': 'GigaChat',
            'chatgpt': 'ChatGPT',
            'openrouter': 'OpenRouter',
            'gemini': 'Gemini',
            'ollama': 'Ollama (–õ–æ–∫–∞–ª—å–Ω–∞—è)'
        }
        return name_mapping.get(self.name, self.name.title())
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            if not self.validate_config():
                self.logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {self.name}")
                return False
            
            if not await self.is_available():
                self.logger.error(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {self.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            self.is_initialized = True
            self.logger.info(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {self.name} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {self.name}: {e}")
            return False
    
    def format_messages_for_analysis(self, messages: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        if not messages:
            return ""
        
        formatted_lines = []
        for msg in messages:
            time_str = msg.get('time', '??:??')
            sender = msg.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            text = msg.get('text', '')
            
            if text.strip():
                line = f"[{time_str}] {sender}: {text}"
                formatted_lines.append(line)
        
        full_text = "\n".join(formatted_lines)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        max_length = 8000
        if len(full_text) > max_length:
            full_text = full_text[:max_length] + "\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)"
        
        return full_text
    
    def optimize_text(self, messages: List[Dict]) -> List[Dict]:
        """
        –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        import re
        optimized_messages = []
        
        for msg in messages:
            text = msg.get('text', '').strip()
            if not text:
                continue
                
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
            text = re.sub(r'\s+', ' ', text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 200:
                text = text[:200] + "..."
            
            sender_name = msg.get('sender_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            time = msg.get('message_time', 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if time:
                try:
                    from datetime import datetime
                    dt = datetime.fromtimestamp(time / 1000)
                    time_str = dt.strftime('%H:%M')
                except (ValueError, OSError):
                    time_str = "??:??"
            else:
                time_str = "??:??"
            
            optimized_messages.append({
                'time': time_str,
                'sender': sender_name,
                'text': text
            })
        
        return optimized_messages
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return f"{self.get_display_name()} Provider"
    
    def set_llm_logger(self, llm_logger):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å LLM
        
        Args:
            llm_logger: –≠–∫–∑–µ–º–ø–ª—è—Ä LLMLogger
        """
        self.llm_logger = llm_logger
        self.logger.debug(f"üìù LLM Logger —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {self.name}")
    
    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return f"{self.__class__.__name__}(name='{self.name}', initialized={self.is_initialized})"
