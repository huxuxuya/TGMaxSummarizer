"""
–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
from typing import Dict, List, Optional, Any
import logging
from .base_provider import BaseAIProvider

logger = logging.getLogger(__name__)

class ProviderFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    
    # –†–µ–µ—Å—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    _providers: Dict[str, type] = {}
    
    @classmethod
    def register_provider(cls, provider_type: str, provider_class: type):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'gigachat')
            provider_class: –ö–ª–∞—Å—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        """
        if not issubclass(provider_class, BaseAIProvider):
            raise ValueError(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_class} –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseAIProvider")
        
        cls._providers[provider_type.lower()] = provider_class
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_type}")
    
    @classmethod
    def create_provider(cls, provider_type: str, config: Dict[str, Any]) -> Optional[BaseAIProvider]:
        """
        –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ None –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        provider_type = provider_type.lower()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.debug(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_type}, config type: {type(config)}, config: {config}")
        
        if provider_type not in cls._providers:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_type}")
            return None
        
        try:
            provider_class = cls._providers[provider_type]
            provider = provider_class(config)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_type}")
            return provider
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_type}: {e}")
            logger.error(f"üîç –¢–∏–ø config: {type(config)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {config}")
            return None
    
    @classmethod
    def get_available_providers(cls) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        return list(cls._providers.keys())
    
    @classmethod
    async def validate_all_providers(cls, config: Dict[str, Any]) -> Dict[str, bool]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        results = {}
        
        for provider_type in cls._providers:
            try:
                provider = cls.create_provider(provider_type, config)
                if provider:
                    results[provider_type] = await provider.is_available()
                else:
                    results[provider_type] = False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_type}: {e}")
                results[provider_type] = False
        
        return results
    
    @classmethod
    def get_provider_info(cls, provider_type: str, config: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –∏–ª–∏ None
        """
        provider = cls.create_provider(provider_type, config)
        if provider:
            return provider.get_provider_info()
        return None
    
    @classmethod
    def get_all_providers_info(cls, config: Dict[str, Any]) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
        """
        info = {}
        
        for provider_type in cls._providers:
            provider_info = cls.get_provider_info(provider_type, config)
            if provider_info:
                info[provider_type] = provider_info
        
        return info
    
    @classmethod
    async def get_best_available_provider(cls, config: Dict[str, Any], preferred_provider: Optional[str] = None) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            preferred_provider: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            
        Returns:
            –¢–∏–ø –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ None
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if preferred_provider:
            provider = cls.create_provider(preferred_provider, config)
            if provider and await provider.is_available():
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {preferred_provider}")
                return preferred_provider
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        validation_results = await cls.validate_all_providers(config)
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        for provider_type, is_available in validation_results.items():
            if is_available:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_type}")
                return provider_type
        
        logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        return None
    
    @classmethod
    def is_provider_registered(cls, provider_type: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            provider_type: –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, False –∏–Ω–∞—á–µ
        """
        return provider_type.lower() in cls._providers
    
    @classmethod
    def get_registered_providers_count(cls) -> int:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        return len(cls._providers)
    
    @classmethod
    def clear_registry(cls):
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        cls._providers.clear()
        logger.info("üßπ –†–µ–µ—Å—Ç—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω")
