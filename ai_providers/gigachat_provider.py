"""
GigaChat AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤
"""
import base64
import requests
import urllib3
from typing import List, Dict, Optional, Any
from .base_provider import BaseAIProvider

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class GigaChatProvider(BaseAIProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat API"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.api_key = config.get('GIGACHAT_API_KEY', '')
        self.base_url = "https://gigachat.devices.sberbank.ru/api/v1"
        self.auth_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        self.access_token = None
        self.token_expires_at = None
    
    async def summarize_chat(self, messages: List[Dict], chat_context: Optional[Dict] = None) -> str:
        """
        –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é GigaChat
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            chat_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            self.logger.info("üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è GigaChat...")
            optimized_messages = self.optimize_text(messages)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            formatted_text = self.format_messages_for_analysis(optimized_messages)
            
            self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è GigaChat:")
            self.logger.info(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            self.logger.info(f"   –ü–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(optimized_messages)}")
            self.logger.info(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –í—ã–∑—ã–≤–∞–µ–º GigaChat API
            self.logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat...")
            summary = await self._call_gigachat_api(formatted_text)
            
            if summary:
                self.logger.info("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç GigaChat")
                return summary
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ –æ—Ç GigaChat")
                return "‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GigaChat"
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
    
    async def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GigaChat
        
        Returns:
            True –µ—Å–ª–∏ GigaChat –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if not self.validate_config():
            return False
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            token = await self._get_access_token()
            return token is not None
        except Exception as e:
            self.logger.error(f"‚ùå GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def generate_response(self, prompt: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            self.logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GigaChat –Ω–∞ –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            token = await self._get_access_token()
            if not token:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ GigaChat")
                return None
            
            # –í—ã–∑—ã–≤–∞–µ–º GigaChat API
            response = await self._call_gigachat_api(prompt)
            
            if response:
                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GigaChat –¥–ª–∏–Ω–æ–π {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                return response
            else:
                self.logger.warning("‚ö†Ô∏è GigaChat –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GigaChat: {e}")
            return None
    
    def get_provider_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ GigaChat
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        """
        return {
            'name': 'GigaChat',
            'display_name': 'GigaChat',
            'description': 'Sberbank GigaChat AI –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤',
            'version': 'latest',
            'max_tokens': 1000,
            'supports_streaming': False,
            'api_endpoint': self.base_url,
            'provider_type': 'gigachat'
        }
    
    def validate_config(self) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GigaChat
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if not self.api_key or self.api_key == 'your_gigachat_key':
            self.logger.error("‚ùå GigaChat API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        if len(self.api_key) < 10:
            self.logger.error("‚ùå GigaChat API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False
        
        return True
    
    async def _get_access_token(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å access token –¥–ª—è GigaChat API
        
        Returns:
            Access token –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        if self.access_token and self.token_expires_at:
            from datetime import datetime
            if datetime.now() < self.token_expires_at:
                return self.access_token
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        api_key = self.api_key
        if len(api_key) > 50:  # –ï—Å–ª–∏ —ç—Ç–æ base64
            try:
                api_key = base64.b64decode(api_key).decode('utf-8')
            except:
                pass
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è Basic Auth
        auth_string = base64.b64encode(api_key.encode()).decode()
        
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'RqUID': '747035d0-e55d-4b35-82cb-a882800f7121',
            'Authorization': f'Basic {auth_string}'
        }
        
        payload = {
            'scope': 'GIGACHAT_API_PERS'
        }
        
        try:
            self.logger.info("üîë –ü–æ–ª—É—á–∞–µ–º access token –¥–ª—è GigaChat...")
            response = requests.post(
                self.auth_url, 
                headers=headers, 
                data=payload, 
                timeout=30, 
                verify=False
            )
            
            if response.status_code == 200:
                result = response.json()
                if 'access_token' in result:
                    self.access_token = result['access_token']
                    # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç
                    from datetime import datetime, timedelta
                    self.token_expires_at = datetime.now() + timedelta(minutes=25)
                    self.logger.info("‚úÖ Access token –ø–æ–ª—É—á–µ–Ω –¥–ª—è GigaChat")
                    return self.access_token
                else:
                    self.logger.error(f"‚ùå –ù–µ—Ç access_token –≤ –æ—Ç–≤–µ—Ç–µ GigaChat: {result}")
                    return None
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è token GigaChat: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ token GigaChat: {e}")
            return None
    
    async def _call_gigachat_api(self, text: str) -> Optional[str]:
        """
        –í—ã–∑–≤–∞—Ç—å GigaChat API –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º access token
        access_token = await self._get_access_token()
        if not access_token:
            return None
        
        url = f"{self.base_url}/chat/completions"
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json; charset=utf-8"
        }
        
        prompt = f"""–î–µ–π—Å—Ç–≤—É–π —Ç–∞–∫ –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —É—á–∏—Ç–µ–ª—å –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ —ç—Ç–æ —Ç–≤–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è –†–æ–º–∞–Ω–æ–≤–Ω–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —á–∞—Ç, –≤ —á–∞—Ç–µ 45 —á–µ–ª–æ–≤–µ–∫. –í–∫–ª—é—á–∏ –¢–û–õ–¨–ö–û –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π. –°–µ–π—á–∞—Å —É–∂–µ –∫–æ–Ω–µ—Ü –¥–Ω—è –∏ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –≤—Å–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ –∑–∞ –¥–µ–Ω—å, —á—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ –∏ —á—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º.

–ò–ì–ù–û–†–ò–†–£–ô –º–∏–∫—Ä–æ–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:
- –ö—Ç–æ –∫–æ–≥–æ –∑–∞–±–∏—Ä–∞–µ—Ç/–æ—Ç–ø—É—Å–∫–∞–µ—Ç, –Ω–∞–¥–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å, –∂–¥–µ—Ç, –∏–¥–µ—Ç, –∫—Ç–æ –ø—Ä–∏–µ—Ö–∞–ª, –∫—Ç–æ —É–µ—Ö–∞–ª
- –ö—Ç–æ –≥–¥–µ –∂–¥–µ—Ç (—É —à–∫–æ–ª—ã, –¥–æ–º–∞, –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è–º –ª—é–¥–µ–π, –¥–µ—Ç–µ–π –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤—Å—Ç—Ä–µ—á –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
- –£—Ç–æ—á–Ω–µ–Ω–∏—è –±–µ–∑ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π, –ë—ã—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ü—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–Ø —Ç–æ–∂–µ", "–∫—Ç–æ –∏–¥–µ—Ç", "–∑–∞–±–∏—Ä–∞—é" 

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —á—Ç–æ-—Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–≤–æ–¥–∏ –∏—Ö!

–ß–∞—Ç:
{text}

–§–æ—Ä–º–∞—Ç —Ä–µ–∑—é–º–µ:

## üìã –ù–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø(–µ—Å–ª–∏ –µ—Å—Ç—å):
- –ß—Ç–æ –∑–∞ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è, –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¢–æ—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –®—Ç—Ä–∞—Ñ—ã/–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã/–ø–æ–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)

## üö® –†–æ–¥–∏—Ç–µ–ª—è–º(–µ—Å–ª–∏ –µ—Å—Ç—å):
- –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞—Ç—å (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ), –ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É, –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã/—Ñ–æ—Ä–º—ã/—Å–∞–π—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

## ‚ö†Ô∏è –î–µ—Ç—è–º(–µ—Å–ª–∏ –µ—Å—Ç—å):
- –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞—Ç—å (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ), –ö –∫–∞–∫–æ–º—É —Å—Ä–æ–∫—É, –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã/—Ñ–æ—Ä–º—ã/—Å–∞–π—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

–í–ê–ñ–ù–û! –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ —Ç–æ —á—Ç–æ –±—ã–ª–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–∏.
–ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º,–Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–π, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π, –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª, —Å—Å—ã–ª–æ–∫ —Ç–æ –Ω–µ –ø–∏—à–∏ –ø—Ä–æ –Ω–∏—Ö. –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, —Ç–æ –Ω–µ –ø–∏—à–∏ –ø—Ä–æ –Ω–∏—Ö. 
–ü–∏—à–∏ –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—à—å –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–µ—à—å—Å—è –∫–Ω–∏–∂–∫–æ–π "–ü–∏—à–∏ –°–æ–∫—Ä–∞—â–∞–π".
–¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã. –¢–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è. –ë–µ–∑ –≤–æ–¥—ã."""

        data = {
            "model": "GigaChat:latest",
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.7,
            "max_tokens": 1000
        }
        
        try:
            self.logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {url}")
            self.logger.info(f"üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            response = requests.post(url, headers=headers, json=data, timeout=30, verify=False)
            self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç GigaChat: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                self.logger.info(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ GigaChat: {list(result.keys())}")
                
                if 'choices' in result and len(result['choices']) > 0:
                    return result['choices'][0]['message']['content']
                else:
                    self.logger.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat")
                    self.logger.error(f"üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
                    return None
            else:
                self.logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ GigaChat: {response.status_code}")
                self.logger.error(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: {e}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ GigaChat: {e}")
            return None
