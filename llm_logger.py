"""
–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç—ã —Å LLM
"""
import os
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class LLMLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç—ã —Å LLM –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    
    def __init__(self, logs_dir: str = "llm_logs", date: Optional[str] = None, scenario: Optional[str] = None, 
                 test_mode: bool = False, model_name: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            logs_dir: –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "llm_logs")
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞)
            scenario: –°—Ü–µ–Ω–∞—Ä–∏–π (with_reflection, without_reflection, with_cleaning)
            test_mode: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É test_comparison/{model_name}/{scenario}/
            model_name: –ò–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        """
        self.logs_dir = Path(logs_dir)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
        if date:
            self.date = date
        else:
            self.date = datetime.now().strftime("%Y-%m-%d")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        if test_mode and model_name and scenario:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: test_comparison/{model_name}/{scenario}/
            self.scenario_dir = self.logs_dir / "test_comparison" / model_name / scenario
            # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.scenario_dir.exists():
                import shutil
                shutil.rmtree(self.scenario_dir)
            self.scenario_dir.mkdir(parents=True, exist_ok=True)
        elif scenario:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π (–ø–∞–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∂–µ —Å —É—á–µ—Ç–æ–º –º–æ–¥–µ–ª–∏)
            self.scenario = scenario
            self.scenario_dir = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ create_scenario_dir
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
            self.scenario_dir = self.logs_dir / self.date
            self.scenario_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        # date_dir –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ _create_scenario_dir –∫–æ–≥–¥–∞ –ø–∞–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
        if self.scenario_dir is not None:
            self.date_dir = self.scenario_dir
        else:
            self.date_dir = None
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.session_start = datetime.now()
        self.provider_name = None
        self.model_name = None
        self.chat_id = None
        self.user_id = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        self.stage_times = {
            'cleaning': None,
            'summarization': None,
            'reflection': None,
            'improvement': None,
            'classification': None,
            'extraction': None,
            'parent_summary': None
        }
        
        logger.info(f"üìÅ LLM Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.scenario_dir}")
    
    def log_stage_time(self, stage: str, duration: float):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞
        
        Args:
            stage: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ (cleaning, summarization, reflection, improvement)
            duration: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if stage in self.stage_times:
            self.stage_times[stage] = duration
    
    def clear_date_logs(self):
        """Remove all existing log files for this scenario before starting new session"""
        import shutil
        
        if self.scenario_dir.exists():
            logger.info(f"üóëÔ∏è  Clearing old logs for scenario: {self.scenario_dir}")
            shutil.rmtree(self.scenario_dir)
            self.scenario_dir.mkdir(parents=True, exist_ok=True)
            logger.info(f"‚úÖ Old logs cleared, fresh directory created")
    
    def set_session_info(self, provider_name: str, model_name: Optional[str] = None, 
                        chat_id: Optional[str] = None, user_id: Optional[int] = None):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        
        Args:
            provider_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.provider_name = provider_name
        self.model_name = model_name
        self.chat_id = chat_id
        self.user_id = user_id
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —É—á–µ—Ç–æ–º –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        self._create_scenario_dir()
        
        logger.debug(f"üìù –°–µ—Å—Å–∏—è: {provider_name}/{model_name}, —á–∞—Ç: {chat_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    def _create_scenario_dir(self):
        """–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å—Ü–µ–Ω–∞—Ä–∏—è —Å —É—á–µ—Ç–æ–º –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏"""
        if hasattr(self, 'scenario') and self.scenario and self.scenario_dir is None:
            timestamp = datetime.now().strftime("%H-%M-%S")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–∞–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –º–æ–¥–µ–ª–∏
            if self.model_name:
                # –û—á–∏—â–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                safe_model_name = self.model_name.replace(":", "_").replace("/", "_").replace("\\", "_")
                folder_name = f"{self.scenario}_{safe_model_name}_{timestamp}"
            else:
                folder_name = f"{self.scenario}_{timestamp}"
            
            self.scenario_dir = self.logs_dir / self.date / folder_name
            self.scenario_dir.mkdir(parents=True, exist_ok=True)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º date_dir –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self.date_dir = self.scenario_dir
            logger.debug(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {self.scenario_dir}")
    
    def _write_file(self, filename: str, content: str, step_title: str, 
                   additional_info: Optional[Dict[str, Any]] = None):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            step_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–ø–∞
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
            if self.scenario_dir is None:
                self._create_scenario_dir()
            
            file_path = self.scenario_dir / filename
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header_lines = [
                f"=== {step_title} ===",
                f"–î–∞—Ç–∞: {self.date}",
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
            ]
            
            if self.model_name:
                header_lines.append(f"–ú–æ–¥–µ–ª—å: {self.model_name}")
            if self.chat_id:
                header_lines.append(f"–ß–∞—Ç ID: {self.chat_id}")
            if self.user_id:
                header_lines.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {self.user_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if additional_info:
                for key, value in additional_info.items():
                    header_lines.append(f"{key}: {value}")
            
            header_lines.extend(["", content])
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(header_lines))
            
            logger.debug(f"üìÑ –ó–∞–ø–∏—Å–∞–Ω —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
    
    def log_formatted_messages(self, formatted_text: str, message_count: int = 0):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            formatted_text: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            message_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        additional_info = {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π": message_count} if message_count > 0 else None
        self._write_file(
            "04_formatted_messages.txt",
            formatted_text,
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏",
            additional_info
        )
    
    def log_llm_request(self, prompt: str, request_type: str = "summarization"):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ LLM
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
            request_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (summarization, reflection, improvement)
        """
        filename_map = {
            "summarization": "05_summarization_request.txt",
            "reflection": "07_reflection_request.txt", 
            "improvement": "09_improvement_request.txt"
        }
        
        title_map = {
            "summarization": "–ó–∞–ø—Ä–æ—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ LLM",
            "reflection": "–ó–∞–ø—Ä–æ—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –≤ LLM",
            "improvement": "–ó–∞–ø—Ä–æ—Å —É–ª—É—á—à–µ–Ω–∏—è –≤ LLM"
        }
        
        filename = filename_map.get(request_type, "02_llm_request.txt")
        title = title_map.get(request_type, "–ó–∞–ø—Ä–æ—Å –≤ LLM")
        
        additional_info = {
            "–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞": request_type,
            "–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞": f"{len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤"
        }
        
        self._write_file(filename, prompt, title, additional_info)
    
    def log_llm_response(self, response: str, request_type: str = "summarization", response_time: float = None):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç LLM
            request_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (summarization, reflection, improvement)
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        filename_map = {
            "summarization": "06_summarization_response.txt",
            "reflection": "08_reflection_response.txt",
            "improvement": "10_improvement_response.txt"
        }
        
        title_map = {
            "summarization": "–û—Ç–≤–µ—Ç LLM —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π",
            "reflection": "–û—Ç–≤–µ—Ç LLM —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π",
            "improvement": "–û—Ç–≤–µ—Ç LLM —Å —É–ª—É—á—à–µ–Ω–∏–µ–º"
        }
        
        filename = filename_map.get(request_type, "03_llm_response.txt")
        title = title_map.get(request_type, "–û—Ç–≤–µ—Ç –æ—Ç LLM")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        estimated_tokens = len(response) // 4  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω
        
        additional_info = {
            "–¢–∏–ø –æ—Ç–≤–µ—Ç–∞": request_type,
            "–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞": f"{len(response)} —Å–∏–º–≤–æ–ª–æ–≤",
            "–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤": f"~{estimated_tokens}"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if response_time is not None:
            additional_info["–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"] = f"{response_time:.2f} —Å–µ–∫—É–Ω–¥"
            if response_time > 0:
                tokens_per_sec = estimated_tokens / response_time
                additional_info["–°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"] = f"{tokens_per_sec:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫"
        
        self._write_file(filename, response, title, additional_info)
    
    def log_raw_result(self, raw_text: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Args:
            raw_text: –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        additional_info = {"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞": f"{len(raw_text)} —Å–∏–º–≤–æ–ª–æ–≤"}
        self._write_file(
            "11_raw_result.txt",
            raw_text,
            "–°—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏",
            additional_info
        )
    
    def log_formatted_result(self, formatted_text: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Args:
            formatted_text: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        """
        additional_info = {"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞": f"{len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤"}
        self._write_file(
            "12_formatted_result.txt",
            formatted_text,
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram",
            additional_info
        )
    
    def log_session_summary(self, summary_data: Dict[str, Any]):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–µ—Å—Å–∏–∏
        
        Args:
            summary_data: –î–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏
        """
        session_duration = datetime.now() - self.session_start
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        def format_stage_time(stage_name: str, time_seconds: float) -> str:
            if time_seconds is None:
                return "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è"
            return f"‚úÖ {time_seconds:.1f}—Å"
        
        summary_content = f"""=== –°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
–î–∞—Ç–∞: {self.session_start.strftime('%Y-%m-%d')}
–í—Ä–µ–º—è: {self.session_start.strftime('%H:%M:%S')}
–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}
–ú–æ–¥–µ–ª—å: {self.model_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session_duration}

–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration}
–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}
–ú–æ–¥–µ–ª—å: {self.model_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
–ß–∞—Ç ID: {self.chat_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {self.user_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤:
- –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {format_stage_time('–û—á–∏—Å—Ç–∫–∞', self.stage_times.get('cleaning'))}
- –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {format_stage_time('–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è', self.stage_times.get('summarization'))}
- –†–µ—Ñ–ª–µ–∫—Å–∏—è: {format_stage_time('–†–µ—Ñ–ª–µ–∫—Å–∏—è', self.stage_times.get('reflection'))}
- –£–ª—É—á—à–µ–Ω–∏–µ: {format_stage_time('–£–ª—É—á—à–µ–Ω–∏–µ', self.stage_times.get('improvement'))}
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {format_stage_time('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', self.stage_times.get('classification'))}
- –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è: {format_stage_time('–≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è', self.stage_times.get('extraction'))}
- –°–≤–æ–¥–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {format_stage_time('–°–≤–æ–¥–∫–∞', self.stage_times.get('parent_summary'))}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ' if summary_data.get('summary') else '‚ùå'}
- –†–µ—Ñ–ª–µ–∫—Å–∏—è: {'‚úÖ' if summary_data.get('reflection') else '‚ùå'}
- –£–ª—É—á—à–µ–Ω–∏–µ: {'‚úÖ' if summary_data.get('improved') else '‚ùå'}

–§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        for i in range(1, 15):
            filename = f"{i:02d}_*.txt"
            files = list(self.date_dir.glob(filename))
            if files:
                summary_content += f"- {files[0].name}\n"
        
        self._write_file(
            "00_session_summary.txt",
            summary_content,
            "–°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            {"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": str(session_duration)}
        )
    
    def get_logs_path(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ª–æ–≥–∞–º–∏
        
        Returns:
            –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ª–æ–≥–∞–º–∏
        """
        return str(self.scenario_dir)
    
    def cleanup_old_logs(self, days_to_keep: int = 30):
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
        
        Args:
            days_to_keep: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        """
        try:
            from datetime import timedelta
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            
            for date_dir in self.logs_dir.iterdir():
                if date_dir.is_dir():
                    try:
                        dir_date = datetime.strptime(date_dir.name, "%Y-%m-%d")
                        if dir_date < cutoff_date:
                            import shutil
                            shutil.rmtree(date_dir)
                            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {date_dir}")
                    except ValueError:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏
                        continue
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")
    
    def log_cleaning_request(self, request_text: str):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            request_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.date_dir / "02_cleaning_request.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n\n")
                f.write(f"–ó–∞–ø—Ä–æ—Å:\n{request_text}\n")
            
            logger.debug(f"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É: {e}")
    
    def log_cleaning_response(self, response_text: str, response_time: float = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.date_dir / "03_cleaning_response.txt"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            estimated_tokens = len(response_text) // 4
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_tokens}\n")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
                if response_time is not None:
                    f.write(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥\n")
                    if response_time > 0:
                        tokens_per_sec = estimated_tokens / response_time
                        f.write(f"–°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {tokens_per_sec:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫\n")
                
                f.write(f"\n–û—Ç–≤–µ—Ç:\n{response_text}\n")
            
            logger.debug(f"üìù –û—Ç–≤–µ—Ç –Ω–∞ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É: {e}")
    
    def log_input_messages_raw(self, messages: list):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å—ã—Ä—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            import json
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "01_input_messages_raw.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –°—ã—Ä—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n\n")
                f.write(f"JSON –¥–∞–Ω–Ω—ã–µ:\n{json.dumps(messages, ensure_ascii=False, indent=2)}\n")
            
            logger.debug(f"üìù –°—ã—Ä—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—ã—Ä—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def log_filtered_messages_raw(self, messages: list):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            import json
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "04_filtered_messages_raw.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n\n")
                f.write(f"JSON –¥–∞–Ω–Ω—ã–µ:\n{json.dumps(messages, ensure_ascii=False, indent=2)}\n")
            
            logger.debug(f"üìù –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def log_improvement_request(self, request_text: str):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            request_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "09_improvement_request.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n\n")
                f.write(f"–ó–∞–ø—Ä–æ—Å:\n{request_text}\n")
            
            logger.debug(f"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ: {e}")
    
    def log_improvement_response(self, response_text: str, response_time: float = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "10_improvement_response.txt"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            estimated_tokens = len(response_text) // 4
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_tokens}\n")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
                if response_time is not None:
                    f.write(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥\n")
                    if response_time > 0:
                        tokens_per_sec = estimated_tokens / response_time
                        f.write(f"–°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {tokens_per_sec:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫\n")
                
                f.write(f"\n–û—Ç–≤–µ—Ç:\n{response_text}\n")
            
            logger.debug(f"üìù –û—Ç–≤–µ—Ç –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ: {e}")
    
    def log_final_result_raw(self, result):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å—ã—Ä–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Args:
            result: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º)
        """
        try:
            import json
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "11_final_result_raw.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –°—ã—Ä–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result).__name__}\n\n")
                
                if isinstance(result, dict):
                    f.write(f"JSON –¥–∞–Ω–Ω—ã–µ:\n{json.dumps(result, ensure_ascii=False, indent=2)}\n")
                else:
                    f.write(f"–¢–µ–∫—Å—Ç:\n{str(result)}\n")
            
            logger.debug(f"üìù –°—ã—Ä–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—ã—Ä–æ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    def log_telegram_formatted(self, formatted_text: str):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        
        Args:
            formatted_text: –¢–µ–∫—Å—Ç, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "13_telegram_formatted.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n")
                f.write(f"–¢–µ–∫—Å—Ç:\n{formatted_text}\n")
            
            logger.debug(f"üìù –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
    
    # –ú–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    
    def log_classification_request(self, request_text: str):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            request_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "01_classification_request.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n\n")
                f.write(f"–ó–∞–ø—Ä–æ—Å:\n{request_text}\n")
            
            logger.debug(f"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é: {e}")
    
    def log_classification_response(self, response_text: str, response_time: float = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "02_classification_response.txt"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            estimated_tokens = len(response_text) // 4
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_tokens}\n")
                
                if response_time is not None:
                    f.write(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥\n")
                    if response_time > 0:
                        tokens_per_sec = estimated_tokens / response_time
                        f.write(f"–°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {tokens_per_sec:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫\n")
                
                f.write(f"\n–û—Ç–≤–µ—Ç:\n{response_text}\n")
            
            logger.debug(f"üìù –û—Ç–≤–µ—Ç –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é: {e}")
    
    def log_extraction_request(self, request_text: str):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é —Å–ª–æ—Ç–æ–≤
        
        Args:
            request_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "03_extraction_request.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é —Å–ª–æ—Ç–æ–≤ ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n\n")
                f.write(f"–ó–∞–ø—Ä–æ—Å:\n{request_text}\n")
            
            logger.debug(f"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é: {e}")
    
    def log_extraction_response(self, response_text: str, response_time: float = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏
        
        Args:
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–µ–π
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "04_extraction_response.txt"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            estimated_tokens = len(response_text) // 4
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏ ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_tokens}\n")
                
                if response_time is not None:
                    f.write(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥\n")
                    if response_time > 0:
                        tokens_per_sec = estimated_tokens / response_time
                        f.write(f"–°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {tokens_per_sec:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫\n")
                
                f.write(f"\n–û—Ç–≤–µ—Ç:\n{response_text}\n")
            
            logger.debug(f"üìù –û—Ç–≤–µ—Ç –Ω–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—é: {e}")
    
    def log_parent_summary_request(self, request_text: str):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        
        Args:
            request_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤–æ–¥–∫—É
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "05_parent_summary_request.txt"
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n\n")
                f.write(f"–ó–∞–ø—Ä–æ—Å:\n{request_text}\n")
            
            logger.debug(f"üìù –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
    
    def log_parent_summary_response(self, response_text: str, response_time: float = None):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        
        Args:
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ —Å–≤–æ–¥–∫–æ–π
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_file = self.scenario_dir / "06_parent_summary_response.txt"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            estimated_tokens = len(response_text) // 4
            
            with open(log_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π ===\n")
                f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
                f.write(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}\n")
                f.write(f"–ú–æ–¥–µ–ª—å: {self.model_name}\n")
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_id}\n")
                f.write(f"–ß–∞—Ç: {self.chat_id}\n")
                f.write(f"–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_tokens}\n")
                
                if response_time is not None:
                    f.write(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫—É–Ω–¥\n")
                    if response_time > 0:
                        tokens_per_sec = estimated_tokens / response_time
                        f.write(f"–°–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {tokens_per_sec:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫\n")
                
                f.write(f"\n–û—Ç–≤–µ—Ç:\n{response_text}\n")
            
            logger.debug(f"üìù –û—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞–ø–∏—Å–∞–Ω: {log_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–¥–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {e}")