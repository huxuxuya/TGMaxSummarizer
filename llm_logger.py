"""
–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç—ã —Å LLM
"""
import os
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)

class LLMLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç—ã —Å LLM –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    
    def __init__(self, logs_dir: str = "llm_logs", date: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        
        Args:
            logs_dir: –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "llm_logs")
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞)
        """
        self.logs_dir = Path(logs_dir)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
        if date:
            self.date = date
        else:
            self.date = datetime.now().strftime("%Y-%m-%d")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        self.date_dir = self.logs_dir / self.date
        self.date_dir.mkdir(parents=True, exist_ok=True)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.session_start = datetime.now()
        self.provider_name = None
        self.model_name = None
        self.chat_id = None
        self.user_id = None
        
        logger.info(f"üìÅ LLM Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.date_dir}")
    
    def set_session_info(self, provider_name: str, model_name: Optional[str] = None, 
                        chat_id: Optional[str] = None, user_id: Optional[int] = None):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        
        Args:
            provider_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.provider_name = provider_name
        self.model_name = model_name
        self.chat_id = chat_id
        self.user_id = user_id
        logger.debug(f"üìù –°–µ—Å—Å–∏—è: {provider_name}/{model_name}, —á–∞—Ç: {chat_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    
    def _write_file(self, filename: str, content: str, step_title: str, 
                   additional_info: Optional[Dict[str, Any]] = None):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            step_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–ø–∞
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        try:
            file_path = self.date_dir / filename
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header_lines = [
                f"=== {step_title} ===",
                f"–î–∞—Ç–∞: {self.date}",
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
            ]
            
            if self.model_name:
                header_lines.append(f"–ú–æ–¥–µ–ª—å: {self.model_name}")
            if self.chat_id:
                header_lines.append(f"–ß–∞—Ç ID: {self.chat_id}")
            if self.user_id:
                header_lines.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {self.user_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if additional_info:
                for key, value in additional_info.items():
                    header_lines.append(f"{key}: {value}")
            
            header_lines.extend(["", content])
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(header_lines))
            
            logger.debug(f"üìÑ –ó–∞–ø–∏—Å–∞–Ω —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
    
    def log_formatted_messages(self, formatted_text: str, message_count: int = 0):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            formatted_text: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            message_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        additional_info = {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π": message_count} if message_count > 0 else None
        self._write_file(
            "01_formatted_messages.txt",
            formatted_text,
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏",
            additional_info
        )
    
    def log_llm_request(self, prompt: str, request_type: str = "summarization"):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ LLM
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
            request_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (summarization, reflection, improvement)
        """
        filename_map = {
            "summarization": "02_summarization_request.txt",
            "reflection": "04_reflection_request.txt", 
            "improvement": "06_improvement_request.txt"
        }
        
        title_map = {
            "summarization": "–ó–∞–ø—Ä–æ—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ LLM",
            "reflection": "–ó–∞–ø—Ä–æ—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –≤ LLM",
            "improvement": "–ó–∞–ø—Ä–æ—Å —É–ª—É—á—à–µ–Ω–∏—è –≤ LLM"
        }
        
        filename = filename_map.get(request_type, "02_llm_request.txt")
        title = title_map.get(request_type, "–ó–∞–ø—Ä–æ—Å –≤ LLM")
        
        additional_info = {
            "–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞": request_type,
            "–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞": f"{len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤"
        }
        
        self._write_file(filename, prompt, title, additional_info)
    
    def log_llm_response(self, response: str, request_type: str = "summarization"):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç LLM
            request_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (summarization, reflection, improvement)
        """
        filename_map = {
            "summarization": "03_summarization_response.txt",
            "reflection": "05_reflection_response.txt",
            "improvement": "07_improvement_response.txt"
        }
        
        title_map = {
            "summarization": "–û—Ç–≤–µ—Ç LLM —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π",
            "reflection": "–û—Ç–≤–µ—Ç LLM —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π",
            "improvement": "–û—Ç–≤–µ—Ç LLM —Å —É–ª—É—á—à–µ–Ω–∏–µ–º"
        }
        
        filename = filename_map.get(request_type, "03_llm_response.txt")
        title = title_map.get(request_type, "–û—Ç–≤–µ—Ç –æ—Ç LLM")
        
        additional_info = {
            "–¢–∏–ø –æ—Ç–≤–µ—Ç–∞": request_type,
            "–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞": f"{len(response)} —Å–∏–º–≤–æ–ª–æ–≤"
        }
        
        self._write_file(filename, response, title, additional_info)
    
    def log_raw_result(self, raw_text: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Args:
            raw_text: –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        additional_info = {"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞": f"{len(raw_text)} —Å–∏–º–≤–æ–ª–æ–≤"}
        self._write_file(
            "08_raw_result.txt",
            raw_text,
            "–°—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏",
            additional_info
        )
    
    def log_formatted_result(self, formatted_text: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        Args:
            formatted_text: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        """
        additional_info = {"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞": f"{len(formatted_text)} —Å–∏–º–≤–æ–ª–æ–≤"}
        self._write_file(
            "09_formatted_result.txt",
            formatted_text,
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Telegram",
            additional_info
        )
    
    def log_session_summary(self, summary_data: Dict[str, Any]):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —Å–µ—Å—Å–∏–∏
        
        Args:
            summary_data: –î–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏
        """
        session_duration = datetime.now() - self.session_start
        
        summary_content = f"""–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {session_duration}
–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider_name}
–ú–æ–¥–µ–ª—å: {self.model_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
–ß–∞—Ç ID: {self.chat_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {self.user_id or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ' if summary_data.get('summary') else '‚ùå'}
- –†–µ—Ñ–ª–µ–∫—Å–∏—è: {'‚úÖ' if summary_data.get('reflection') else '‚ùå'}
- –£–ª—É—á—à–µ–Ω–∏–µ: {'‚úÖ' if summary_data.get('improved') else '‚ùå'}

–§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        for i in range(1, 10):
            filename = f"{i:02d}_*.txt"
            files = list(self.date_dir.glob(filename))
            if files:
                summary_content += f"- {files[0].name}\n"
        
        self._write_file(
            "00_session_summary.txt",
            summary_content,
            "–°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            {"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": str(session_duration)}
        )
    
    def get_logs_path(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ª–æ–≥–∞–º–∏
        
        Returns:
            –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ª–æ–≥–∞–º–∏
        """
        return str(self.date_dir)
    
    def cleanup_old_logs(self, days_to_keep: int = 30):
        """
        –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
        
        Args:
            days_to_keep: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        """
        try:
            from datetime import timedelta
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            
            for date_dir in self.logs_dir.iterdir():
                if date_dir.is_dir():
                    try:
                        dir_date = datetime.strptime(date_dir.name, "%Y-%m-%d")
                        if dir_date < cutoff_date:
                            import shutil
                            shutil.rmtree(date_dir)
                            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {date_dir}")
                    except ValueError:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏–º–µ–Ω–∏
                        continue
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")
