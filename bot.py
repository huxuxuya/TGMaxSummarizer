import asyncio
import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

from core.app_context import get_app_context
from domains.handlers_manager import HandlersManager
from shared.constants import CallbackActions
from shared.validators import setup_development_validation

def setup_logging(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        format=config['bot'].log_format,
        level=getattr(logging, config['bot'].log_level),
        datefmt="%H:%M:%S"
    )

class VKMaxTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.ctx = get_app_context()
        self.handlers_manager = HandlersManager()
        self.application = None
        
        setup_logging(self.ctx.config)
        self.logger = logging.getLogger(__name__)
    
    def create_application(self):
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram"""
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
        self.application = Application.builder().token(
            self.ctx.config['bot'].telegram_bot_token
        ).connection_pool_size(8).read_timeout(30).write_timeout(30).connect_timeout(10).build()
        
        self.application.add_handler(CommandHandler("start", self.handlers_manager.start_handler))
        self.application.add_handler(CallbackQueryHandler(self.handlers_manager.callback_query_handler))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers_manager.message_handler))
        self.application.add_handler(MessageHandler(filters.PHOTO, self.handlers_manager.photo_handler))
        
        self.application.add_error_handler(self.error_handler)
        
        self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def error_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        if not self.application:
            self.create_application()
        
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        try:
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            self.logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            try:
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            if self.application:
                try:
                    await self.application.stop()
                    await self.application.shutdown()
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        if self.application:
            await self.application.stop()
            await self.application.shutdown()
        
        # Cleanup app context
        self.ctx.shutdown()
        self.logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger = logging.getLogger(__name__)
    
    # Setup development validation if enabled
    setup_development_validation()
    
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK MAX Telegram Bot")
    
    ctx = get_app_context()
    if ctx.config['bot'].telegram_bot_token == "your_bot_token":
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        return
    
    if ctx.config['bot'].vk_max_token == "your_vk_max_token":
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω VK_MAX_TOKEN")
        return
    
    if not ctx.config['ai'].providers['gigachat'].api_key or ctx.config['ai'].providers['gigachat'].api_key == "your_gigachat_key":
        logger.warning("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GIGACHAT_API_KEY - –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    bot = VKMaxTelegramBot()
    
    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main())
