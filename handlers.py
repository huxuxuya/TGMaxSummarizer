"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram_formatter import TelegramFormatter
from telegram_message_sender import TelegramMessageSender

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π TelegramMessageSender –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

from database import DatabaseManager
from vk_integration import VKMaxIntegration
from chat_analyzer import ChatAnalyzer
from keyboards import *
from utils import shorten_callback_data

logger = logging.getLogger(__name__)

class BotHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self, db_manager: DatabaseManager, vk_integration: VKMaxIntegration, chat_analyzer: ChatAnalyzer):
        self.db = db_manager
        self.vk = vk_integration
        self.analyzer = chat_analyzer
    
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        self.db.add_user(user.id, user.username)
        
        if chat.type == "private":
            # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
            await self._handle_private_start(update, context)
        else:
            # –ì—Ä—É–ø–ø–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await self._handle_group_start(update, context)
    
    async def _handle_private_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_groups = self.db.get_user_groups(user.id)
        
        if not user_groups:
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return
        
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —á–∞—Ç–∞–º–∏
        if len(user_groups) == 1:
            group_id = user_groups[0]['group_id']
            context.user_data['selected_group_id'] = group_id
            
            keyboard = chat_management_keyboard()
            await update.message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {user_groups[0]['group_name']}\n\n"
                f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX",
                reply_markup=keyboard
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
            keyboard = group_selection_keyboard(user_groups)
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
                reply_markup=keyboard
            )
    
    async def _handle_group_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –≥—Ä—É–ø–ø–µ"""
        chat = update.effective_chat
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
        self.db.add_group(chat.id, chat.title)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∞
        self.db.add_group_user(chat.id, user.id, is_admin=True)
        
        await update.message.reply_text(
            f"‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{chat.title}'\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Ç–∞–º–∏ VK MAX —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
        )
    
    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "manage_chats":
            await self._handle_manage_chats(update, context)
        elif data == "statistics":
            await self._handle_statistics(update, context)
        elif data == "settings":
            await self._handle_settings(update, context)
        elif data.startswith("select_group_"):
            group_id = int(data.split("_")[2])
            await self._handle_group_selection(update, context, group_id)
        elif data == "add_chat":
            await self._handle_add_chat(update, context)
        elif data == "select_from_list":
            await self._handle_select_from_list(update, context)
        elif data == "enter_chat_id":
            await self._handle_enter_chat_id(update, context)
        elif data.startswith("select_available_chat_"):
            chat_id = data.split("_")[3]
            await self._handle_select_available_chat(update, context, chat_id)
        elif data.startswith("chats_page_"):
            page = int(data.split("_")[2])
            await self._handle_chats_page(update, context, page)
        elif data == "search_chat_by_id":
            await self._handle_search_chat_by_id(update, context)
        elif data.startswith("select_date_"):
            date = data.split("_")[2]
            await self._handle_date_selection(update, context, date)
        elif data.startswith("generate_new_summary_"):
            chat_id = data.split("_")[3]
            date = data.split("_")[4]
            await self._handle_generate_new_summary(update, context, chat_id, date)
        elif data.startswith("improve_summary_"):
            chat_id = data.split("_")[2]
            date = data.split("_")[3]
            await self._handle_improve_summary(update, context, chat_id, date)
        elif data.startswith("view_existing_summary_"):
            chat_id = data.split("_")[3]
            date = data.split("_")[4]
            await self._handle_view_existing_summary(update, context, chat_id, date)
        elif data == "list_chats":
            await self._handle_list_chats(update, context)
        elif data.startswith("select_chat_"):
            chat_id = data.split("_")[2]
            await self._handle_chat_selection(update, context, chat_id)
        elif data.startswith("chat_stats_"):
            chat_id = data.split("_")[2]
            await self._handle_chat_stats(update, context, chat_id)
        elif data.startswith("load_messages_"):
            chat_id = data.split("_")[2]
            await self._handle_load_messages(update, context, chat_id)
        elif data.startswith("load_new_messages_"):
            chat_id = data.split("_")[3]
            await self._load_messages_worker(update, context, chat_id, load_only_new=True)
        elif data.startswith("load_all_messages_"):
            chat_id = data.split("_")[3]
            await self._load_messages_worker(update, context, chat_id, load_only_new=False)
        elif data.startswith("check_summary_"):
            chat_id = data.split("_")[2]
            await self._handle_check_summary(update, context, chat_id)
        elif data.startswith("publish_summary_"):
            parts = data.split("_")
            if len(parts) == 3:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –¥–∞—Ç—ã
                chat_id = parts[2]
                await self._handle_publish_summary(update, context, chat_id)
            elif len(parts) == 4:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞—Ç–æ–π
                chat_id = parts[2]
                date = parts[3]
                await self._handle_publish_summary_with_date(update, context, chat_id, date)
        elif data == "back_to_main":
            await self._handle_back_to_main(update, context)
        elif data == "change_group":
            await self._handle_change_group(update, context)
        elif data == "back_to_manage_chats":
            await self._handle_back_to_manage_chats(update, context)
        elif data == "back_to_chat_settings":
            chat_id = context.user_data.get('selected_chat_id')
            if chat_id:
                await self._handle_chat_selection(update, context, chat_id)
            else:
                await self._handle_back_to_manage_chats(update, context)
        elif data == "back":
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–∞—Ç–∞
            chat_id = context.user_data.get('selected_chat_id')
            if chat_id:
                await self._handle_chat_selection(update, context, chat_id)
            else:
                await self._handle_back_to_manage_chats(update, context)
        elif data == "cancel":
            await self._handle_cancel(update, context)
        # AI Provider handlers
        elif data == "select_ai_provider":
            await self.ai_provider_selection_handler(update, context)
        elif data.startswith("select_provider:"):
            await self.select_provider_handler(update, context)
        elif data == "ai_provider_status":
            await self.ai_provider_status_handler(update, context)
        elif data == "check_providers_availability":
            await self.check_providers_availability_handler(update, context)
        elif data == "ai_provider_defaults":
            await self.ai_provider_defaults_handler(update, context)
        elif data.startswith("set_default_provider:"):
            await self.set_default_provider_handler(update, context)
        elif data == "ai_provider_settings":
            await self.ai_provider_defaults_handler(update, context)
        # OpenRouter Model handlers
        elif data == "openrouter_model_selection":
            await self.openrouter_model_selection_handler(update, context)
        elif data == "top5_models_selection":
            await self.top5_models_selection_handler(update, context)
        elif data.startswith("select_top5_model:"):
            model_id = data.split(":", 1)[1]
            await self.top5_model_info_handler(update, context, model_id)
        elif data.startswith("confirm_top5_model:"):
            model_id = data.split(":", 1)[1]
            await self.confirm_top5_model_handler(update, context, model_id)
        elif data.startswith("select_openrouter_model:"):
            await self.select_openrouter_model_handler(update, context)
        elif data.startswith("confirm_openrouter_model:"):
            await self.confirm_openrouter_model_handler(update, context)
        # Model selection for analysis handlers
        elif data == "select_model_for_analysis":
            await self.select_model_for_analysis_handler(update, context)
        elif data.startswith("analyze_with_provider:"):
            await self.analyze_with_provider_handler(update, context)
        elif data.startswith("analyze_with_openrouter_model:"):
            await self.analyze_with_openrouter_model_handler(update, context)
        elif data.startswith("analyze_with_openrouter_model_index:"):
            await self.analyze_with_openrouter_model_index_handler(update, context)
    
    async def _handle_manage_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
        group_id = context.user_data.get('selected_group_id')
        if not group_id:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
        chats = self.db.get_group_vk_chats(group_id)
        
        if chats:
            # –ï—Å–ª–∏ —á–∞—Ç—ã –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
            keyboard = chat_list_keyboard(chats)
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = chat_management_keyboard()
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX\n\n"
                "–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç:",
                reply_markup=keyboard
            )
    
    async def _handle_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=back_keyboard()
        )
    
    async def _handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=back_keyboard()
        )
    
    async def _handle_group_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, group_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selected_group_id'] = group_id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_groups = self.db.get_user_groups(update.effective_user.id)
        group_name = "–ì—Ä—É–ø–ø–∞"
        for group in user_groups:
            if group['group_id'] == group_id:
                group_name = group['group_name']
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
        chats = self.db.get_group_vk_chats(group_id)
        
        if chats:
            # –ï—Å–ª–∏ —á–∞—Ç—ã –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if len(chats) == 1:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–∞—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
                chat_id = chats[0]['chat_id']
                chat_name = chats[0].get('chat_name', f'–ß–∞—Ç {chat_id}')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–±–æ—Ä–µ
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}\n\n"
                    f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∞—Ç: {chat_name}\n"
                    f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
                    reply_markup=None
                )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                await asyncio.sleep(1)
                
                await self._handle_chat_selection(update, context, chat_id)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
                keyboard = chat_list_keyboard(chats)
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}\n\n"
                    f"üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:",
                    reply_markup=keyboard
                )
        else:
            # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = chat_management_keyboard()
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}\n\n"
                f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX\n\n"
                f"–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç:",
                reply_markup=keyboard
            )
    
    async def _handle_add_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        keyboard = chat_add_method_keyboard()
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç VK MAX\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞:",
            reply_markup=keyboard
        )
    
    async def _handle_select_from_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=cancel_keyboard()
        )
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX
            if not await self.vk.connect():
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK MAX",
                    reply_markup=back_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
            available_chats = await self.vk.get_available_chats()
            await self.vk.disconnect()
            
            if not available_chats:
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID —á–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é.",
                    reply_markup=chat_add_method_keyboard()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['available_chats'] = available_chats
            context.user_data['chats_page'] = 0
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            keyboard = available_chats_keyboard(available_chats, 0)
            total_chats = len(available_chats)
            
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã VK MAX ({total_chats} —á–∞—Ç–æ–≤):\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=chat_add_method_keyboard()
            )
    
    async def _handle_enter_chat_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é"""
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üîç –í–≤–æ–¥ ID —á–∞—Ç–∞ VK MAX\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ VK MAX:",
            reply_markup=cancel_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID —á–∞—Ç–∞
        context.user_data['waiting_for_chat_id'] = True
    
    async def _handle_select_available_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        user = update.effective_user
        group_id = context.user_data.get('selected_group_id')
        
        if not group_id:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ
            available_chats = context.user_data.get('available_chats', [])
            selected_chat = None
            
            for chat in available_chats:
                if str(chat['id']) == str(chat_id):
                    selected_chat = chat
                    break
            
            if not selected_chat:
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
                    reply_markup=back_keyboard()
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î
            self.db.add_vk_chat(chat_id, selected_chat['title'], selected_chat['type'])
            self.db.add_group_vk_chat(group_id, chat_id, user.id)
            
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚úÖ –ß–∞—Ç '{selected_chat['title']}' –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {selected_chat['participants_count']}\n"
                f"üÜî ID: {chat_id}",
                reply_markup=chat_management_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('available_chats', None)
            context.user_data.pop('chats_page', None)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=back_keyboard()
            )
    
    async def _handle_chats_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        available_chats = context.user_data.get('available_chats', [])
        
        if not available_chats:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=chat_add_method_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context.user_data['chats_page'] = page
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        keyboard = available_chats_keyboard(available_chats, page)
        total_chats = len(available_chats)
        
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã VK MAX ({total_chats} —á–∞—Ç–æ–≤):\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    
    async def _handle_search_chat_by_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –ø–æ ID"""
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ ID\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ VK MAX:",
            reply_markup=cancel_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID —á–∞—Ç–∞
        context.user_data['waiting_for_chat_id'] = True
    
    async def _handle_date_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, date: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        chat_id = context.user_data.get('selected_chat_id')
        
        if not chat_id:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ —ç—Ç—É –¥–∞—Ç—É
        existing_summary = self.db.get_summary(chat_id, date)
        
        if existing_summary:
            # –ï—Å–ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é", callback_data=f"generate_new_summary_{chat_id}_{date}")],
                [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é", callback_data=f"view_existing_summary_{chat_id}_{date}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")]
            ]
            
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"üìä –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {date} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selected_date'] = date
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await self.select_model_for_analysis_handler(update, context)
    
    async def _handle_list_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        group_id = context.user_data.get('selected_group_id')
        if not group_id:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        chats = self.db.get_group_vk_chats(group_id)
        
        if not chats:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç'",
                reply_markup=chat_management_keyboard()
            )
            return
        
        keyboard = chat_list_keyboard(chats)
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:",
            reply_markup=keyboard
        )
    
    async def _handle_chat_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
        context.user_data['selected_chat_id'] = chat_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        stats = self.db.get_chat_stats(chat_id)
        
        text = f"üí¨ –ß–∞—Ç: {chat_id}\n\n"
        text += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['days_count']}\n\n"
        
        if stats['recent_days']:
            text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
            for day in stats['recent_days'][:5]:
                text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
        
        keyboard = chat_settings_keyboard(chat_id)
        await TelegramMessageSender.safe_edit_message_text(
            update.callback_query,
            text,
            reply_markup=keyboard
        )
    
    async def _handle_chat_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        stats = self.db.get_chat_stats(chat_id)
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ {chat_id}\n\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['days_count']}\n\n"
        
        if stats['recent_days']:
            text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
            for day in stats['recent_days']:
                text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
        
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            text,
            reply_markup=back_keyboard()
        )
    
    async def _handle_load_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        last_timestamp = self.db.get_last_message_timestamp(chat_id)
        
        if last_timestamp:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
            keyboard = [
                [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ", callback_data=f"load_new_messages_{chat_id}")],
                [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ", callback_data=f"load_all_messages_{chat_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")]
            ]
            
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"üìä –í —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {datetime.fromtimestamp(last_timestamp/1000).strftime('%Y-%m-%d %H:%M')}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ
            await self._load_messages_worker(update, context, chat_id, load_only_new=False)
    
    async def _load_messages_worker(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str, load_only_new: bool = False):
        """–†–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            f"üîÑ {'–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' if load_only_new else '–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è'}...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=cancel_keyboard()
        )
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX
            if not await self.vk.connect():
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK MAX",
                    reply_markup=back_keyboard()
                )
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.vk.load_chat_messages(chat_id, db_manager=self.db, load_only_new=load_only_new)
            
            if not messages:
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    f"‚ùå {'–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π' if load_only_new else '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'}",
                    reply_markup=back_keyboard()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.vk.save_messages_to_db(self.db, chat_id, messages)
            
            message_type = "–Ω–æ–≤—ã—Ö" if load_only_new else ""
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} {message_type} —Å–æ–æ–±—â–µ–Ω–∏–π",
                reply_markup=back_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=back_keyboard()
            )
        finally:
            await self.vk.disconnect()
    
    async def _handle_check_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        stats = self.db.get_chat_stats(chat_id)
        
        if not stats['recent_days']:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã
        keyboard = date_selection_keyboard(stats['recent_days'])
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=keyboard
        )
    
    async def _handle_publish_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (–≤—ã–±–æ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π
        summaries = self.db.get_available_summaries(chat_id)
        
        if not summaries:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n\n"
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}\n\n"
                f"–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é'",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π
        keyboard = []
        for summary in summaries:
            date = summary['date']
            keyboard.append([InlineKeyboardButton(
                f"üìÖ {date}", 
                callback_data=f"publish_summary_{chat_id}_{date}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")])
        
        text = f"üì§ *–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏*\n\n"
        text += f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}:\n\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
        
        await TelegramMessageSender.safe_edit_message_text(
            update.callback_query,
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _handle_publish_summary_with_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str, date: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –¥–∞—Ç–æ–π"""
        group_id = context.user_data.get('selected_group_id')
        
        if not group_id:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TelegramFormatter –¥–ª—è —É–º–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            from telegram_formatter import TelegramFormatter
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –∏–∑ –ë–î
            summary = self.db.get_summary(chat_id, date)
            
            if not summary:
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    f"‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã.",
                    reply_markup=back_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –ë–î
            chat_info = self.db.get_vk_chat_info(chat_id)
            chat_name = chat_info.get('chat_name', f'–ß–∞—Ç {chat_id}') if chat_info else f'–ß–∞—Ç {chat_id}'
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            from utils import format_summary_for_telegram
            
            logger.info(f"üìù –¢–µ–∫—Å—Ç –∏–∑ –ë–î –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {summary[:200]}...")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            message_parts = format_summary_for_telegram(summary, date, chat_name)
            
            logger.info(f"üìù –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {len(message_parts)} —á–∞—Å—Ç–µ–π")
            logger.info(f"üìù –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å: {message_parts[0][:200]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
            try:
                chat_info = await context.bot.get_chat(group_id)
                logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ: {chat_info.title} (ID: {group_id})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                bot_member = await context.bot.get_chat_member(group_id, context.bot.id)
                logger.info(f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: {bot_member.status}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É {group_id} –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞ {date}")
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"üì§ –ü—É–±–ª–∏–∫—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É...\n\n"
                f"–ß–∞—Ç: {chat_id}\n"
                f"–î–∞—Ç–∞: {date}\n"
                f"–ì—Ä—É–ø–ø–∞: {group_id}",
                reply_markup=cancel_keyboard()
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            existing_message_ids = []
            for i in range(len(message_parts)):
                message_id = self.db.get_group_message(group_id, chat_id, f"{date}_{i}")
                if message_id:
                    existing_message_ids.append(message_id)
                else:
                    existing_message_ids.append(None)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
            sent_message_ids = []
            for i, part in enumerate(message_parts):
                try:
                    if existing_message_ids[i]:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} (ID: {existing_message_ids[i]}) –≤ –≥—Ä—É–ø–ø–µ {group_id}")
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
                            escaped_part = TelegramFormatter.smart_escape_markdown_v2(part)
                            await context.bot.edit_message_text(
                                chat_id=group_id,
                                message_id=existing_message_ids[i],
                                text=escaped_part,
                                parse_mode=ParseMode.MARKDOWN_V2
                            )
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {existing_message_ids[i]}: {e}")
                            if "can't parse entities" in str(e).lower():
                                # Fallback to plain text
                                await context.bot.edit_message_text(
                                    chat_id=group_id,
                                    message_id=existing_message_ids[i],
                                    text=part
                                )
                            elif "message to edit not found" in str(e).lower() or "bad request" in str(e).lower() or "message not found" in str(e).lower():
                                # –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {existing_message_ids[i]} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ")
                                logger.info(f"üîç –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: '{str(e)}'")
                                try:
                                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
                                    from telegram_formatter import TelegramFormatter
                                    escaped_part = TelegramFormatter.smart_escape_markdown_v2(part)
                                    message = await context.bot.send_message(
                                        chat_id=group_id,
                                        text=escaped_part,
                                        parse_mode=ParseMode.MARKDOWN_V2,
                                        disable_notification=True
                                    )
                                    sent_message_ids.append(message.message_id)
                                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} (ID: {message.message_id}) –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ")
                                except Exception as send_e:
                                    if "can't parse entities" in str(send_e).lower():
                                        # Fallback to plain text
                                        message = await context.bot.send_message(
                                            chat_id=group_id,
                                            text=part,
                                            disable_notification=True
                                        )
                                        sent_message_ids.append(message.message_id)
                                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} (ID: {message.message_id}) –≤ plain text –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ")
                                    else:
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ: {send_e}")
                                        break
                            else:
                                raise e
                        # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–Ω–µ —É–¥–∞–ª–µ–Ω–æ)
                        if existing_message_ids[i] not in sent_message_ids:
                            sent_message_ids.append(existing_message_ids[i])
                            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} (ID: {existing_message_ids[i]})")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} –≤ –≥—Ä—É–ø–ø—É {group_id}")
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
                            escaped_part = TelegramFormatter.smart_escape_markdown_v2(part)
                            message = await context.bot.send_message(
                                chat_id=group_id,
                                text=escaped_part,
                                parse_mode=ParseMode.MARKDOWN_V2,
                                disable_notification=True
                            )
                        except Exception as e:
                            if "can't parse entities" in str(e).lower():
                                # Fallback to plain text
                                message = await context.bot.send_message(
                                    chat_id=group_id,
                                    text=part,
                                    disable_notification=True
                                )
                            else:
                                raise e
                        sent_message_ids.append(message.message_id)
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} (ID: {message.message_id})")
                    
                    if i < len(message_parts) - 1:
                        await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if "message to edit not found" in str(e).lower() or "bad request" in str(e).lower() or "message not found" in str(e).lower():
                        logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ")
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            message = await context.bot.send_message(
                                chat_id=group_id,
                                text=part,
                                parse_mode=ParseMode.MARKDOWN_V2,
                                disable_notification=True
                            )
                            sent_message_ids.append(message.message_id)
                            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} (ID: {message.message_id}) –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ")
                        except Exception as send_e:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {send_e}")
                    
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            for i, message_id in enumerate(sent_message_ids):
                if message_id:
                    self.db.update_group_message(group_id, chat_id, f"{date}_{i}", message_id)
            
            # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            for i, existing_id in enumerate(existing_message_ids):
                if existing_id and existing_id not in sent_message_ids:
                    logger.info(f"üóëÔ∏è –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ {existing_id}")
                    self.db.delete_group_message(group_id, chat_id, f"{date}_{i}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updated_count = sum(1 for msg_id in existing_message_ids if msg_id is not None)
            new_count = len(sent_message_ids) - updated_count
            
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!\n\n"
                f"üìä –ß–∞—Ç: {chat_id}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üìù –ß–∞—Å—Ç–µ–π: {len(message_parts)}\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}\n"
                f"‚ûï –ù–æ–≤—ã—Ö: {new_count}",
                reply_markup=back_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}",
                reply_markup=back_keyboard()
            )
    
    async def _handle_back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = main_menu_keyboard()
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    async def _handle_change_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç
        all_groups = self.db.get_all_groups()
        
        if not all_groups:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        keyboard = group_selection_keyboard(all_groups)
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "üîÑ –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=keyboard
        )
    
    async def _handle_back_to_manage_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —á–∞—Ç–∞–º–∏"""
        group_id = context.user_data.get('selected_group_id')
        if not group_id:
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
        chats = self.db.get_group_vk_chats(group_id)
        
        if chats:
            # –ï—Å–ª–∏ —á–∞—Ç—ã –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
            keyboard = chat_list_keyboard(chats)
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = chat_management_keyboard()
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX\n\n"
                "–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç:",
                reply_markup=keyboard
            )
    
    async def _handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('waiting_for_chat_id', None)
        context.user_data.pop('selected_chat_id', None)
        context.user_data.pop('available_chats', None)
        context.user_data.pop('chats_page', None)
        
        keyboard = main_menu_keyboard()
        await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if context.user_data.get('waiting_for_chat_id'):
            await self._handle_chat_id_input(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start"
            )
    
    async def _handle_chat_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞"""
        chat_id = update.message.text.strip()
        user = update.effective_user
        group_id = context.user_data.get('selected_group_id')
        
        if not group_id:
            await update.message.reply_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            if not await self.vk.connect():
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK MAX",
                    reply_markup=back_keyboard()
                )
                return
            
            chat_info = await self.vk.get_chat_info(chat_id)
            await self.vk.disconnect()
            
            if not chat_info:
                await update.message.reply_text(
                    f"‚ùå –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=back_keyboard()
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î
            self.db.add_vk_chat(chat_id, chat_info['title'], chat_info['type'])
            self.db.add_group_vk_chat(group_id, chat_id, user.id)
            
            await update.message.reply_text(
                f"‚úÖ –ß–∞—Ç '{chat_info['title']}' –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=chat_management_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=back_keyboard()
            )
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('waiting_for_chat_id', None)
    
    async def _handle_generate_new_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str, date: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ chat_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selected_date'] = date
        context.user_data['selected_chat_id'] = chat_id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await self.select_model_for_analysis_handler(update, context)
    
    async def _handle_improve_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str, date: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            existing_summary = self.db.get_summary(chat_id, date)
            if not existing_summary:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")
                    ]])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —É–ª—É—á—à–µ–Ω–∏—è
            await TelegramMessageSender.safe_edit_message_text(
                query,
                "‚ú® –£–ª—É—á—à–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=cancel_keyboard()
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            messages = self.db.get_messages_by_date(chat_id, date)
            if not messages:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")
                    ]])
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if "ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è:" in existing_summary:
                parts = existing_summary.split("ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è:")
                original_summary = parts[0].replace("üìù **–†–µ–∑—é–º–µ:**\n", "").replace("**üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:**\n", "").strip()
                reflection = parts[1].strip()
            elif "ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑:" in existing_summary:
                parts = existing_summary.split("ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑:")
                original_summary = parts[0].replace("üìù **–†–µ–∑—é–º–µ:**\n", "").replace("**üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:**\n", "").strip()
                reflection = parts[1].strip()
            else:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")
                    ]])
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            selected_provider = context.user_data.get('selected_analysis_provider', 'gigachat')
            selected_model = context.user_data.get('selected_analysis_model')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider = self.analyzer.provider_factory.create_provider(selected_provider, self.analyzer.config)
            if not provider:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {selected_provider}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")
                    ]])
                )
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if not await provider.initialize():
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {selected_provider}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")
                    ]])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            chat_context = {
                'total_messages': len(messages),
                'date': date,
                'provider': selected_provider,
                'model': selected_model
            }
            
            # –£–ª—É—á—à–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            improved_summary = await self.analyzer.improve_summary_with_reflection(
                provider, original_summary, reflection, messages, chat_context
            )
            
            if improved_summary:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                self.db.save_summary(chat_id, date, improved_summary)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (HTML –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞)
                text = f"üìä <b>–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ –∑–∞ {TelegramFormatter.escape_html(date)}</b>\n\n"
                text += f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"
                text += f"‚Ä¢ –î–∞—Ç–∞: {TelegramFormatter.escape_html(date)}\n"
                text += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {TelegramFormatter.escape_html(selected_provider)}\n"
                if selected_model:
                    text += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {TelegramFormatter.escape_html(selected_model)}\n"
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
                html_original = TelegramFormatter.escape_html(original_summary)
                html_reflection = TelegramFormatter.escape_html(reflection)
                html_improved = TelegramFormatter.escape_html(improved_summary)
                
                text += f"\n{html_improved}"
                
                keyboard = [
                    [InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", callback_data=f"publish_summary_{chat_id}_{date}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")]
                ]
                
                await TelegramMessageSender.safe_edit_message_text(
                    query,
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.HTML
                )
            else:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")
                    ]])
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")
                ]])
            )
    
    async def _handle_view_existing_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str, date: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summary = self.db.get_summary(chat_id, date)
            
            if not summary:
                await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                    f"‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    reply_markup=back_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            messages = self.db.get_messages_by_date(chat_id, date)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            text = f"üìä *–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {date}*\n\n"
            text += f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages) if messages else 0}\n"
            text += f"‚Ä¢ –î–∞—Ç–∞: {date}\n\n"
            text += f"üìù *–†–µ–∑—é–º–µ:*\n{summary}"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é", callback_data=f"generate_new_summary_{chat_id}_{date}")],
                [InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", callback_data=f"publish_summary_{chat_id}_{date}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")]
            ]
            
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                update.callback_query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=back_keyboard()
            )
    
    # AI Provider Handlers
    async def ai_provider_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (–≤–∫–ª—é—á–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ)
            available_providers = await self.analyzer.get_available_providers()
            provider_names = [p['name'] for p in available_providers]
            
            if not provider_names:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_chat_management")
                    ]])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            user_preferences = self.db.get_user_ai_preference(user_id)
            current_provider = user_preferences.get('default_provider', 'gigachat') if user_preferences else 'gigachat'
            
            keyboard = ai_provider_selection_keyboard(provider_names, current_provider, available_providers)
            
            text = "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ AI –º–æ–¥–µ–ª—å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
            for provider in available_providers:
                status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if provider.get('available', False) else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                text += f"‚Ä¢ {provider['display_name']}: {status}\n"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_chat_management")
                ]])
            )
    
    async def select_provider_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            provider_name = query.data.split(":")[1]
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_info = self.analyzer.get_provider_info(provider_name)
            if not provider_info:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")
                    ]])
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            availability_stats = self.db.get_provider_availability(provider_name)
            if availability_stats and not availability_stats.get('is_available', True):
                display_name = provider_info.get('display_name', provider_name.title())
                await TelegramMessageSender.safe_edit_message_text(
                    query,
                    f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä **{display_name}** –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {availability_stats.get('last_check', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {availability_stats.get('error_count', 0)}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {provider_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data="check_providers_availability"),
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")
                    ]])
                )
                return
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω OpenRouter, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
            if provider_name == 'openrouter':
                await self.openrouter_model_selection_handler(update, context)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.add_user_ai_preference(user_id, provider_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
            provider_info = self.analyzer.get_provider_info(provider_name)
            display_name = provider_info.get('display_name', provider_name.title()) if provider_info else provider_name.title()
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {display_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∞ –º–æ–¥–µ–ª—å.\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {provider_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è') if provider_info else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —á–∞—Ç–∞–º–∏", callback_data="back_to_chat_management")
                ]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")
                ]])
            )
    
    async def ai_provider_status_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            available_providers = await self.analyzer.get_available_providers()
            
            text = "üìä –°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n\n"
            
            for provider in available_providers:
                status_icon = "‚úÖ" if provider.get('available', False) else "‚ùå"
                status_text = "–î–æ—Å—Ç—É–ø–µ–Ω" if provider.get('available', False) else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                
                text += f"{status_icon} *{provider['display_name']}*\n"
                text += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
                text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {provider.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                text += f"   –í–µ—Ä—Å–∏—è: {provider.get('version', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            availability_stats = self.db.get_provider_availability()
            if availability_stats:
                text += "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                for provider_name, stats in availability_stats.items():
                    text += f"‚Ä¢ {provider_name}: {stats.get('error_count', 0)} –æ—à–∏–±–æ–∫\n"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ai_provider_status"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ai_provider_settings")
                ]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ai_provider_settings")
                ]])
            )
    
    async def check_providers_availability_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await TelegramMessageSender.safe_edit_message_text(
                query,
                "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="ai_provider_settings")
                ]])
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            test_results = await self.analyzer.test_all_providers()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text = "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:\n\n"
            
            for provider_name, is_available in test_results.items():
                status_icon = "‚úÖ" if is_available else "‚ùå"
                provider_info = self.analyzer.get_provider_info(provider_name)
                display_name = provider_info.get('display_name', provider_name.title()) if provider_info else provider_name.title()
                
                text += f"{status_icon} *{display_name}*\n"
                if not is_available:
                    text += f"   ‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                text += "\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            for provider_name, is_available in test_results.items():
                self.db.update_provider_availability(provider_name, is_available)
            
            text += "üíæ –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_providers_availability"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ai_provider_settings")
                ]])
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ai_provider_settings")
                ]])
            )
    
    async def ai_provider_defaults_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        query = update.callback_query
        await query.answer()
        
        try:
            user_id = update.effective_user.id
            user_preferences = self.db.get_user_ai_preference(user_id)
            current_default = user_preferences.get('default_provider', 'gigachat') if user_preferences else 'gigachat'
            
            keyboard = ai_provider_defaults_keyboard(current_default)
            
            text = f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
            text += f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: *{current_default.title()}*\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤."
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=keyboard,
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ai_provider_settings")
                ]])
            )
    
    async def set_default_provider_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        query = update.callback_query
        await query.answer()
        
        try:
            provider_name = query.data.split(":")[1]
            user_id = update.effective_user.id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.add_user_ai_preference(user_id, provider_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
            provider_info = self.analyzer.get_provider_info(provider_name)
            display_name = provider_info.get('display_name', provider_name.title()) if provider_info else provider_name.title()
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{display_name}*\n\n"
                f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="ai_provider_settings")
                ]]),
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ai_provider_defaults")
                ]])
            )
    
    # OpenRouter Model Handlers
    async def openrouter_model_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenRouter"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            openrouter_provider = self.analyzer.provider_factory.create_provider('openrouter', self.analyzer.config)
            if not openrouter_provider:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")
                    ]])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
            available_models = await openrouter_provider.get_available_models()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = update.effective_user.id
            current_model = self.db.get_user_openrouter_model(user_id)
            
            keyboard = openrouter_model_selection_keyboard(available_models, current_model)
            
            text = "üîó –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenRouter (—Ç–æ–ø 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö):\n\n"
            for model_id, model_info in available_models.items():
                free_indicator = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è" if model_info.get('free', False) else "üí∞ –ü–ª–∞—Ç–Ω–∞—è"
                current_indicator = " (—Ç–µ–∫—É—â–∞—è)" if model_id == current_model else ""
                text += f"‚Ä¢ *{model_info['display_name']}* {free_indicator}{current_indicator}\n"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=keyboard,
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenRouter: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")
                ]])
            )
    
    async def select_openrouter_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ OpenRouter"""
        query = update.callback_query
        await query.answer()
        
        try:
            model_id = query.data.split(":")[1]
            
            # –ü–æ–ª—É—á–∞–µ–º OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            openrouter_provider = self.analyzer.provider_factory.create_provider('openrouter', self.analyzer.config)
            if not openrouter_provider:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")
                    ]])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            available_models = await openrouter_provider.get_available_models()
            model_info = available_models.get(model_id, {})
            
            if not model_info:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="openrouter_model_selection")
                    ]])
                )
                return
            
            keyboard = openrouter_model_info_keyboard(model_id)
            
            free_indicator = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è" if model_info.get('free', False) else "üí∞ –ü–ª–∞—Ç–Ω–∞—è"
            
            text = f"üîó *{model_info['display_name']}*\n\n"
            text += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {model_info['description']}\n"
            text += f"üí∞ *–¢–∏–ø:* {free_indicator}\n"
            text += f"üÜî *ID –º–æ–¥–µ–ª–∏:* `{model_id}`\n\n"
            text += "–í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏?"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=keyboard,
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenRouter: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="openrouter_model_selection")
                ]])
            )
    
    async def confirm_openrouter_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenRouter"""
        query = update.callback_query
        await query.answer()
        
        try:
            model_id = query.data.split(":")[1]
            user_id = update.effective_user.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            self.db.set_user_openrouter_model(user_id, model_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            openrouter_provider = self.analyzer.provider_factory.create_provider('openrouter', self.analyzer.config)
            if openrouter_provider:
                available_models = openrouter_provider.get_available_models()
                model_info = available_models.get(model_id, {})
                display_name = model_info.get('display_name', model_id)
            else:
                display_name = model_id
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å OpenRouter: **{display_name}**\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∞ –º–æ–¥–µ–ª—å.\n\n"
                f"üÜî ID –º–æ–¥–µ–ª–∏: `{model_id}`",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —á–∞—Ç–∞–º–∏", callback_data="back_to_chat_management")
                ]]),
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ OpenRouter: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="openrouter_model_selection")
                ]])
            )
    
    # Model Selection for Analysis Handlers
    async def select_model_for_analysis_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
            available_providers = self.analyzer.get_providers_with_saved_status(self.db)
            provider_names = [p['name'] for p in available_providers]
            
            if not provider_names:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_chat_settings")
                    ]])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
            keyboard = []
            for provider_name in provider_names:
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
                provider_info = None
                for p in available_providers:
                    if p['name'] == provider_name:
                        provider_info = p
                        break
                
                display_name = provider_info.get('display_name', provider_name.title()) if provider_info else provider_name.title()
                is_available = provider_info.get('available', False) if provider_info else False
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
                if is_available:
                    status_icon = "‚úÖ"
                    status_text = "–î–æ—Å—Ç—É–ø–µ–Ω"
                else:
                    status_icon = "‚ùå"
                    status_text = "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"
                
                keyboard.append([InlineKeyboardButton(
                    f"{status_icon} {display_name} ({status_text})",
                    callback_data=f"analyze_with_provider:{provider_name}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            keyboard.append([InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data="check_providers_availability")])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            date = context.user_data.get('selected_date')
            if date:
                # –ï—Å–ª–∏ —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è
                chat_id = context.user_data.get('selected_chat_id')
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")])
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–∞—Ç–∞
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_chat_settings")])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–æ–≤–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
            date = context.user_data.get('selected_date')
            if date:
                # Don't escape here - let telegram_message_sender handle it
                text = f"ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ AI –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {date}:\n\n"
            else:
                text = "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ AI –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
            
            text += "–≠—Ç–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n"
            text += "–í–∞—à–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è.\n\n"
            text += "‚ÑπÔ∏è *–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:*\n"
            text += "‚Ä¢ ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            text += "‚Ä¢ ‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n\n"
            
            # Format provider status with MarkdownV2, escaping reserved characters
            for provider in available_providers:
                status = '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if provider.get('available', False) else '‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω'
                # Don't escape here - let telegram_message_sender handle it
                provider_name = provider.get('display_name', 'Unknown Provider')
                text += f"‚Ä¢ *{provider_name}*: {status}\n"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_chat_settings")
                ]])
            )
    
    async def analyze_with_provider_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º"""
        query = update.callback_query
        await query.answer()
        
        try:
            provider_name = query.data.split(":")[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_info = self.analyzer.get_provider_info(provider_name)
            if not provider_info:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_model_for_analysis")
                    ]])
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            availability_stats = self.db.get_provider_availability(provider_name)
            if availability_stats and not availability_stats.get('is_available', True):
                display_name = provider_info.get('display_name', provider_name.title())
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ MarkdownV2
                safe_display_name = TelegramMessageSender.format_text_for_markdown_v2(display_name)
                safe_description = TelegramMessageSender.format_text_for_markdown_v2(
                    provider_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                )
                safe_last_check = TelegramMessageSender.format_text_for_markdown_v2(
                    availability_stats.get('last_check', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                )
                
                error_text = f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä *{safe_display_name}* –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                error_text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {safe_last_check}\n"
                error_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {availability_stats.get('error_count', 0)}\n\n"
                error_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\\.\n\n"
                error_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {safe_description}"
                
                await TelegramMessageSender.safe_edit_message_text(
                    query,
                    error_text,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data="check_providers_availability"),
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_model_for_analysis")
                    ]]),
                )
                return
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω OpenRouter, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
            if provider_name == 'openrouter':
                await self.analyze_with_openrouter_model_selection_handler(update, context)
                return
            
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            context.user_data['selected_analysis_provider'] = provider_name
            context.user_data['selected_analysis_model'] = None  # –ù–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
            await self._run_analysis_with_selected_model(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: {e}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            date = context.user_data.get('selected_date')
            if date:
                chat_id = context.user_data.get('selected_chat_id')
                back_callback = f"select_chat_{chat_id}"
            else:
                back_callback = "select_model_for_analysis"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                ]])
            )
    
    async def analyze_with_openrouter_model_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenRouter –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            openrouter_provider = self.analyzer.provider_factory.create_provider('openrouter', self.analyzer.config)
            if not openrouter_provider:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå OpenRouter –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_model_for_analysis")
                    ]])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
            available_models = await openrouter_provider.get_available_models()
            
            keyboard = []
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            models_list = list(available_models.items())
            for index, (model_id, model_info) in enumerate(models_list):
                display_name = model_info.get('display_name', model_id)
                free_indicator = "üÜì" if model_info.get('free', False) else "üí∞"
                keyboard.append([InlineKeyboardButton(
                    f"{free_indicator} {display_name}",
                    callback_data=f"analyze_with_openrouter_model_index:{index}"
                )])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ model_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['openrouter_models_list'] = models_list
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            date = context.user_data.get('selected_date')
            if date:
                chat_id = context.user_data.get('selected_chat_id')
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")])
            else:
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_model_for_analysis")])
            
            text = "üîó –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenRouter –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ–ø 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö):\n\n"
            text += "–≠—Ç–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n"
            text += "–í–∞—à–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è.\n\n"
            
            for model_id, model_info in available_models.items():
                free_indicator = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è" if model_info.get('free', False) else "üí∞ –ü–ª–∞—Ç–Ω–∞—è"
                text += f"‚Ä¢ **{model_info['display_name']}** - {free_indicator}\n"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ OpenRouter –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_model_for_analysis")
                ]])
            )
    
    async def analyze_with_openrouter_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é OpenRouter (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
        query = update.callback_query
        await query.answer()
        
        try:
            model_id = query.data.split(":")[1]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context.user_data['selected_analysis_provider'] = 'openrouter'
            context.user_data['selected_analysis_model'] = model_id
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
            await self._run_analysis_with_selected_model(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –º–æ–¥–µ–ª—å—é OpenRouter: {e}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            date = context.user_data.get('selected_date')
            if date:
                chat_id = context.user_data.get('selected_chat_id')
                back_callback = f"select_chat_{chat_id}"
            else:
                back_callback = "select_model_for_analysis"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                ]])
            )
    
    async def _run_analysis_with_selected_model(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é –∏ –¥–∞—Ç–æ–π"""
        query = update.callback_query
        chat_id = context.user_data.get('selected_chat_id')
        date = context.user_data.get('selected_date')
        selected_provider = context.user_data.get('selected_analysis_provider')
        selected_model = context.user_data.get('selected_analysis_model')
        
        if not chat_id or not date:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if date:
                back_callback = f"select_chat_{chat_id}"
            else:
                back_callback = "back_to_chat_settings"
            
                await TelegramMessageSender.safe_edit_message_text(
                query,
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã —á–∞—Ç –∏–ª–∏ –¥–∞—Ç–∞",
                    reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                    ]])
                )
                return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        provider_info = self.analyzer.get_provider_info(selected_provider)
        display_name = provider_info.get('display_name', selected_provider.title()) if provider_info else selected_provider.title()
        
        analysis_text = f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç –∑–∞ {date}...\n\n"
        analysis_text += f"üìä –ú–æ–¥–µ–ª—å: *{display_name}*\n"
        if selected_model:
            analysis_text += f"üîó –ú–æ–¥–µ–ª—å: *{selected_model}*\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        # –£–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        analysis_text += "\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        
        await TelegramMessageSender.safe_edit_message_text(
            query,
            analysis_text,
            reply_markup=cancel_keyboard()
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            messages = self.db.get_messages_by_date(chat_id, date)
            
            if not messages:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if date:
                    back_callback = f"select_chat_{chat_id}"
                else:
                    back_callback = "back_to_chat_settings"
                
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {date}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                    ]])
                )
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
            summary = await self.analyzer.analyze_chat_with_specific_model(
                messages, selected_provider, selected_model, update.effective_user.id
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            context.user_data.pop('selected_analysis_provider', None)
            context.user_data.pop('selected_analysis_model', None)
            context.user_data.pop('selected_date', None)
            
            if summary:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ –ë–î
                if isinstance(summary, dict):
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
                    self.db.save_summary(
                        chat_id, date, 
                        summary.get('summary', ''),
                        reflection_text=summary.get('reflection'),
                        improved_summary_text=summary.get('improved')
                    )
                    display_text = summary.get('display_text', summary.get('summary', ''))
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    self.db.save_summary(chat_id, date, summary)
                    display_text = summary
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                text = f"üìä *–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ –∑–∞ {date}*\n\n"
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ blockquote
                stats_lines = [
                    "> üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*",
                    f"> ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}",
                    f"> ‚Ä¢ –î–∞—Ç–∞: {date}",
                    f"> ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {display_name}"
                ]
                if selected_model:
                    stats_lines.append(f"> ‚Ä¢ –ú–æ–¥–µ–ª—å: {selected_model}")
                
                text += "\n".join(stats_lines) + "\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞—Ä–∞–Ω–µ–µ
                keyboard = [
                    [InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", callback_data=f"publish_summary_{chat_id}_{date}")]
                ]
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                if isinstance(summary, dict):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç—Ä–µ–º—è —Ä–∞–∑–¥–µ–ª–∞–º–∏
                    formatted_result = TelegramFormatter.format_analysis_result_with_reflection(summary, "markdown_v2")
                    text += formatted_result
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    text += f"üìù *–†–µ–∑—é–º–µ:*\n{display_text}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if len(text) > 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫
                    logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏")
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                    message_parts = TelegramFormatter.split_long_message(text, 4000, "markdown")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await TelegramMessageSender.safe_edit_message_text(
                        query,
                        message_parts[0],
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    for i, part in enumerate(message_parts[1:], 1):
                        await query.message.reply_text(
                            part,
                            parse_mode="markdown_v2"
                        )
                    
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–ª—É—á—à–∏—Ç—å", –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
                logger.debug(f"=== CHECKING REFLECTION BUTTON ===")
                logger.debug(f"Summary type: {type(summary)}")
                
                has_reflection = False
                if isinstance(summary, dict):
                    has_reflection = summary.get('reflection') is not None
                    logger.debug(f"Dict format - has reflection: {has_reflection}")
                else:
                    has_reflection = "ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è:" in summary or "ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑:" in summary
                    logger.debug(f"String format - has reflection: {has_reflection}")
                
                if has_reflection:
                    logger.debug("‚úÖ Adding '–£–ª—É—á—à–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏' button")
                    keyboard.append([InlineKeyboardButton("‚ú® –£–ª—É—á—à–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏", callback_data=f"improve_summary_{chat_id}_{date}")])
                else:
                    logger.debug("‚ùå No reflection found, not adding button")
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")])
                
                await TelegramMessageSender.safe_edit_message_text(
                    query,
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if date:
                    back_callback = f"select_chat_{chat_id}"
                else:
                    back_callback = "back_to_chat_settings"
                
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –∑–∞ {date}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                    ]])
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if date:
                back_callback = f"select_chat_{chat_id}"
            else:
                back_callback = "back_to_chat_settings"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è MarkdownV2
            safe_error_text = TelegramFormatter.escape_markdown_v2(str(e))
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {safe_error_text}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                ]])
            )
    
    # Top-5 Models Handlers
    async def top5_models_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π"""
        query = update.callback_query
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π
            import json
            import os
            
            config_path = os.path.join(os.path.dirname(__file__), 'top5_models_config.json')
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                top5_models = config.get('top5_models', [])
            else:
                top5_models = []
            
            if not top5_models:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")
                    ]])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π
            text = "üèÜ <b>–¢–û–ü-5 –õ–£–ß–®–ò–• –ú–û–î–ï–õ–ï–ô</b>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ª—É—á—à–∏—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
            
            for i, model in enumerate(top5_models, 1):
                text += f"<b>{i}. {model['name']}</b>\n"
                text += f"   {model['description']}\n"
                text += f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {model['context_length']:,} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            
            text += "üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: NVIDIA Nemotron Nano 9B v2 (–±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è)</i>"
            
            keyboard = top5_models_keyboard()
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ top5_models_selection_handler: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_ai_provider")
                ]])
            )
    
    async def top5_model_info_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, model_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ø-5 –º–æ–¥–µ–ª–∏"""
        query = update.callback_query
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π
            import json
            import os
            
            config_path = os.path.join(os.path.dirname(__file__), 'top5_models_config.json')
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                top5_models = config.get('top5_models', [])
            else:
                top5_models = []
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            selected_model = None
            for model in top5_models:
                if model['id'] == model_id:
                    selected_model = model
                    break
            
            if not selected_model:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="top5_models_selection")
                    ]])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            text = f"ü§ñ <b>{selected_model['name']}</b>\n\n"
            text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {selected_model['description']}\n"
            text += f"üîó <b>ID –º–æ–¥–µ–ª–∏:</b> <code>{selected_model['id']}</code>\n"
            text += f"üìä <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> {selected_model['context_length']:,} —Ç–æ–∫–µ–Ω–æ–≤\n"
            text += f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {selected_model.get('category', 'general')}\n"
            text += f"‚≠ê <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {selected_model.get('priority', 'N/A')}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if selected_model.get('category') == 'speed':
                text += "üöÄ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n"
            elif selected_model.get('category') == 'quality':
                text += "üß† <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á\n"
            elif selected_model.get('category') == 'power':
                text += "üíé <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
            elif selected_model.get('category') == 'balanced':
                text += "‚öñÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            elif selected_model.get('category') == 'reliable':
                text += "üõ°Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ù–∞–¥–µ–∂–Ω–∞—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å\n"
            
            text += "\nüí° <i>–≠—Ç–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤</i>"
            
            keyboard = top5_model_info_keyboard(model_id, selected_model['name'])
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ top5_model_info_handler: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="top5_models_selection")
                ]])
            )
    
    async def confirm_top5_model_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE, model_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ø-5 –º–æ–¥–µ–ª–∏"""
        query = update.callback_query
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–ø-5 –º–æ–¥–µ–ª–µ–π
            import json
            import os
            
            config_path = os.path.join(os.path.dirname(__file__), 'top5_models_config.json')
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                top5_models = config.get('top5_models', [])
            else:
                top5_models = []
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            selected_model = None
            for model in top5_models:
                if model['id'] == model_id:
                    selected_model = model
                    break
            
            if not selected_model:
                await TelegramMessageSender.safe_edit_message_text(
                query,
                    "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="top5_models_selection")
                    ]])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = query.from_user.id
            self.db.set_user_preference(user_id, 'selected_ai_provider', 'openrouter')
            self.db.set_user_preference(user_id, 'selected_openrouter_model', model_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context.user_data['selected_analysis_provider'] = 'openrouter'
            context.user_data['selected_analysis_model'] = model_id
            
            text = f"‚úÖ <b>–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"
            text += f"ü§ñ <b>{selected_model['name']}</b>\n"
            text += f"üìù {selected_model['description']}\n\n"
            text += "üéØ –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤.\n\n"
            text += "üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤</i>"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if 'selected_date' in context.user_data:
                # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
                back_callback = f"select_chat_{context.user_data.get('selected_chat_id', '')}"
            else:
                # –ï—Å–ª–∏ –º—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
                back_callback = "select_ai_provider"
            
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
            ]])
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
            # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            if 'selected_date' in context.user_data:
                await self._run_analysis_with_selected_model(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_top5_model_handler: {e}")
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="top5_models_selection")
                ]])
            )
    
    async def analyze_with_openrouter_model_index_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é OpenRouter –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        query = update.callback_query
        await query.answer()
        
        try:
            index = int(query.data.split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π model_id –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            models_list = context.user_data.get('openrouter_models_list', [])
            if index >= len(models_list):
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –º–æ–¥–µ–ª–∏: {index}")
            
            model_id, model_info = models_list[index]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            context.user_data['selected_analysis_provider'] = 'openrouter'
            context.user_data['selected_analysis_model'] = model_id
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
            await self._run_analysis_with_selected_model(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –º–æ–¥–µ–ª—å—é OpenRouter –ø–æ –∏–Ω–¥–µ–∫—Å—É: {e}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            date = context.user_data.get('selected_date')
            if date:
                chat_id = context.user_data.get('selected_chat_id')
                back_callback = f"select_chat_{chat_id}"
            else:
                back_callback = "select_model_for_analysis"
            
            await TelegramMessageSender.safe_edit_message_text(
                query,
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                ]])
            )