"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from database import DatabaseManager
from vk_integration import VKMaxIntegration
from chat_analyzer import ChatAnalyzer
from keyboards import *

logger = logging.getLogger(__name__)

class BotHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self, db_manager: DatabaseManager, vk_integration: VKMaxIntegration, chat_analyzer: ChatAnalyzer):
        self.db = db_manager
        self.vk = vk_integration
        self.analyzer = chat_analyzer
    
    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        self.db.add_user(user.id, user.username)
        
        if chat.type == "private":
            # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
            await self._handle_private_start(update, context)
        else:
            # –ì—Ä—É–ø–ø–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await self._handle_group_start(update, context)
    
    async def _handle_private_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_groups = self.db.get_user_groups(user.id)
        
        if not user_groups:
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return
        
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —á–∞—Ç–∞–º–∏
        if len(user_groups) == 1:
            group_id = user_groups[0]['group_id']
            context.user_data['selected_group_id'] = group_id
            
            keyboard = chat_management_keyboard()
            await update.message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {user_groups[0]['group_name']}\n\n"
                f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX",
                reply_markup=keyboard
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
            keyboard = group_selection_keyboard(user_groups)
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
                reply_markup=keyboard
            )
    
    async def _handle_group_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –≤ –≥—Ä—É–ø–ø–µ"""
        chat = update.effective_chat
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
        self.db.add_group(chat.id, chat.title)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∞
        self.db.add_group_user(chat.id, user.id, is_admin=True)
        
        await update.message.reply_text(
            f"‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{chat.title}'\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Ç–∞–º–∏ VK MAX —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
        )
    
    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "manage_chats":
            await self._handle_manage_chats(update, context)
        elif data == "statistics":
            await self._handle_statistics(update, context)
        elif data == "settings":
            await self._handle_settings(update, context)
        elif data.startswith("select_group_"):
            group_id = int(data.split("_")[2])
            await self._handle_group_selection(update, context, group_id)
        elif data == "add_chat":
            await self._handle_add_chat(update, context)
        elif data == "select_from_list":
            await self._handle_select_from_list(update, context)
        elif data == "enter_chat_id":
            await self._handle_enter_chat_id(update, context)
        elif data.startswith("select_available_chat_"):
            chat_id = data.split("_")[3]
            await self._handle_select_available_chat(update, context, chat_id)
        elif data.startswith("chats_page_"):
            page = int(data.split("_")[2])
            await self._handle_chats_page(update, context, page)
        elif data == "search_chat_by_id":
            await self._handle_search_chat_by_id(update, context)
        elif data.startswith("select_date_"):
            date = data.split("_")[2]
            await self._handle_date_selection(update, context, date)
        elif data == "list_chats":
            await self._handle_list_chats(update, context)
        elif data.startswith("select_chat_"):
            chat_id = data.split("_")[2]
            await self._handle_chat_selection(update, context, chat_id)
        elif data.startswith("chat_stats_"):
            chat_id = data.split("_")[2]
            await self._handle_chat_stats(update, context, chat_id)
        elif data.startswith("load_messages_"):
            chat_id = data.split("_")[2]
            await self._handle_load_messages(update, context, chat_id)
        elif data.startswith("load_new_messages_"):
            chat_id = data.split("_")[3]
            await self._load_messages_worker(update, context, chat_id, load_only_new=True)
        elif data.startswith("load_all_messages_"):
            chat_id = data.split("_")[3]
            await self._load_messages_worker(update, context, chat_id, load_only_new=False)
        elif data.startswith("check_summary_"):
            chat_id = data.split("_")[2]
            await self._handle_check_summary(update, context, chat_id)
        elif data.startswith("publish_summary_"):
            parts = data.split("_")
            if len(parts) == 3:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –¥–∞—Ç—ã
                chat_id = parts[2]
                await self._handle_publish_summary(update, context, chat_id)
            elif len(parts) == 4:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞—Ç–æ–π
                chat_id = parts[2]
                date = parts[3]
                await self._handle_publish_summary_with_date(update, context, chat_id, date)
        elif data == "back_to_main":
            await self._handle_back_to_main(update, context)
        elif data == "change_group":
            await self._handle_change_group(update, context)
        elif data == "back_to_manage_chats":
            await self._handle_back_to_manage_chats(update, context)
        elif data == "back_to_chat_settings":
            chat_id = context.user_data.get('selected_chat_id')
            if chat_id:
                await self._handle_chat_selection(update, context, chat_id)
            else:
                await self._handle_back_to_manage_chats(update, context)
        elif data == "back":
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–∞—Ç–∞
            chat_id = context.user_data.get('selected_chat_id')
            if chat_id:
                await self._handle_chat_selection(update, context, chat_id)
            else:
                await self._handle_back_to_manage_chats(update, context)
        elif data == "cancel":
            await self._handle_cancel(update, context)
    
    async def _handle_manage_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏"""
        group_id = context.user_data.get('selected_group_id')
        if not group_id:
            await update.callback_query.edit_message_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
        chats = self.db.get_group_vk_chats(group_id)
        
        if chats:
            # –ï—Å–ª–∏ —á–∞—Ç—ã –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
            keyboard = chat_list_keyboard(chats)
            await update.callback_query.edit_message_text(
                "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = chat_management_keyboard()
            await update.callback_query.edit_message_text(
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX\n\n"
                "–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç:",
                reply_markup=keyboard
            )
    
    async def _handle_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await update.callback_query.edit_message_text(
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=back_keyboard()
        )
    
    async def _handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await update.callback_query.edit_message_text(
            "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=back_keyboard()
        )
    
    async def _handle_group_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, group_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selected_group_id'] = group_id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_groups = self.db.get_user_groups(update.effective_user.id)
        group_name = "–ì—Ä—É–ø–ø–∞"
        for group in user_groups:
            if group['group_id'] == group_id:
                group_name = group['group_name']
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
        chats = self.db.get_group_vk_chats(group_id)
        
        if chats:
            # –ï—Å–ª–∏ —á–∞—Ç—ã –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
            keyboard = chat_list_keyboard(chats)
            await update.callback_query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}\n\n"
                f"üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = chat_management_keyboard()
            await update.callback_query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}\n\n"
                f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX\n\n"
                f"–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç:",
                reply_markup=keyboard
            )
    
    async def _handle_add_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
        keyboard = chat_add_method_keyboard()
        await update.callback_query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç VK MAX\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞:",
            reply_markup=keyboard
        )
    
    async def _handle_select_from_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        await update.callback_query.edit_message_text(
            "üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=cancel_keyboard()
        )
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX
            if not await self.vk.connect():
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK MAX",
                    reply_markup=back_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
            available_chats = await self.vk.get_available_chats()
            await self.vk.disconnect()
            
            if not available_chats:
                await update.callback_query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID —á–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é.",
                    reply_markup=chat_add_method_keyboard()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['available_chats'] = available_chats
            context.user_data['chats_page'] = 0
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            keyboard = available_chats_keyboard(available_chats, 0)
            total_chats = len(available_chats)
            
            await update.callback_query.edit_message_text(
                f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã VK MAX ({total_chats} —á–∞—Ç–æ–≤):\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=chat_add_method_keyboard()
            )
    
    async def _handle_enter_chat_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é"""
        await update.callback_query.edit_message_text(
            "üîç –í–≤–æ–¥ ID —á–∞—Ç–∞ VK MAX\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ VK MAX:",
            reply_markup=cancel_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID —á–∞—Ç–∞
        context.user_data['waiting_for_chat_id'] = True
    
    async def _handle_select_available_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        user = update.effective_user
        group_id = context.user_data.get('selected_group_id')
        
        if not group_id:
            await update.callback_query.edit_message_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ
            available_chats = context.user_data.get('available_chats', [])
            selected_chat = None
            
            for chat in available_chats:
                if str(chat['id']) == str(chat_id):
                    selected_chat = chat
                    break
            
            if not selected_chat:
                await update.callback_query.edit_message_text(
                    "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
                    reply_markup=back_keyboard()
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î
            self.db.add_vk_chat(chat_id, selected_chat['title'], selected_chat['type'])
            self.db.add_group_vk_chat(group_id, chat_id, user.id)
            
            await update.callback_query.edit_message_text(
                f"‚úÖ –ß–∞—Ç '{selected_chat['title']}' –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {selected_chat['participants_count']}\n"
                f"üÜî ID: {chat_id}",
                reply_markup=chat_management_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('available_chats', None)
            context.user_data.pop('chats_page', None)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=back_keyboard()
            )
    
    async def _handle_chats_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        available_chats = context.user_data.get('available_chats', [])
        
        if not available_chats:
            await update.callback_query.edit_message_text(
                "‚ùå –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=chat_add_method_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context.user_data['chats_page'] = page
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        keyboard = available_chats_keyboard(available_chats, page)
        total_chats = len(available_chats)
        
        await update.callback_query.edit_message_text(
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã VK MAX ({total_chats} —á–∞—Ç–æ–≤):\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    
    async def _handle_search_chat_by_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –ø–æ ID"""
        await update.callback_query.edit_message_text(
            "üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ –ø–æ ID\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ VK MAX:",
            reply_markup=cancel_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID —á–∞—Ç–∞
        context.user_data['waiting_for_chat_id'] = True
    
    async def _handle_date_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, date: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        chat_id = context.user_data.get('selected_chat_id')
        
        if not chat_id:
            await update.callback_query.edit_message_text(
                "‚ùå –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=back_keyboard()
            )
            return
        
        await update.callback_query.edit_message_text(
            f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç –∑–∞ {date}...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=cancel_keyboard()
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
            messages = self.db.get_messages_by_date(chat_id, date)
            
            if not messages:
                await update.callback_query.edit_message_text(
                    f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {date}",
                    reply_markup=back_keyboard()
                )
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            summary = self.analyzer.analyze_chat_by_date(messages)
            
            if summary:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ –ë–î
                self.db.save_summary(chat_id, date, summary)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                text = f"üìä **–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ –∑–∞ {date}**\n\n"
                text += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                text += f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n"
                text += f"‚Ä¢ –î–∞—Ç–∞: {date}\n\n"
                text += f"üìù **–†–µ–∑—é–º–µ:**\n{summary}"
                
                keyboard = [
                    [InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", callback_data=f"publish_summary_{chat_id}_{date}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")]
                ]
                
                await update.callback_query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.callback_query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –∑–∞ {date}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat.",
                    reply_markup=back_keyboard()
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                reply_markup=back_keyboard()
            )
    
    async def _handle_list_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        group_id = context.user_data.get('selected_group_id')
        if not group_id:
            await update.callback_query.edit_message_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        chats = self.db.get_group_vk_chats(group_id)
        
        if not chats:
            await update.callback_query.edit_message_text(
                "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç'",
                reply_markup=chat_management_keyboard()
            )
            return
        
        keyboard = chat_list_keyboard(chats)
        await update.callback_query.edit_message_text(
            "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:",
            reply_markup=keyboard
        )
    
    async def _handle_chat_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞"""
        context.user_data['selected_chat_id'] = chat_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
        stats = self.db.get_chat_stats(chat_id)
        
        text = f"üí¨ –ß–∞—Ç: {chat_id}\n\n"
        text += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['days_count']}\n\n"
        
        if stats['recent_days']:
            text += "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n"
            for day in stats['recent_days'][:5]:
                text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
        
        keyboard = chat_settings_keyboard(chat_id)
        await update.callback_query.edit_message_text(
            text,
            reply_markup=keyboard
        )
    
    async def _handle_chat_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        stats = self.db.get_chat_stats(chat_id)
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ {chat_id}\n\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['days_count']}\n\n"
        
        if stats['recent_days']:
            text += "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n"
            for day in stats['recent_days']:
                text += f"‚Ä¢ {day['date']} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=back_keyboard()
        )
    
    async def _handle_load_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        last_timestamp = self.db.get_last_message_timestamp(chat_id)
        
        if last_timestamp:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
            keyboard = [
                [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ", callback_data=f"load_new_messages_{chat_id}")],
                [InlineKeyboardButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ", callback_data=f"load_all_messages_{chat_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")]
            ]
            
            await update.callback_query.edit_message_text(
                f"üìä –í —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {datetime.fromtimestamp(last_timestamp/1000).strftime('%Y-%m-%d %H:%M')}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ
            await self._load_messages_worker(update, context, chat_id, load_only_new=False)
    
    async def _load_messages_worker(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str, load_only_new: bool = False):
        """–†–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.callback_query.edit_message_text(
            f"üîÑ {'–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' if load_only_new else '–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è'}...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=cancel_keyboard()
        )
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX
            if not await self.vk.connect():
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK MAX",
                    reply_markup=back_keyboard()
                )
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.vk.load_chat_messages(chat_id, db_manager=self.db, load_only_new=load_only_new)
            
            if not messages:
                await update.callback_query.edit_message_text(
                    f"‚ùå {'–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π' if load_only_new else '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'}",
                    reply_markup=back_keyboard()
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.vk.save_messages_to_db(self.db, chat_id, messages)
            
            message_type = "–Ω–æ–≤—ã—Ö" if load_only_new else ""
            await update.callback_query.edit_message_text(
                f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} {message_type} —Å–æ–æ–±—â–µ–Ω–∏–π",
                reply_markup=back_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=back_keyboard()
            )
        finally:
            await self.vk.disconnect()
    
    async def _handle_check_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        stats = self.db.get_chat_stats(chat_id)
        
        if not stats['recent_days']:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã
        keyboard = date_selection_keyboard(stats['recent_days'])
        await update.callback_query.edit_message_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=keyboard
        )
    
    async def _handle_publish_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (–≤—ã–±–æ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π
        summaries = self.db.get_available_summaries(chat_id)
        
        if not summaries:
            await update.callback_query.edit_message_text(
                f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n\n"
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}\n\n"
                f"–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é'",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–π
        keyboard = []
        for summary in summaries:
            date = summary['date']
            keyboard.append([InlineKeyboardButton(
                f"üìÖ {date}", 
                callback_data=f"publish_summary_{chat_id}_{date}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"select_chat_{chat_id}")])
        
        text = f"üì§ **–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏**\n\n"
        text += f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}:\n\n"
        text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
        
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _handle_publish_summary_with_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str, date: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –¥–∞—Ç–æ–π"""
        group_id = context.user_data.get('selected_group_id')
        
        if not group_id:
            await update.callback_query.edit_message_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –∏–∑ –ë–î
            summary = self.db.get_summary(chat_id, date)
            
            if not summary:
                await update.callback_query.edit_message_text(
                    f"‚ùå –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã.",
                    reply_markup=back_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ –ë–î
            chat_info = self.db.get_vk_chat_info(chat_id)
            chat_name = chat_info.get('chat_name', f'–ß–∞—Ç {chat_id}') if chat_info else f'–ß–∞—Ç {chat_id}'
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            from telegram_bot.utils import format_summary_for_telegram
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            message_parts = format_summary_for_telegram(summary, date, chat_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            await update.callback_query.edit_message_text(
                f"üì§ –ü—É–±–ª–∏–∫—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É...\n\n"
                f"–ß–∞—Ç: {chat_id}\n"
                f"–î–∞—Ç–∞: {date}",
                reply_markup=cancel_keyboard()
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            existing_message_ids = []
            for i in range(len(message_parts)):
                message_id = self.db.get_group_message(group_id, chat_id, f"{date}_{i}")
                if message_id:
                    existing_message_ids.append(message_id)
                else:
                    existing_message_ids.append(None)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
            sent_message_ids = []
            for i, part in enumerate(message_parts):
                try:
                    if existing_message_ids[i]:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await context.bot.edit_message_text(
                            chat_id=group_id,
                            message_id=existing_message_ids[i],
                            text=part,
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                        sent_message_ids.append(existing_message_ids[i])
                        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} (ID: {existing_message_ids[i]})")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = await context.bot.send_message(
                            chat_id=group_id,
                            text=part,
                            parse_mode=ParseMode.MARKDOWN_V2,
                            disable_notification=True
                        )
                        sent_message_ids.append(message.message_id)
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} (ID: {message.message_id})")
                    
                    if i < len(message_parts) - 1:
                        await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}")
                    break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            for i, message_id in enumerate(sent_message_ids):
                if message_id:
                    self.db.update_group_message(group_id, chat_id, f"{date}_{i}", message_id)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updated_count = sum(1 for msg_id in existing_message_ids if msg_id is not None)
            new_count = len(sent_message_ids) - updated_count
            
            await update.callback_query.edit_message_text(
                f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!\n\n"
                f"üìä –ß–∞—Ç: {chat_id}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üìù –ß–∞—Å—Ç–µ–π: {len(message_parts)}\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}\n"
                f"‚ûï –ù–æ–≤—ã—Ö: {new_count}",
                reply_markup=back_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            await update.callback_query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}",
                reply_markup=back_keyboard()
            )
    
    async def _handle_back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = main_menu_keyboard()
        await update.callback_query.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    async def _handle_change_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç
        all_groups = self.db.get_all_groups()
        
        if not all_groups:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø\n\n"
                "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        keyboard = group_selection_keyboard(all_groups)
        await update.callback_query.edit_message_text(
            "üîÑ –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=keyboard
        )
    
    async def _handle_back_to_manage_chats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —á–∞—Ç–∞–º–∏"""
        group_id = context.user_data.get('selected_group_id')
        if not group_id:
            await update.callback_query.edit_message_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞—Ç—ã –≤ –≥—Ä—É–ø–ø–µ
        chats = self.db.get_group_vk_chats(group_id)
        
        if chats:
            # –ï—Å–ª–∏ —á–∞—Ç—ã –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
            keyboard = chat_list_keyboard(chats)
            await update.callback_query.edit_message_text(
                "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ VK MAX:",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = chat_management_keyboard()
            await update.callback_query.edit_message_text(
                "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ VK MAX\n\n"
                "–ß–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç:",
                reply_markup=keyboard
            )
    
    async def _handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('waiting_for_chat_id', None)
        context.user_data.pop('selected_chat_id', None)
        context.user_data.pop('available_chats', None)
        context.user_data.pop('chats_page', None)
        
        keyboard = main_menu_keyboard()
        await update.callback_query.edit_message_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if context.user_data.get('waiting_for_chat_id'):
            await self._handle_chat_id_input(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start"
            )
    
    async def _handle_chat_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞"""
        chat_id = update.message.text.strip()
        user = update.effective_user
        group_id = context.user_data.get('selected_group_id')
        
        if not group_id:
            await update.message.reply_text(
                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                reply_markup=back_keyboard()
            )
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            if not await self.vk.connect():
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK MAX",
                    reply_markup=back_keyboard()
                )
                return
            
            chat_info = await self.vk.get_chat_info(chat_id)
            await self.vk.disconnect()
            
            if not chat_info:
                await update.message.reply_text(
                    f"‚ùå –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    reply_markup=back_keyboard()
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î
            self.db.add_vk_chat(chat_id, chat_info['title'], chat_info['type'])
            self.db.add_group_vk_chat(group_id, chat_id, user.id)
            
            await update.message.reply_text(
                f"‚úÖ –ß–∞—Ç '{chat_info['title']}' –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=chat_management_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=back_keyboard()
            )
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('waiting_for_chat_id', None)
