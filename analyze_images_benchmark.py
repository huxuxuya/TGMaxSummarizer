#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–æ–∫–æ–≤
"""

import asyncio
import base64
import os
from pathlib import Path
import logging
import time
from typing import List

import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è Ollama
OLLAMA_BASE_URL = 'http://192.168.1.75:11434'
MODEL_NAME = 'gemma3:27b'

async def analyze_image_with_ollama(base_url: str, model_name: str, image_path: str, prompt: str = None) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Ollama"""
    
    if prompt is None:
        prompt = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å."
    
    # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
    try:
        with open(image_path, "rb") as image_file:
            image_base64 = base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "model": model_name,
        "prompt": prompt,
        "images": [image_base64],
        "stream": False
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{base_url}/api/generate",
                json=payload,
                timeout=180  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('response', '')
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è {image_path}: HTTP {response.status}")
                    return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return None

def save_analysis_result(image_path: Path, analysis_text: str, model_name: str, thread_count: int):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    try:
        result_path = image_path.parent / f"{image_path.stem}_threads_{thread_count}.txt"
        
        content = f"""–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path.name}
–ú–æ–¥–µ–ª—å: {model_name}
–ü–æ—Ç–æ–∫–æ–≤: {thread_count}
–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}

–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:
{analysis_text}
"""
        
        with open(result_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {image_path}: {e}")
        return False

def find_all_images(images_dir: str = "images") -> List[Path]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    images_path = Path(images_dir)
    if not images_path.exists():
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {images_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []
    
    image_extensions = {'.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp'}
    images = []
    
    for ext in image_extensions:
        images.extend(images_path.rglob(f"*{ext}"))
        images.extend(images_path.rglob(f"*{ext.upper()}"))
    
    return sorted(images)

async def process_single_image_with_semaphore(semaphore: asyncio.Semaphore, image_path: Path, prompt: str, model_name: str, base_url: str, thread_count: int, stats: dict) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º"""
    async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
            result_path = image_path.parent / f"{image_path.stem}_threads_{thread_count}.txt"
            if result_path.exists():
                stats['skipped'] += 1
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ): {image_path.name}")
                return
            
            stats['processed'] += 1
            logger.info(f"üñºÔ∏è [{thread_count} –ø–æ—Ç–æ–∫–æ–≤] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {image_path.name} ({stats['processed']}/{stats['total']})")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis_result = await analyze_image_with_ollama(
                base_url, 
                model_name, 
                str(image_path), 
                prompt
            )
            
            if analysis_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if save_analysis_result(image_path, analysis_result, model_name, thread_count):
                    stats['successful'] += 1
                    logger.info(f"‚úÖ [{thread_count} –ø–æ—Ç–æ–∫–æ–≤] –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {image_path.name}")
                else:
                    stats['failed'] += 1
                    logger.error(f"‚ùå [{thread_count} –ø–æ—Ç–æ–∫–æ–≤] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {image_path.name}")
            else:
                stats['failed'] += 1
                logger.error(f"‚ùå [{thread_count} –ø–æ—Ç–æ–∫–æ–≤] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: {image_path.name}")
                
        except Exception as e:
            stats['failed'] += 1
            logger.error(f"‚ùå [{thread_count} –ø–æ—Ç–æ–∫–æ–≤] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_path}: {e}")

async def benchmark_with_threads(images: List[Path], thread_count: int, max_images: int = 10):
    """–ë–µ–Ω—á–º–∞—Ä–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–æ–∫–æ–≤"""
    logger.info(f"\nüöÄ –ë–ï–ù–ß–ú–ê–†–ö –° {thread_count} –ü–û–¢–û–ö–ê–ú–ò")
    logger.info("=" * 50)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_images = images[:max_images]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': len(test_images),
        'processed': 0,
        'successful': 0,
        'failed': 0,
        'skipped': 0
    }
    
    prompt = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å."
    
    logger.info(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    logger.info(f"‚ö° –ü–æ—Ç–æ–∫–æ–≤: {thread_count}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    semaphore = asyncio.Semaphore(thread_count)
    
    start_time = time.time()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    tasks = []
    for image_path in test_images:
        task = process_single_image_with_semaphore(
            semaphore, image_path, prompt, MODEL_NAME, OLLAMA_BASE_URL, thread_count, stats
        )
        tasks.append(task)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    logger.info(f"‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å {thread_count} –ø–æ—Ç–æ–∫–∞–º–∏...")
    await asyncio.gather(*tasks, return_exceptions=True)
    
    end_time = time.time()
    processing_time = end_time - start_time
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞
    logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–õ–Ø {thread_count} –ü–û–¢–û–ö–û–í:")
    logger.info("=" * 50)
    logger.info(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['total']}")
    logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']}")
    logger.info(f"   –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['successful']}")
    logger.info(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å): {stats['skipped']}")
    logger.info(f"   –û—à–∏–±–æ–∫: {stats['failed']}")
    logger.info(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    if stats['processed'] > 0:
        success_rate = (stats['successful'] / stats['processed']) * 100
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if processing_time > 0:
            images_per_second = stats['processed'] / processing_time
            logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {images_per_second:.2f} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å–µ–∫")
    
    return {
        'thread_count': thread_count,
        'total_images': stats['total'],
        'processed': stats['processed'],
        'successful': stats['successful'],
        'failed': stats['failed'],
        'skipped': stats['skipped'],
        'processing_time': processing_time,
        'images_per_second': stats['processed'] / processing_time if processing_time > 0 else 0,
        'success_rate': (stats['successful'] / stats['processed']) * 100 if stats['processed'] > 0 else 0
    }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üñºÔ∏è –ë–ï–ù–ß–ú–ê–†–ö –ê–ù–ê–õ–ò–ó–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –° –†–ê–ó–ù–´–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –ü–û–¢–û–ö–û–í")
    logger.info("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    images_dir = Path("images")
    if not images_dir.exists():
        logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'images' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'images'")
        return
    
    logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_dir.resolve()}")
    logger.info(f"üåê Ollama URL: {OLLAMA_BASE_URL}")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {MODEL_NAME}")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    logger.info("üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    all_images = find_all_images()
    
    if not all_images:
        logger.error("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(all_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
    print(f"\nüî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º {len(all_images)}, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10):")
    max_images_input = input().strip()
    
    max_images = 10
    if max_images_input:
        try:
            max_images = int(max_images_input)
            if max_images <= 0 or max_images > len(all_images):
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                max_images = 10
        except ValueError:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            max_images = 10
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n‚ö° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3,10 –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 3):")
    threads_input = input().strip()
    
    thread_counts = [3, 10]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if threads_input:
        try:
            if ',' in threads_input:
                thread_counts = [int(x.strip()) for x in threads_input.split(',')]
            else:
                thread_counts = [int(threads_input)]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            thread_counts = [t for t in thread_counts if t > 0 and t <= 20]
            if not thread_counts:
                thread_counts = [3, 10]
        except ValueError:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º 3 –∏ 10 –ø–æ—Ç–æ–∫–æ–≤")
            thread_counts = [3, 10]
    
    logger.info(f"üî¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {max_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
    logger.info(f"‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {thread_counts}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫–∏
    results = []
    for thread_count in thread_counts:
        result = await benchmark_with_threads(all_images, thread_count, max_images)
        results.append(result)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        logger.info(f"‚è∏Ô∏è –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
        await asyncio.sleep(5)
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\n" + "=" * 70)
    logger.info("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    logger.info("=" * 70)
    logger.info(f"{'–ü–æ—Ç–æ–∫–æ–≤':<8} {'–í—Ä–µ–º—è (—Å–µ–∫)':<12} {'–°–∫–æ—Ä–æ—Å—Ç—å (–∏–∑–æ–±/—Å–µ–∫)':<20} {'–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)':<15}")
    logger.info("-" * 70)
    
    for result in results:
        logger.info(f"{result['thread_count']:<8} {result['processing_time']:<12.1f} {result['images_per_second']:<20.2f} {result['success_rate']:<15.1f}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    if len(results) >= 2:
        fastest = min(results, key=lambda x: x['processing_time'])
        most_efficient = max(results, key=lambda x: x['images_per_second'])
        
        logger.info(f"üèÜ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π: {fastest['thread_count']} –ø–æ—Ç–æ–∫–æ–≤ ({fastest['processing_time']:.1f} —Å–µ–∫)")
        logger.info(f"‚ö° –°–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π: {most_efficient['thread_count']} –ø–æ—Ç–æ–∫–æ–≤ ({most_efficient['images_per_second']:.2f} –∏–∑–æ–±/—Å–µ–∫)")
        
        if len(results) == 2 and results[0]['images_per_second'] > 0:
            improvement = ((results[1]['images_per_second'] - results[0]['images_per_second']) / results[0]['images_per_second']) * 100
            logger.info(f"üìä –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {improvement:+.1f}%")
    
    logger.info("=" * 70)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n\n‚èπÔ∏è –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
