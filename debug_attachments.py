#!/usr/bin/env python3
"""
üîç –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã attachments

–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã attachments –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö VK MAX.
"""

import asyncio
import logging
from core.app_context import get_app_context
from infrastructure.vk.client import VKMaxClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

async def debug_attachments():
    """–û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã attachments"""
    logger.info("üîç –û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ ATTACHMENTS")
    logger.info("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        ctx = get_app_context()
        vk_client = VKMaxClient(ctx.config['bot'].vk_max_token)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX
        logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX...")
        if not await vk_client.connect():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VK MAX")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
        chats = await vk_client.get_available_chats()
        
        if not chats:
            logger.error("‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç
        test_chat = chats[0]
        logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç: {test_chat.title}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info("üì® –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
        messages = await vk_client.load_chat_messages(test_chat.id, days_back=7)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å attachments
        found_attachments = False
        for i, msg in enumerate(messages[:50]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            attrs = dir(msg)
            attachment_attrs = [attr for attr in attrs if 'attach' in attr.lower()]
            
            if attachment_attrs:
                logger.info(f"üìé –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: –Ω–∞–π–¥–µ–Ω—ã –∞—Ç—Ä–∏–±—É—Ç—ã: {attachment_attrs}")
                
                for attr in attachment_attrs:
                    value = getattr(msg, attr)
                    if value:
                        logger.info(f"   {attr}: {type(value)} = {value}")
                        found_attachments = True
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                        if isinstance(value, list) and len(value) > 0:
                            logger.info(f"   –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç {attr}: {value[0]}")
        
        if not found_attachments:
            logger.info("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å attachments –≤ –ø–µ—Ä–≤—ã—Ö 50 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            total_with_attachments = 0
            for i, msg in enumerate(messages):
                attrs = dir(msg)
                attachment_attrs = [attr for attr in attrs if 'attach' in attr.lower()]
                
                for attr in attachment_attrs:
                    value = getattr(msg, attr)
                    if value:
                        total_with_attachments += 1
                        if total_with_attachments <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            logger.info(f"üìé –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {attr} = {value}")
                        break
            
            logger.info(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å attachments: {total_with_attachments}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if 'vk_client' in locals():
            await vk_client.disconnect()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(debug_attachments())
