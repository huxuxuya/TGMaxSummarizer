#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
"""
import os
import asyncio
import logging

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['OLLAMA_BASE_URL'] = 'http://192.168.1.75:11434'
os.environ['TEST_MODE'] = 'true'
os.environ['ENABLE_LLM_LOGGING'] = 'true'
os.environ['OLLAMA_TIMEOUT'] = '600'

from database import DatabaseManager
from chat_analyzer import ChatAnalyzer
from config import AI_PROVIDERS
from llm_logger import LLMLogger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_logging_for_model(model_name: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏: {model_name}")
    print("=" * 60)
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
        os.environ['TEST_MODEL_NAME'] = model_name
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        db = DatabaseManager('bot_database.db')
        all_groups = db.get_all_groups()
        
        if not all_groups:
            print("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
        chat_info = all_groups[0]
        group_id = chat_info['group_id']
        chat_name = chat_info.get('group_name', 'Unknown')
        
        print(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥—Ä—É–ø–ø–∞: {chat_name} (ID: {group_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º vk_chat_id –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        vk_chats = db.get_group_vk_chats(group_id)
        if not vk_chats:
            print("‚ùå –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö VK —á–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
            return False
        
        vk_chat_id = vk_chats[0]['chat_id']
        print(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VK —á–∞—Ç: {vk_chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ 15.10.2025
        messages = db.get_messages_by_date(vk_chat_id, "2025-10-15")
        
        if not messages:
            print("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 15.10.2025")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = ChatAnalyzer(AI_PROVIDERS)
        print(f"üîó DEBUG: ChatAnalyzer —Å–æ–∑–¥–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"üîÑ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å {model_name}...")
        print("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)")
        
        result = await analyzer.structured_analysis_with_specific_model(
            messages=messages,
            provider_name="ollama",
            model_name=model_name,
            user_id=None
        )
        
        if result:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìù –°–≤–æ–¥–∫–∞: {result.get('summary', '')[:100]}...")
            print(f"üîç –°–æ–±—ã—Ç–∏—è: {len(result.get('events', []))}")
            print(f"üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {len(result.get('classification', []))}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤
            import glob
            log_pattern = f"llm_logs/test_comparison/{model_name}/structured_analysis/*"
            log_files = glob.glob(log_pattern)
            
            if log_files:
                print(f"üìÅ –°–æ–∑–¥–∞–Ω—ã –ª–æ–≥–∏: {len(log_files)} —Ñ–∞–π–ª–æ–≤")
                for log_file in sorted(log_files):
                    print(f"   üìÑ {log_file}")
                return True
            else:
                print("‚ùå –õ–æ–≥–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!")
                return False
        else:
            print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_all_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models_to_test = [
        "deepseek-r1:8b",
        "gemma3:12b", 
        "gemma3:1b",
        "qwen3-coder:30b"
    ]
    
    results = {}
    
    for model_name in models_to_test:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        success = await test_logging_for_model(model_name)
        results[model_name] = success
        
        if success:
            print(f"‚úÖ {model_name}: –õ–æ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå {model_name}: –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)
    
    for model_name, success in results.items():
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{model_name}: {status}")
    
    successful_models = sum(1 for success in results.values() if success)
    total_models = len(results)
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful_models}/{total_models} –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    if successful_models == total_models:
        print("üéâ –í—Å–µ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞—é—Ç –ª–æ–≥–∏!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏")

if __name__ == "__main__":
    asyncio.run(test_all_models())
