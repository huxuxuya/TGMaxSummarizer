"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class TelegramMessageLogger:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –≤ JSON —Ñ–∞–π–ª—ã
    –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º MarkdownV2
    """
    
    LOG_DIR = Path("telegram_messages")
    
    @classmethod
    def ensure_log_directory(cls) -> Path:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        Returns:
            Path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ª–æ–≥–æ–≤
        """
        cls.LOG_DIR.mkdir(exist_ok=True)
        return cls.LOG_DIR
    
    @classmethod
    def get_log_path(cls) -> Path:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ —Å timestamp
        
        Returns:
            Path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
        """
        cls.ensure_log_directory()
        
        # –°–æ–∑–¥–∞–µ–º timestamp —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        now = datetime.now()
        timestamp_str = now.strftime("%Y-%m-%d-%H-%M-%S")
        microseconds = now.microsecond
        
        filename = f"{timestamp_str}-{microseconds:06d}.json"
        return cls.LOG_DIR / filename
    
    @classmethod
    def log_message(cls, metadata: Dict[str, Any]) -> Path:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª
        
        Args:
            metadata: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            Path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –ª–æ–≥–∞
        """
        log_path = cls.get_log_path()
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'timestamp' not in metadata:
            metadata['timestamp'] = datetime.now().isoformat()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            with open(log_path, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üìù Telegram message logged: {log_path}")
            return log_path
            
        except Exception as e:
            logger.error(f"‚ùå Failed to log telegram message: {e}")
            raise
    
    @classmethod
    def update_log(cls, log_path: Path, updates: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            log_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
            updates: –°–ª–æ–≤–∞—Ä—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥
            with open(log_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            data.update(updates)
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            data['updated_at'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥
            with open(log_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"üìù Telegram message log updated: {log_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to update telegram message log {log_path}: {e}")
            return False
    
    @classmethod
    def log_success(cls, log_path: Path, message_id: Optional[int] = None) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            log_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
            message_id: ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        updates = {
            'success': True,
            'completed_at': datetime.now().isoformat()
        }
        
        if message_id is not None:
            updates['message_id'] = message_id
        
        return cls.update_log(log_path, updates)
    
    @classmethod
    def log_error(cls, log_path: Path, error: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            log_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        updates = {
            'success': False,
            'error': str(error),
            'failed_at': datetime.now().isoformat()
        }
        
        return cls.update_log(log_path, updates)
    
    @classmethod
    def create_metadata(cls, 
                       chat_id: Optional[int] = None,
                       action: str = "send",
                       parse_mode: str = "MarkdownV2",
                       content_type: str = "FORMATTED",
                       original_text: str = "",
                       formatted_text: str = "") -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            action: –î–µ–π—Å—Ç–≤–∏–µ (send/edit)
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            original_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            formatted_text: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        return {
            'timestamp': datetime.now().isoformat(),
            'chat_id': chat_id,
            'action': action,
            'parse_mode': parse_mode,
            'content_type': content_type,
            'original_text': original_text,
            'formatted_text': formatted_text,
            'success': None  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
