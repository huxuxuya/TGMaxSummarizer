#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ VK MAX

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ VK MAX
2. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
3. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
5. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–ó–∞–ø—É—Å–∫: python test_image_download.py
"""

import asyncio
import logging
import json
from datetime import datetime
from pathlib import Path

from core.app_context import get_app_context
from infrastructure.vk.client import VKMaxClient
from shared.image_utils import ImageDownloader
from shared.image_viewer import ImageViewer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

class ImageDownloadTester:
    """–¢–µ—Å—Ç–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.ctx = get_app_context()
        self.vk_client = None
        self.image_downloader = ImageDownloader()
        self.image_viewer = ImageViewer()
    
    async def run_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ VK MAX")
        
        try:
            # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX
            await self._connect_to_vk_max()
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            chats = await self._get_chats()
            if not chats:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
                return
            
            # 3. –í—ã–±–∏—Ä–∞–µ–º —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_chat = await self._select_test_chat(chats)
            if not test_chat:
                logger.error("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self._load_messages(test_chat)
            if not messages:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
            
            # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            await self._analyze_messages_with_images(messages, test_chat)
            
            # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._show_statistics()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            import traceback
            traceback.print_exc()
        finally:
            if self.vk_client:
                await self.vk_client.disconnect()
    
    async def _connect_to_vk_max(self):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VK MAX"""
        logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX...")
        
        vk_token = self.ctx.config['bot'].vk_max_token
        if vk_token == "your_vk_max_token":
            raise ValueError("‚ùå VK MAX —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.vk_client = VKMaxClient(vk_token)
        success = await self.vk_client.connect()
        
        if not success:
            raise ConnectionError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VK MAX")
        
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK MAX —É—Å–ø–µ—à–Ω–æ")
    
    async def _get_chats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
        
        chats = await self.vk_client.get_available_chats()
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
        
        for i, chat in enumerate(chats[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            logger.info(f"  {i+1}. {chat.title} (ID: {chat.id})")
        
        return chats
    
    async def _select_test_chat(self, chats):
        """–í—ã–±—Ä–∞—Ç—å —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not chats:
            return None
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_chat = chats[0]
        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_chat.title} (ID: {test_chat.id})")
        return test_chat
    
    async def _load_messages(self, chat):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
        logger.info(f"üì® –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat.title}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        messages = await self.vk_client.load_chat_messages(chat.id, days_back=7)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return messages
    
    async def _analyze_messages_with_images(self, messages, chat):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
        
        messages_with_images = 0
        total_images = 0
        downloaded_images = 0
        
        for msg in messages:
            if msg.attachments:
                messages_with_images += 1
                logger.info(f"üì∑ –°–æ–æ–±—â–µ–Ω–∏–µ {msg.id} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(msg.attachments)} –≤–ª–æ–∂–µ–Ω–∏–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É attachments
                logger.info(f"   Attachments: {json.dumps(msg.attachments, indent=2, ensure_ascii=False)}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                image_urls = self.image_downloader.extract_image_urls(msg.attachments)
                logger.info(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_urls)}")
                
                for i, url in enumerate(image_urls):
                    logger.info(f"   URL {i+1}: {url}")
                    total_images += 1
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        saved_path = await self.image_downloader.download_image(
                            url, chat.id, msg.id, i
                        )
                        if saved_path:
                            downloaded_images += 1
                            logger.info(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_path}")
                        else:
                            logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    except Exception as e:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {messages_with_images}")
        logger.info(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {total_images}")
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {downloaded_images}")
    
    async def _show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        
        try:
            stats = self.image_viewer.get_image_stats()
            logger.info(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {stats.get('total_images', 0)}")
            logger.info(f"   –ß–∞—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {stats.get('chats_with_images', 0)}")
            logger.info(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats.get('total_size_mb', 0):.2f} MB")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            images_path = Path("images")
            if images_path.exists():
                logger.info(f"   –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_path.absolute()}")
                
                for chat_folder in images_path.glob("chats/*"):
                    if chat_folder.is_dir():
                        image_count = len(list(chat_folder.glob("*")))
                        logger.info(f"   üìÅ {chat_folder.name}: {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ò–ó VK MAX")
    print("=" * 50)
    
    tester = ImageDownloadTester()
    await tester.run_test()
    
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())
