#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π Llama —á–µ—Ä–µ–∑ Ollama API
"""

import asyncio
import base64
import json
import os
import sys
from pathlib import Path
from typing import List, Dict, Any
import logging

import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è Ollama
os.environ['OLLAMA_BASE_URL'] = 'http://192.168.1.75:11434'
OLLAMA_BASE_URL = os.environ.get('OLLAMA_BASE_URL', 'http://192.168.1.75:11434')

async def get_available_models(base_url: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ Ollama"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{base_url}/api/tags", timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    models = []
                    for model_info in data.get('models', []):
                        model_name = model_info.get('name', '')
                        if model_name:
                            models.append(model_name)
                    return models
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: HTTP {response.status}")
                    return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
        return []

def encode_image_to_base64(image_path: str) -> str:
    """–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return None

async def analyze_image_with_ollama(base_url: str, model_name: str, image_path: str, prompt: str = None) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Ollama"""
    
    if prompt is None:
        prompt = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å."
    
    # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
    image_base64 = encode_image_to_base64(image_path)
    if not image_base64:
        return None
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "model": model_name,
        "prompt": prompt,
        "images": [image_base64],
        "stream": False
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{base_url}/api/generate",
                json=payload,
                timeout=120  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('response', '')
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è {image_path}: HTTP {response.status}")
                    error_text = await response.text()
                    logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    return None
    except asyncio.TimeoutError:
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return None

def find_all_images(images_dir: str = "images") -> List[Path]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    images_path = Path(images_dir)
    if not images_path.exists():
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {images_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []
    
    image_extensions = {'.jpg', '.jpeg', '.png', '.webp', '.gif', '.bmp'}
    images = []
    
    for ext in image_extensions:
        images.extend(images_path.rglob(f"*{ext}"))
        images.extend(images_path.rglob(f"*{ext.upper()}"))
    
    return sorted(images)

def save_analysis_result(image_path: Path, analysis_text: str, model_name: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
        result_path = image_path.with_suffix('.txt')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content = f"""–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path.name}
–ú–æ–¥–µ–ª—å: {model_name}
–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {asyncio.get_event_loop().time()}
–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}

–†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:
{analysis_text}
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(result_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {image_path}: {e}")
        return False

def print_models_menu(models: list):
    """–í—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π"""
    logger.info(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π:")
    for i, model in enumerate(models, 1):
        logger.info(f"  {i}. {model}")

def select_model(models: list) -> str:
    """–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞"""
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (1-{len(models)}): ").strip()
            choice_num = int(choice)
            if 1 <= choice_num <= len(models):
                return models[choice_num - 1]
            else:
                print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(models)}")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

async def analyze_all_images(model_name: str, custom_prompt: str = None, max_images: int = None):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    images = find_all_images()
    
    if not images:
        logger.error("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    if max_images:
        images = images[:max_images]
        logger.info(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã–º–∏ {max_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': len(images),
        'processed': 0,
        'successful': 0,
        'failed': 0,
        'skipped': 0
    }
    
    logger.info(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {stats['total']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_name}")
    if custom_prompt:
        logger.info(f"üìù –ü—Ä–æ–º—Ç: {custom_prompt}")
    else:
        logger.info("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º—Ç")
    
    for i, image_path in enumerate(images, 1):
        logger.info(f"\n--- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}/{stats['total']}: {image_path.name} ---")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_path = image_path.with_suffix('.txt')
        if result_path.exists():
            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ): {result_path.name}")
            stats['skipped'] += 1
            continue
        
        stats['processed'] += 1
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info(f"üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {image_path}")
        analysis_result = await analyze_image_with_ollama(
            OLLAMA_BASE_URL, 
            model_name, 
            str(image_path), 
            custom_prompt
        )
        
        if analysis_result:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if save_analysis_result(image_path, analysis_result, model_name):
                stats['successful'] += 1
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {image_path.name}")
            else:
                stats['failed'] += 1
        else:
            stats['failed'] += 1
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å: {image_path.name}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(1)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    logger.info("=" * 60)
    logger.info(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['total']}")
    logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']}")
    logger.info(f"   –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['successful']}")
    logger.info(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å): {stats['skipped']}")
    logger.info(f"   –û—à–∏–±–æ–∫: {stats['failed']}")
    
    if stats['processed'] > 0:
        success_rate = (stats['successful'] / stats['processed']) * 100
        logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    logger.info("=" * 60)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Å–µ—Ö —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    images_dir = Path("images")
    if not images_dir.exists():
        logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'images' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'images'")
        return
    
    logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_dir.resolve()}")
    logger.info(f"üåê Ollama URL: {OLLAMA_BASE_URL}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    logger.info(f"\nüîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞ {OLLAMA_BASE_URL}...")
    available_models = await get_available_models(OLLAMA_BASE_URL)
    
    if not available_models:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:", OLLAMA_BASE_URL)
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
    print_models_menu(available_models)
    selected_model = select_model(available_models)
    
    logger.info(f"\n‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç
    print("\nüìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ):")
    custom_prompt = input().strip()
    
    if not custom_prompt:
        custom_prompt = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å."
        logger.info(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º—Ç: {custom_prompt}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ª–∏–º–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print("\nüî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—Å–µ—Ö):")
    max_images_input = input().strip()
    
    max_images = None
    if max_images_input:
        try:
            max_images = int(max_images_input)
            if max_images <= 0:
                logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                max_images = None
        except ValueError:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            max_images = None
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    await analyze_all_images(selected_model, custom_prompt, max_images)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n\n‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
