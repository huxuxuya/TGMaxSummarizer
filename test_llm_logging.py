#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è LLM
"""
import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from llm_logger import LLMLogger
from chat_analyzer import ChatAnalyzer
from config import AI_PROVIDERS, ENABLE_LLM_LOGGING

async def test_llm_logging():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è LLM"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è LLM...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"üìã ENABLE_LLM_LOGGING: {ENABLE_LLM_LOGGING}")
    
    if not ENABLE_LLM_LOGGING:
        print("‚ö†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        {
            'message_time': 1697123456789,
            'sender_name': '–ò–≤–∞–Ω–æ–≤–∞ –ú.–ê.',
            'text': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞–ø–æ–º–∏–Ω–∞—é –ø—Ä–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00.'
        },
        {
            'message_time': 1697123516789,
            'sender_name': '–ü–µ—Ç—Ä–æ–≤ –°.–í.',
            'text': '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–¥–∞ —Å–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é?'
        },
        {
            'message_time': 1697123576789,
            'sender_name': '–°–∏–¥–æ—Ä–æ–≤–∞ –ê.–ò.',
            'text': '–î–µ–Ω—å–≥–∏ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å –¥–æ –ø—è—Ç–Ω–∏—Ü—ã.'
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ChatAnalyzer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å Ollama –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å Ollama –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º...")
    
    try:
        result = await analyzer.analyze_chat_with_specific_model(
            messages=test_messages,
            provider_name='ollama',
            model_id='gpt-oss:20b',
            user_id=12345
        )
        
        if result:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            
            if isinstance(result, dict):
                print(f"   - –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ' if result.get('summary') else '‚ùå'}")
                print(f"   - –†–µ—Ñ–ª–µ–∫—Å–∏—è: {'‚úÖ' if result.get('reflection') else '‚ùå'}")
                print(f"   - –£–ª—É—á—à–µ–Ω–∏–µ: {'‚úÖ' if result.get('improved') else '‚ùå'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
            logs_dir = "llm_logs"
            today = datetime.now().strftime("%Y-%m-%d")
            date_dir = os.path.join(logs_dir, today)
            
            if os.path.exists(date_dir):
                print(f"üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {date_dir}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
                expected_files = [
                    "01_formatted_messages.txt",
                    "02_summarization_request.txt", 
                    "03_summarization_response.txt",
                    "08_raw_result.txt",
                    "09_formatted_result.txt",
                    "00_session_summary.txt"
                ]
                
                created_files = []
                for filename in expected_files:
                    filepath = os.path.join(date_dir, filename)
                    if os.path.exists(filepath):
                        created_files.append(filename)
                        print(f"   ‚úÖ {filename}")
                    else:
                        print(f"   ‚ùå {filename} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(created_files)}/{len(expected_files)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if created_files:
                    sample_file = os.path.join(date_dir, created_files[0])
                    print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {created_files[0]}:")
                    print("-" * 50)
                    try:
                        with open(sample_file, 'r', encoding='utf-8') as f:
                            content = f.read()
                            print(content[:500] + "..." if len(content) > 500 else content)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    print("-" * 50)
                
                return len(created_files) >= 3  # –ú–∏–Ω–∏–º—É–º 3 —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã
            else:
                print(f"‚ùå –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: {date_dir}")
                return False
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è LLM...")
    
    try:
        success = await test_llm_logging()
        if success:
            print("\nüéâ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\nüí• –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏!")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
