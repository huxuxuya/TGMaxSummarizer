"""
–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
import json
import logging
import os
import re
from typing import List, Dict, Optional, Any
from datetime import datetime

from ai_providers import ProviderFactory
from config import AI_PROVIDERS, DEFAULT_AI_PROVIDER, FALLBACK_PROVIDERS, ENABLE_REFLECTION, AUTO_IMPROVE_SUMMARY, ENABLE_LLM_LOGGING, LLM_LOGS_DIR
from telegram_formatter import TelegramFormatter
from llm_logger import LLMLogger
from prompts import PromptTemplates
from utils import get_sender_display_name

logger = logging.getLogger(__name__)

def escape_markdown(text: str) -> str:
    """
    DEPRECATED: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ telegramify-markdown –≤ TelegramMessageSender.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    import logging
    logger = logging.getLogger(__name__)
    logger.warning("escape_markdown() is deprecated. Use telegramify-markdown instead.")
    return text

class ChatAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —á–∞—Ç–æ–≤
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.py)
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
        if config is None or isinstance(config, str):
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ AI_PROVIDERS
            self.config = {}
            for provider_name, provider_config in AI_PROVIDERS.items():
                if provider_name == 'gigachat':
                    self.config['GIGACHAT_API_KEY'] = provider_config.get('api_key', '')
                elif provider_name == 'chatgpt':
                    self.config['OPENAI_API_KEY'] = provider_config.get('api_key', '')
                elif provider_name == 'openrouter':
                    self.config['OPENROUTER_API_KEY'] = provider_config.get('api_key', '')
                elif provider_name == 'gemini':
                    self.config['GEMINI_API_KEY'] = provider_config.get('api_key', '')
                elif provider_name == 'ollama':
                    # –î–ª—è Ollama –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    self.config['ollama'] = provider_config
                    logger.debug(f"üîó DEBUG ChatAnalyzer: ollama config = {provider_config}")
        else:
            self.config = config
            
        self.provider_factory = ProviderFactory()
        self.current_provider = None
        self.provider_history = []
        
        logger.info("‚úÖ ChatAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
        logger.debug(f"üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ChatAnalyzer: {self.config}")
    
    async def analyze_chat_by_date(self, messages: List[Dict], provider_name: Optional[str] = None, chat_context: Optional[Dict] = None) -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            provider_name: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
            chat_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if provider_name:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                if provider_name == 'ollama' and 'ollama' in self.config:
                    provider = self.provider_factory.create_provider(provider_name, self.config['ollama'])
                else:
                    provider = self.provider_factory.create_provider(provider_name, self.config)
                if not provider:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                    return None
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                best_provider_name = await self.provider_factory.get_best_available_provider(
                    self.config, 
                    DEFAULT_AI_PROVIDER
                )
                if not best_provider_name:
                    logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                if best_provider_name == 'ollama' and 'ollama' in self.config:
                    provider = self.provider_factory.create_provider(best_provider_name, self.config['ollama'])
                else:
                    provider = self.provider_factory.create_provider(best_provider_name, self.config)
                provider_name = best_provider_name
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if not await provider.initialize():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                
                # –ü—Ä–æ–±—É–µ–º fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–∫—Ä–æ–º–µ Ollama)
                if provider_name != 'ollama':
                    for fallback_name in FALLBACK_PROVIDERS:
                        if fallback_name != provider_name and fallback_name != 'ollama':
                            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {fallback_name}")
                            # –°–æ–∑–¥–∞–µ–º fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                            if fallback_name == 'ollama' and 'ollama' in self.config:
                                fallback_provider = self.provider_factory.create_provider(fallback_name, self.config['ollama'])
                            else:
                                fallback_provider = self.provider_factory.create_provider(fallback_name, self.config)
                            if fallback_provider and await fallback_provider.initialize():
                                provider = fallback_provider
                                provider_name = fallback_name
                                break
                    else:
                        logger.error("‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                        return None
                else:
                    logger.error("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
                    return None
            
            # –ï—Å–ª–∏ —ç—Ç–æ OpenRouter, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å
            # (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Å user_id –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
            
            self.current_provider = provider
            self.provider_history.append({
                'provider': provider_name,
                'timestamp': datetime.now(),
                'messages_count': len(messages)
            })
            
            logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.get_display_name()}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summary = await provider.summarize_chat(messages, chat_context)
            
            if summary:
                logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {provider.get_display_name()}")
                return summary
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –æ—Ç {provider.get_display_name()}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
            return None
    
    async def get_available_providers(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            available_providers = []
            
            for provider_name in self.provider_factory.get_available_providers():
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                if provider_name == 'ollama' and 'ollama' in self.config:
                    provider = self.provider_factory.create_provider(provider_name, self.config['ollama'])
                else:
                    provider = self.provider_factory.create_provider(provider_name, self.config)
                if provider:
                    is_available = await provider.is_available()
                    provider_info = provider.get_provider_info()
                    provider_info['available'] = is_available
                    provider_info['name'] = provider_name
                    available_providers.append(provider_info)
            
            return available_providers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            return []
    
    def get_providers_with_saved_status(self, db_manager=None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        
        Args:
            db_manager: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        """
        try:
            providers = []
            
            for provider_name in self.provider_factory.get_available_providers():
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                if provider_name == 'ollama' and 'ollama' in self.config:
                    provider = self.provider_factory.create_provider(provider_name, self.config['ollama'])
                else:
                    provider = self.provider_factory.create_provider(provider_name, self.config)
                if provider:
                    provider_info = provider.get_provider_info()
                    provider_info['name'] = provider_name
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    if db_manager:
                        availability_stats = db_manager.get_provider_availability(provider_name)
                        if availability_stats:
                            provider_info['available'] = availability_stats.get('is_available', False)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î, —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)
                            provider_info['available'] = False
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î, —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
                        provider_info['available'] = False
                    
                    providers.append(provider_info)
            
            return providers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            return []
    
    async def validate_provider(self, provider_name: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            provider_name: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤–∞–ª–∏–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            if provider_name == 'ollama' and 'ollama' in self.config:
                provider = self.provider_factory.create_provider(provider_name, self.config['ollama'])
            else:
                provider = self.provider_factory.create_provider(provider_name, self.config)
            if not provider:
                return False
            
            return await provider.is_available()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {e}")
            return False
    
    def get_provider_info(self, provider_name: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        
        Args:
            provider_name: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –∏–ª–∏ None
        """
        return self.provider_factory.get_provider_info(provider_name, self.config)
    
    def get_current_provider(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ None
        """
        return self.current_provider.get_name() if self.current_provider else None
    
    def get_provider_history(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        return self.provider_history.copy()
    
    async def test_all_providers(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            results = {}
            
            for provider_name in self.provider_factory.get_available_providers():
                logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                is_available = await self.validate_provider(provider_name)
                results[provider_name] = is_available
                
                status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if is_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                logger.info(f"   {status}")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            return {}
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_analyses = len(self.provider_history)
        
        if total_analyses == 0:
            return {
                'total_analyses': 0,
                'providers_used': {},
                'current_provider': None
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        providers_used = {}
        for entry in self.provider_history:
            provider = entry['provider']
            providers_used[provider] = providers_used.get(provider, 0) + 1
        
        return {
            'total_analyses': total_analyses,
            'providers_used': providers_used,
            'current_provider': self.get_current_provider(),
            'last_analysis': self.provider_history[-1] if self.provider_history else None
        }
    
    # Backward compatibility methods
    def optimize_text(self, messages: List[Dict]) -> List[Dict]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (backward compatibility)
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if self.current_provider:
            return self.current_provider.optimize_text(messages)
        else:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            import re
            optimized_messages = []
            
            for msg in messages:
                text = msg.get('text', '').strip()
                if not text:
                    continue
                    
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                text = re.sub(r'\s+', ' ', text)
                
                sender_id = msg.get('sender_id')
                sender_name = get_sender_display_name(
                    sender_id,
                    msg.get('sender_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                )
                time = msg.get('message_time', 0)
                
                if time:
                    try:
                        dt = datetime.fromtimestamp(time / 1000)
                        time_str = dt.strftime('%H:%M')
                    except (ValueError, OSError):
                        time_str = "??:??"
                else:
                    time_str = "??:??"
                
                optimized_messages.append({
                    'time': time_str,
                    'sender': sender_name,
                    'text': text
                })
            
            return optimized_messages
    
    def format_chat_for_analysis(self, messages: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (backward compatibility)
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if self.current_provider:
            return self.current_provider.format_messages_for_analysis(messages)
        else:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            formatted_lines = []
            
            for msg in messages:
                time_str = msg.get('time', '??:??')
                sender = msg.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                text = msg.get('text', '')
                
                if text.strip():
                    line = f"[{time_str}] {sender}: {text}"
                    formatted_lines.append(line)
            
            full_text = "\n".join(formatted_lines)
            
            max_length = 8000
            if len(full_text) > max_length:
                full_text = full_text[:max_length] + "\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)"
            
            return full_text
    
    async def analyze_chat_with_specific_model(self, messages: List[Dict], provider_name: str, model_id: str = None, user_id: int = None, enable_reflection: bool = None, clean_data_first: bool = False) -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é (–¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ)
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            provider_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            model_id: ID –º–æ–¥–µ–ª–∏ (–¥–ª—è OpenRouter)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            enable_reflection: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (None = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é)
            clean_data_first: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LLM
            
        Returns:
            –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é: {provider_name}")
            if model_id:
                logger.info(f"üîó –ú–æ–¥–µ–ª—å: {model_id}")
            
            # –°–æ–∑–¥–∞–µ–º LLM –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            llm_logger = None
            if ENABLE_LLM_LOGGING:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
                date = None
                if messages and len(messages) > 0:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    first_msg = messages[0]
                    if 'date' in first_msg:
                        date = first_msg['date']
                    elif 'message_time' in first_msg:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ –¥–∞—Ç—É
                        from datetime import datetime
                        try:
                            dt = datetime.fromtimestamp(first_msg['message_time'] / 1000)
                            date = dt.strftime('%Y-%m-%d')
                        except (ValueError, OSError):
                            pass
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                if clean_data_first:
                    scenario = "with_cleaning"
                elif enable_reflection if enable_reflection is not None else ENABLE_REFLECTION:
                    scenario = "with_reflection"
                else:
                    scenario = "without_reflection"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —Ñ–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
                test_mode = os.environ.get('TEST_MODE') == 'true'
                
                # Use actual model_id parameter, not environment variable
                llm_logger = LLMLogger(
                    LLM_LOGS_DIR, 
                    date=date, 
                    scenario=scenario,
                    test_mode=test_mode,
                    model_name=model_id  # Use method parameter, not env var
                )
                # –ù–ï –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ - –∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫ –≤ —Å–≤–æ—é –ø–∞–ø–∫—É
                llm_logger.set_session_info(provider_name, model_id, None, user_id)
                logger.info(f"üìÅ LLM Logger —Å–æ–∑–¥–∞–Ω: {llm_logger.get_logs_path()}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            if provider_name == 'ollama' and 'ollama' in self.config:
                provider = self.provider_factory.create_provider(provider_name, self.config['ollama'])
            else:
                provider = self.provider_factory.create_provider(provider_name, self.config)
            if not provider:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                return None
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if llm_logger:
                provider.set_llm_logger(llm_logger)
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë –î–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if model_id and hasattr(provider, 'set_model'):
                provider.set_model(model_id)
                logger.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å {provider_name}: {model_id}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if not await provider.initialize():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                return None
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
            if llm_logger:
                llm_logger.log_input_messages_raw(messages)
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–°–ê–ú–´–ô –ü–ï–†–í–´–ô –®–ê–ì)
            if clean_data_first:
                logger.info("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                temp_chat_context = {
                    'total_messages': len(messages),
                    'date': messages[0].get('message_time', 0) if messages else 0,
                    'provider': provider_name,
                    'model': model_id
                }
                
                messages = await self.clean_messages(provider, messages, temp_chat_context, llm_logger)
                if not messages:
                    logger.error("‚ùå –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π")
                    return None
                logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if llm_logger:
                    llm_logger.log_filtered_messages_raw(messages)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞)
            chat_context = {
                'total_messages': len(messages),
                'date': messages[0].get('message_time', 0) if messages else 0,
                'provider': provider_name,
                'model': model_id
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summary = await provider.summarize_chat(messages, chat_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ - –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
            if not summary:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –æ—Ç {provider_name}")
                logger.warning("‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                if llm_logger:
                    llm_logger.log_session_summary({
                        'summary': None,
                        'reflection': None,
                        'improved': None,
                        'error': '–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
                    })
                
                return None
            
            # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if summary:
                logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {provider_name}")
                if model_id:
                    logger.info(f"üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_id}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                logger.debug(f"=== REFLECTION CHECK ===")
                logger.debug(f"ENABLE_REFLECTION value: {ENABLE_REFLECTION}")
                logger.debug(f"ENABLE_REFLECTION type: {type(ENABLE_REFLECTION)}")
                logger.debug(f"enable_reflection override: {enable_reflection}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                should_reflect = enable_reflection if enable_reflection is not None else ENABLE_REFLECTION
                logger.debug(f"should_reflect: {should_reflect}")
                
                if should_reflect:
                    logger.debug("=== REFLECTION ENABLED ===")
                    logger.debug(f"Provider: {provider}")
                    logger.debug(f"Summary: {summary[:100]}...")
                    logger.debug(f"Messages count: {len(messages)}")
                    logger.debug(f"Chat context: {chat_context}")
                    
                    reflection = await self.perform_reflection(provider, summary, messages, chat_context, llm_logger)
                    logger.debug(f"Reflection result: {reflection}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
                    if not reflection:
                        logger.warning("‚ö†Ô∏è –†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
                        logger.warning("‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å - —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                        logger.debug("=== REFLECTION FAILED ===")
                        result = {
                            'summary': summary,
                            'reflection': None,
                            'improved': None,
                            'display_text': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n*‚ùå –û—à–∏–±–∫–∞:* –†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                            'display_text_alt': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n*‚ùå –û—à–∏–±–∫–∞:* –†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                        }
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if llm_logger:
                            llm_logger.log_raw_result(summary)
                            llm_logger.log_formatted_result(result['display_text'])
                            llm_logger.log_session_summary(result)
                            llm_logger.log_final_result_raw(result)
                        
                        return result
                    
                    # –†–µ—Ñ–ª–µ–∫—Å–∏—è —É—Å–ø–µ—à–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    if reflection:
                        logger.info("üîÑ –†–µ—Ñ–ª–µ–∫—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        logger.debug(f"Reflection text: {reflection[:200]}...")
                        
                        # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç TelegramMessageSender
                        escaped_reflection = reflection
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                        if AUTO_IMPROVE_SUMMARY:
                            improved_summary = await self.improve_summary_with_reflection(
                                provider, summary, reflection, messages, chat_context, llm_logger
                            )
                            if improved_summary:
                                logger.info("‚ú® –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–µ–Ω–∞")
                                escaped_improved = improved_summary
                                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º
                                result = {
                                    'summary': summary,
                                    'reflection': reflection,
                                    'improved': improved_summary,
                                    'display_text': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\nü§î *–†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑*\n{escaped_reflection}\n\n‚ú® *–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è*\n{escaped_improved}",
                                    'display_text_alt': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n||ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑:||\n||{escaped_reflection}||\n\n||‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:||\n||{escaped_improved}||"
                                }
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                if llm_logger:
                                    llm_logger.log_raw_result(summary)
                                    llm_logger.log_formatted_result(result['display_text'])
                                    llm_logger.log_session_summary(result)
                                    llm_logger.log_final_result_raw(result)
                                
                                return result
                            else:
                                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π")
                                result = {
                                    'summary': summary,
                                    'reflection': reflection,
                                    'improved': None,
                                    'display_text': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\nü§î *–†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è*\n{escaped_reflection}",
                                    'display_text_alt': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n||ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è:||\n||{escaped_reflection}||"
                                }
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                                if llm_logger:
                                    llm_logger.log_raw_result(summary)
                                    llm_logger.log_formatted_result(result['display_text'])
                                    llm_logger.log_session_summary(result)
                                    llm_logger.log_final_result_raw(result)
                                
                                return result
                        else:
                            result = {
                                'summary': summary,
                                'reflection': reflection,
                                'improved': None,
                                'display_text': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\nü§î *–†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è*\n{escaped_reflection}",
                                'display_text_alt': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n||ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è:||\n||{escaped_reflection}||"
                            }
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            if llm_logger:
                                llm_logger.log_raw_result(summary)
                                llm_logger.log_formatted_result(result['display_text'])
                                llm_logger.log_session_summary(result)
                            
                            return result
                else:
                    logger.info("‚ÑπÔ∏è –†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    logger.debug("=== REFLECTION DISABLED ===")
                    result = {
                        'summary': summary,
                        'reflection': None,
                        'improved': None,
                        'display_text': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n*‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* –†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
                        'display_text_alt': f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n*‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* –†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
                    }
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if llm_logger:
                        llm_logger.log_raw_result(summary)
                        llm_logger.log_formatted_result(result['display_text'])
                        llm_logger.log_session_summary(result)
                        llm_logger.log_final_result_raw(result)
                    
                    return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é: {e}")
            return None
    
    async def perform_reflection(self, provider, summary: str, messages: List[Dict], chat_context: Dict, llm_logger=None) -> Optional[str]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –µ—ë —É–ª—É—á—à–µ–Ω–∏—è
        
        Args:
            provider: AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            summary: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info("ü§î –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π")
            logger.debug(f"Summary length: {len(summary)}")
            logger.debug(f"Messages count: {len(messages)}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            reflection_prompt = self._create_reflection_prompt(summary, messages, chat_context)
            logger.debug(f"Reflection prompt length: {len(reflection_prompt)}")
            logger.debug(f"=== REFLECTION PROMPT ===")
            logger.debug(reflection_prompt)
            logger.debug(f"=== END REFLECTION PROMPT ===")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            logger.debug("Calling provider.generate_response for reflection...")
            reflection_result = await provider.generate_response(reflection_prompt)
            
            if reflection_result:
                logger.info("‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                logger.debug(f"Reflection result length: {len(reflection_result)}")
                return reflection_result
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
                logger.debug("Reflection result is None or empty")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
            return None
    
    def _create_reflection_prompt(self, summary: str, messages: List[Dict], chat_context: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        
        Args:
            summary: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        """
        total_messages = len(messages)
        date = chat_context.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        
        return PromptTemplates.get_reflection_prompt(summary, date, total_messages)
    
    async def improve_summary_with_reflection(self, provider, original_summary: str, reflection: str, messages: List[Dict], chat_context: Dict, llm_logger=None) -> Optional[str]:
        """
        –£–ª—É—á—à–∞–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        
        Args:
            provider: AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            original_summary: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            reflection: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info("‚ú® –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            improvement_prompt = self._create_improvement_prompt(original_summary, reflection, messages, chat_context)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ
            if llm_logger:
                llm_logger.log_improvement_request(improvement_prompt)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            import time
            start_time = time.time()
            improved_summary = await provider.generate_response(improvement_prompt)
            end_time = time.time()
            response_time = end_time - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ
            if llm_logger and improved_summary:
                llm_logger.log_improvement_response(improved_summary, response_time)
                llm_logger.log_stage_time('improvement', response_time)
            
            if improved_summary:
                logger.info("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞")
                return improved_summary
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return None
    
    def _create_improvement_prompt(self, original_summary: str, reflection: str, messages: List[Dict], chat_context: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        
        Args:
            original_summary: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            reflection: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        """
        return PromptTemplates.get_improvement_prompt(original_summary, reflection)
    
    async def clean_messages(self, provider, messages: List[Dict], chat_context: dict, llm_logger = None) -> List[Dict]:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM –ø–µ—Ä–µ–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        –£–¥–∞–ª—è–µ—Ç —à—É–º, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é, –º–∏–∫—Ä–æ–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            llm_logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            messages_text = ""
            for i, msg in enumerate(messages):
                message_id = msg.get('id', i)
                text = msg.get('text', '').strip()
                if text:
                    messages_text += f"ID: {message_id}\n–¢–µ–∫—Å—Ç: {text}\n\n"
            
            if not messages_text.strip():
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                return messages
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            from prompts import PromptTemplates
            cleaning_prompt = PromptTemplates.DATA_CLEANING_PROMPT.format(messages=messages_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏
            if llm_logger:
                llm_logger.log_cleaning_request(cleaning_prompt)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ LLM
            import time
            start_time = time.time()
            response = await provider.generate_response(cleaning_prompt)
            end_time = time.time()
            response_time = end_time - start_time
            
            if not response:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                return messages
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—á–∏—Å—Ç–∫–∏
            if llm_logger:
                llm_logger.log_cleaning_response(response, response_time)
                llm_logger.log_stage_time('cleaning', response_time)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            import json
            import re
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ —Ç–µ–∫—Å—Ç)
            json_match = re.search(r'\[[\d,\s]+\]', response)
            if not json_match:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {response}")
                return messages
            
            try:
                selected_ids = json.loads(json_match.group())
                logger.info(f"‚úÖ LLM –≤—ã–±—Ä–∞–ª {len(selected_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(messages)}")
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                return messages
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º ID
            cleaned_messages = []
            for i, msg in enumerate(messages):
                message_id = msg.get('id', i)
                if message_id in selected_ids:
                    cleaned_messages.append(msg)
            
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(cleaned_messages)} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return cleaned_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return messages
    
    async def structured_analysis(self, provider, messages: List[Dict], chat_context: dict, llm_logger=None) -> dict:
        """
        –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–µ–π
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            llm_logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
            
            # –®–∞–≥ 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            logger.info("üìä –®–∞–≥ 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
            classification = await self._classify_messages(provider, messages, llm_logger)
            
            if not classification:
                logger.error("‚ùå –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return None
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º irrelevant —Å–æ–æ–±—â–µ–Ω–∏—è
            relevant_messages = self._filter_by_classification(messages, classification)
            logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(relevant_messages)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –®–∞–≥ 2: –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–ª–æ—Ç–æ–≤
            logger.info("üîç –®–∞–≥ 2: –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–ª–æ—Ç–æ–≤...")
            events = await self._extract_slots(provider, relevant_messages, classification, llm_logger)
            
            if not events:
                logger.error("‚ùå –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return None
            
            logger.info(f"‚úÖ –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(events)} —Å–æ–±—ã—Ç–∏–π")
            
            # –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
            logger.info("üìù –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π...")
            summary = await self._generate_parent_summary(provider, events, llm_logger)
            
            if not summary:
                logger.error("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return None
            
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            return {
                'summary': summary,
                'events': events,
                'classification': classification
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return None
    
    async def _classify_messages(self, provider, messages: List[Dict], llm_logger=None, retry_count=0, stream_callback=None) -> List[Dict]:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º JSON
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            llm_logger: –õ–æ–≥–≥–µ—Ä
            retry_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            from prompts import MESSAGE_CLASSIFICATION_PROMPT
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            messages_json = json.dumps([{"id": msg.get('message_id', msg.get('id', '')), "text": msg.get('text')} for msg in messages], ensure_ascii=False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = MESSAGE_CLASSIFICATION_PROMPT.format(messages_json=messages_json)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            if llm_logger:
                llm_logger.log_classification_request(prompt)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            import time
            start_time = time.time()
            response = await provider.generate_response(prompt, stream_callback=stream_callback)
            end_time = time.time()
            response_time = end_time - start_time
            
            if not response:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return []
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if llm_logger:
                llm_logger.log_classification_response(response, response_time)
                llm_logger.log_stage_time('classification', response_time)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
            try:
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤
                cleaned_response = self._clean_json_response(response)
                classification = json.loads(cleaned_response)
                logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(classification)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                return classification
            except json.JSONDecodeError as e:
                if retry_count < 2:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}): {str(e)}")
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏
                    error_prompt = f"{prompt}\n\n–û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê JSON: {str(e)}\n–ò—Å–ø—Ä–∞–≤—å —Ñ–æ—Ä–º–∞—Ç –∏ –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON-–º–∞—Å—Å–∏–≤."
                    return await self._classify_messages_with_error(provider, error_prompt, llm_logger, retry_count + 1)
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π JSON –ø–æ—Å–ª–µ {retry_count + 1} –ø–æ–ø—ã—Ç–æ–∫")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def _classify_messages_with_error(self, provider, error_prompt: str, llm_logger=None, retry_count=0) -> List[Dict]:
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI
            error_prompt: –ü—Ä–æ–º–ø—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏
            llm_logger: –õ–æ–≥–≥–µ—Ä
            retry_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            import time
            start_time = time.time()
            response = await provider.generate_response(error_prompt)
            end_time = time.time()
            response_time = end_time - start_time
            
            if not response:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                return []
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if llm_logger:
                llm_logger.log_classification_response(response, response_time)
                llm_logger.log_stage_time('classification', response_time)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
            try:
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤
                cleaned_response = self._clean_json_response(response)
                classification = json.loads(cleaned_response)
                logger.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {len(classification)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                return classification
            except json.JSONDecodeError as e:
                if retry_count < 2:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}): {str(e)}")
                    # –ï—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞
                    new_error_prompt = f"{error_prompt}\n\n–û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê JSON: {str(e)}\n–ò—Å–ø—Ä–∞–≤—å —Ñ–æ—Ä–º–∞—Ç –∏ –≤–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON-–º–∞—Å—Å–∏–≤."
                    return await self._classify_messages_with_error(provider, new_error_prompt, llm_logger, retry_count + 1)
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π JSON –ø–æ—Å–ª–µ {retry_count + 1} –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    return []
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return []
    
    def _filter_by_classification(self, messages: List[Dict], classification: List[Dict]) -> List[Dict]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –∏—Å–∫–ª—é—á–∞—è irrelevant
        
        Args:
            messages: –ò—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            classification: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            classification_dict = {item.get('message_id', item.get('id')): item.get('class') for item in classification}
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            relevant_messages = []
            for msg in messages:
                message_id = str(msg.get('message_id', msg.get('id', '')))
                msg_class = classification_dict.get(message_id)
                
                if msg_class and msg_class != 'irrelevant':
                    relevant_messages.append(msg)
            
            logger.info(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(relevant_messages)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return relevant_messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return messages
    
    async def _extract_slots(self, provider, messages: List[Dict], classification: List[Dict], llm_logger=None, stream_callback=None) -> List[Dict]:
        """
        –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            classification: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            llm_logger: –õ–æ–≥–≥–µ—Ä
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            from prompts import SLOT_EXTRACTION_PROMPT
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            classification_dict = {item.get('message_id'): item.get('class') for item in classification}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞
            messages_with_class = []
            for msg in messages:
                message_id = str(msg.get('message_id', msg.get('id', '')))
                msg_class = classification_dict.get(message_id, 'unknown')
                messages_with_class.append({
                    "id": message_id,
                    "text": msg.get('text'),
                    "type": msg_class
                })
            
            messages_json = json.dumps(messages_with_class, ensure_ascii=False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = SLOT_EXTRACTION_PROMPT.format(messages_json=messages_json)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            if llm_logger:
                llm_logger.log_extraction_request(prompt)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            import time
            start_time = time.time()
            response = await provider.generate_response(prompt, stream_callback=stream_callback)
            end_time = time.time()
            response_time = end_time - start_time
            
            if not response:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏")
                return []
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if llm_logger:
                llm_logger.log_extraction_response(response, response_time)
                llm_logger.log_stage_time('extraction', response_time)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
            try:
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤
                cleaned_response = self._clean_json_response(response)
                events = json.loads(cleaned_response)
                logger.info(f"‚úÖ –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(events)} —Å–æ–±—ã—Ç–∏–π")
                return events
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–∏ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏: {str(e)}")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤: {e}")
            return []
    
    async def _generate_parent_summary(self, provider, events: List[Dict], llm_logger=None, stream_callback=None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        
        Args:
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä AI
            events: –°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            llm_logger: –õ–æ–≥–≥–µ—Ä
            
        Returns:
            –¢–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            from prompts import PARENT_SUMMARY_PROMPT
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            events_json = json.dumps(events, ensure_ascii=False, indent=2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = PARENT_SUMMARY_PROMPT.format(events_json=events_json)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            if llm_logger:
                llm_logger.log_parent_summary_request(prompt)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            import time
            start_time = time.time()
            response = await provider.generate_response(prompt, stream_callback=stream_callback)
            end_time = time.time()
            response_time = end_time - start_time
            
            if not response:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏")
                return None
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if llm_logger:
                llm_logger.log_parent_summary_response(response, response_time)
                llm_logger.log_stage_time('parent_summary', response_time)
            
            logger.info("‚úÖ –°–≤–æ–¥–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {e}")
            return None
    
    async def structured_analysis_with_specific_model(self, messages: List[Dict], provider_name: str, model_name: str, user_id: int) -> dict:
        """
        –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            provider_name: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            model_name: –ò–º—è –º–æ–¥–µ–ª–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            if provider_name == 'ollama' and 'ollama' in self.config:
                provider = self.provider_factory.create_provider(provider_name, self.config['ollama'])
            else:
                provider = self.provider_factory.create_provider(provider_name, self.config)
            if not provider:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name}")
                return None
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
            if model_name:
                provider.set_model(model_name)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            chat_context = {
                'total_messages': len(messages),
                'date': messages[0].get('date') if messages else None,
                'chat_id': messages[0].get('vk_chat_id') if messages else None
            }
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å —É—á–µ—Ç–æ–º TEST_MODE
            chat_id_for_logger = str(chat_context.get('chat_id', 'unknown'))
            
            # Check TEST_MODE
            test_mode = os.environ.get('TEST_MODE') == 'true'
            
            # Always use model_name parameter, not TEST_MODEL_NAME
            llm_logger = LLMLogger(
                scenario="structured_analysis",
                model_name=model_name,  # ‚úÖ Use actual model parameter
                test_mode=test_mode     # ‚úÖ Pass test_mode flag
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            llm_logger.set_session_info(provider_name, model_name, chat_id_for_logger, user_id)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            result = await self.structured_analysis(provider, messages, chat_context, llm_logger)
            
            if result:
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if llm_logger:
                    llm_logger.log_raw_result(result.get('summary', ''))
                    llm_logger.log_formatted_result(result.get('summary', ''))
                    llm_logger.log_session_summary({
                        'summary': result.get('summary'),
                        'events': result.get('events'),
                        'classification': result.get('classification')
                    })
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π
                return {
                    'summary': result.get('summary', ''),
                    'display_text': result.get('summary', ''),
                    'events': result.get('events', []),
                    'classification': result.get('classification', [])
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ —Å –º–æ–¥–µ–ª—å—é: {e}")
            return None
    
    def _clean_json_response(self, response: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç markdown –±–ª–æ–∫–æ–≤ –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ JSON
        
        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            
        Returns:
            –û—á–∏—â–µ–Ω–Ω—ã–π JSON
        """
        try:
            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ ```json ... ```
            if '```json' in response:
                start = response.find('```json') + 7
                end = response.find('```', start)
                if end != -1:
                    response = response[start:end].strip()
            elif '```' in response:
                start = response.find('```') + 3
                end = response.find('```', start)
                if end != -1:
                    response = response[start:end].strip()
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            response = response.strip()
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü JSON –º–∞—Å—Å–∏–≤–∞
            start_bracket = response.find('[')
            end_bracket = response.rfind(']')
            
            if start_bracket != -1 and end_bracket != -1 and end_bracket > start_bracket:
                response = response[start_bracket:end_bracket + 1]
            
            return response
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ JSON –æ—Ç–≤–µ—Ç–∞: {e}")
            return response
    
    async def get_available_ollama_models(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞ Ollama
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        """
        import aiohttp
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞ Ollama –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            ollama_base_url = os.environ.get('OLLAMA_BASE_URL', 'http://localhost:11434')
            
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{ollama_base_url}/api/tags", timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        models = []
                        for model_info in data.get('models', []):
                            model_name = model_info.get('name', '')
                            if model_name:
                                models.append(model_name)
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π Ollama")
                        return models
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π Ollama: HTTP {response.status}")
                        return []
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π Ollama: {e}")
            return []