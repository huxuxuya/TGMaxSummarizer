"""
–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
import logging
import re
from typing import List, Dict, Optional, Any
from datetime import datetime

from ai_providers import ProviderFactory
from config import AI_PROVIDERS, DEFAULT_AI_PROVIDER, FALLBACK_PROVIDERS, ENABLE_REFLECTION, AUTO_IMPROVE_SUMMARY
from telegram_formatter import TelegramFormatter

logger = logging.getLogger(__name__)

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç)
    """
    # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç TelegramMessageSender
    return text

class ChatAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —á–∞—Ç–æ–≤
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.py)
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
        if config is None or isinstance(config, str):
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ AI_PROVIDERS
            self.config = {}
            for provider_name, provider_config in AI_PROVIDERS.items():
                if provider_name == 'gigachat':
                    self.config['GIGACHAT_API_KEY'] = provider_config.get('api_key', '')
                elif provider_name == 'chatgpt':
                    self.config['OPENAI_API_KEY'] = provider_config.get('api_key', '')
                elif provider_name == 'openrouter':
                    self.config['OPENROUTER_API_KEY'] = provider_config.get('api_key', '')
                elif provider_name == 'gemini':
                    self.config['GEMINI_API_KEY'] = provider_config.get('api_key', '')
        else:
            self.config = config
            
        self.provider_factory = ProviderFactory()
        self.current_provider = None
        self.provider_history = []
        
        logger.info("‚úÖ ChatAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
        logger.debug(f"üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ChatAnalyzer: {self.config}")
    
    async def analyze_chat_by_date(self, messages: List[Dict], provider_name: Optional[str] = None, chat_context: Optional[Dict] = None) -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            provider_name: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
            chat_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if provider_name:
                provider = self.provider_factory.create_provider(provider_name, self.config)
                if not provider:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                    return None
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                best_provider_name = await self.provider_factory.get_best_available_provider(
                    self.config, 
                    DEFAULT_AI_PROVIDER
                )
                if not best_provider_name:
                    logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
                    return None
                
                provider = self.provider_factory.create_provider(best_provider_name, self.config)
                provider_name = best_provider_name
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if not await provider.initialize():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                
                # –ü—Ä–æ–±—É–µ–º fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
                for fallback_name in FALLBACK_PROVIDERS:
                    if fallback_name != provider_name:
                        logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {fallback_name}")
                        fallback_provider = self.provider_factory.create_provider(fallback_name, self.config)
                        if fallback_provider and await fallback_provider.initialize():
                            provider = fallback_provider
                            provider_name = fallback_name
                            break
                else:
                    logger.error("‚ùå –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    return None
            
            # –ï—Å–ª–∏ —ç—Ç–æ OpenRouter, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å
            if provider_name == 'openrouter' and hasattr(provider, 'set_model'):
                user_model = self.db.get_user_openrouter_model(user_id)
                if user_model:
                    provider.set_model(user_model)
                    logger.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å OpenRouter: {user_model}")
            
            self.current_provider = provider
            self.provider_history.append({
                'provider': provider_name,
                'timestamp': datetime.now(),
                'messages_count': len(messages)
            })
            
            logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.get_display_name()}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summary = await provider.summarize_chat(messages, chat_context)
            
            if summary:
                logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {provider.get_display_name()}")
                return summary
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –æ—Ç {provider.get_display_name()}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Ç–∞: {e}")
            return None
    
    async def get_available_providers(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            available_providers = []
            
            for provider_name in self.provider_factory.get_available_providers():
                provider = self.provider_factory.create_provider(provider_name, self.config)
                if provider:
                    is_available = await provider.is_available()
                    provider_info = provider.get_provider_info()
                    provider_info['available'] = is_available
                    provider_info['name'] = provider_name
                    available_providers.append(provider_info)
            
            return available_providers
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            return []
    
    async def validate_provider(self, provider_name: str) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            provider_name: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤–∞–ª–∏–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            provider = self.provider_factory.create_provider(provider_name, self.config)
            if not provider:
                return False
            
            return await provider.is_available()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}: {e}")
            return False
    
    def get_provider_info(self, provider_name: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        
        Args:
            provider_name: –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ –∏–ª–∏ None
        """
        return self.provider_factory.get_provider_info(provider_name, self.config)
    
    def get_current_provider(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–ª–∏ None
        """
        return self.current_provider.get_name() if self.current_provider else None
    
    def get_provider_history(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        """
        return self.provider_history.copy()
    
    async def test_all_providers(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            results = {}
            
            for provider_name in self.provider_factory.get_available_providers():
                logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                is_available = await self.validate_provider(provider_name)
                results[provider_name] = is_available
                
                status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if is_available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                logger.info(f"   {status}")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            return {}
    
    def get_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_analyses = len(self.provider_history)
        
        if total_analyses == 0:
            return {
                'total_analyses': 0,
                'providers_used': {},
                'current_provider': None
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        providers_used = {}
        for entry in self.provider_history:
            provider = entry['provider']
            providers_used[provider] = providers_used.get(provider, 0) + 1
        
        return {
            'total_analyses': total_analyses,
            'providers_used': providers_used,
            'current_provider': self.get_current_provider(),
            'last_analysis': self.provider_history[-1] if self.provider_history else None
        }
    
    # Backward compatibility methods
    def optimize_text(self, messages: List[Dict]) -> List[Dict]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —á–∞—Ç–∞ (backward compatibility)
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if self.current_provider:
            return self.current_provider.optimize_text(messages)
        else:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            import re
            optimized_messages = []
            
            for msg in messages:
                text = msg.get('text', '').strip()
                if not text:
                    continue
                    
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
                text = re.sub(r'\s+', ' ', text)
                text = re.sub(r'[^\w\s\.,!?\-:;()]', '', text)
                
                if len(text) > 200:
                    text = text[:200] + "..."
                
                sender_name = msg.get('sender_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                time = msg.get('message_time', 0)
                
                if time:
                    try:
                        dt = datetime.fromtimestamp(time / 1000)
                        time_str = dt.strftime('%H:%M')
                    except (ValueError, OSError):
                        time_str = "??:??"
                else:
                    time_str = "??:??"
                
                optimized_messages.append({
                    'time': time_str,
                    'sender': sender_name,
                    'text': text
                })
            
            return optimized_messages
    
    def format_chat_for_analysis(self, messages: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (backward compatibility)
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if self.current_provider:
            return self.current_provider.format_messages_for_analysis(messages)
        else:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            formatted_lines = []
            
            for msg in messages:
                time_str = msg.get('time', '??:??')
                sender = msg.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                text = msg.get('text', '')
                
                if text.strip():
                    line = f"[{time_str}] {sender}: {text}"
                    formatted_lines.append(line)
            
            full_text = "\n".join(formatted_lines)
            
            max_length = 8000
            if len(full_text) > max_length:
                full_text = full_text[:max_length] + "\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)"
            
            return full_text
    
    async def analyze_chat_with_specific_model(self, messages: List[Dict], provider_name: str, model_id: str = None, user_id: int = None) -> Optional[str]:
        """
        –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é (–¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ)
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            provider_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            model_id: ID –º–æ–¥–µ–ª–∏ (–¥–ª—è OpenRouter)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é: {provider_name}")
            if model_id:
                logger.info(f"üîó –ú–æ–¥–µ–ª—å: {model_id}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider = self.provider_factory.create_provider(provider_name, self.config)
            if not provider:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                return None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if not await provider.initialize():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}")
                return None
            
            # –ï—Å–ª–∏ —ç—Ç–æ OpenRouter –∏ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
            if provider_name == 'openrouter' and model_id and hasattr(provider, 'set_model'):
                provider.set_model(model_id)
                logger.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å OpenRouter: {model_id}")
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            optimized_messages = self.optimize_text(messages)
            if not optimized_messages:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return None
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            formatted_text = self.format_chat_for_analysis(optimized_messages)
            if not formatted_text:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            chat_context = {
                'total_messages': len(messages),
                'date': messages[0].get('message_time', 0) if messages else 0,
                'provider': provider_name,
                'model': model_id
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
            summary = await provider.summarize_chat(optimized_messages, chat_context)
            
            if summary:
                logger.info(f"‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {provider_name}")
                if model_id:
                    logger.info(f"üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_id}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                logger.debug(f"=== REFLECTION CHECK ===")
                logger.debug(f"ENABLE_REFLECTION value: {ENABLE_REFLECTION}")
                logger.debug(f"ENABLE_REFLECTION type: {type(ENABLE_REFLECTION)}")
                
                if ENABLE_REFLECTION:
                    logger.debug("=== REFLECTION ENABLED ===")
                    logger.debug(f"Provider: {provider}")
                    logger.debug(f"Summary: {summary[:100]}...")
                    logger.debug(f"Optimized messages count: {len(optimized_messages)}")
                    logger.debug(f"Chat context: {chat_context}")
                    
                    reflection = await self.perform_reflection(provider, summary, optimized_messages, chat_context)
                    logger.debug(f"Reflection result: {reflection}")
                    
                    if reflection:
                        logger.info("üîÑ –†–µ—Ñ–ª–µ–∫—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        logger.debug(f"Reflection text: {reflection[:200]}...")
                        
                        # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç TelegramMessageSender
                        escaped_reflection = reflection
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                        if AUTO_IMPROVE_SUMMARY:
                            improved_summary = await self.improve_summary_with_reflection(
                                provider, summary, reflection, optimized_messages, chat_context
                            )
                            if improved_summary:
                                logger.info("‚ú® –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–µ–Ω–∞")
                                escaped_improved = improved_summary
                                return f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n---\n\n*ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ –∞–Ω–∞–ª–∏–∑:*\n{escaped_reflection}\n\n---\n\n*‚ú® –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{escaped_improved}"
                            else:
                                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π")
                                return f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n---\n\n*ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è:*\n{escaped_reflection}"
                        else:
                            return f"*üìù –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è:*\n{summary}\n\n---\n\n*ü§î –†–µ—Ñ–ª–µ–∫—Å–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è:*\n{escaped_reflection}"
                    else:
                        logger.warning("‚ö†Ô∏è –†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
                        logger.debug("=== REFLECTION FAILED ===")
                        return summary
                else:
                    logger.info("‚ÑπÔ∏è –†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                    logger.debug("=== REFLECTION DISABLED ===")
                    return summary
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –æ—Ç {provider_name}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª—å—é: {e}")
            return None
    
    async def perform_reflection(self, provider, summary: str, messages: List[Dict], chat_context: Dict) -> Optional[str]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –µ—ë —É–ª—É—á—à–µ–Ω–∏—è
        
        Args:
            provider: AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            summary: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info("ü§î –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π")
            logger.debug(f"Summary length: {len(summary)}")
            logger.debug(f"Messages count: {len(messages)}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            reflection_prompt = self._create_reflection_prompt(summary, messages, chat_context)
            logger.debug(f"Reflection prompt length: {len(reflection_prompt)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            logger.debug("Calling provider.generate_response for reflection...")
            reflection_result = await provider.generate_response(reflection_prompt)
            
            if reflection_result:
                logger.info("‚úÖ –†–µ—Ñ–ª–µ–∫—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                logger.debug(f"Reflection result length: {len(reflection_result)}")
                return reflection_result
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
                logger.debug("Reflection result is None or empty")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}")
            return None
    
    def _create_reflection_prompt(self, summary: str, messages: List[Dict], chat_context: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –Ω–∞–¥ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
        
        Args:
            summary: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        """
        total_messages = len(messages)
        date = chat_context.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –≤—ã–±–æ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        sample_messages = messages[:5] if len(messages) > 5 else messages
        sample_text = "\n".join([
            f"- {msg.get('sender_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}: {msg.get('text', '')[:100]}..."
            for msg in sample_messages
        ])
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞.

–ö–û–ù–¢–ï–ö–°–¢:
- –î–∞—Ç–∞ —á–∞—Ç–∞: {date}
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
- –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
{sample_text}

–ò–°–•–û–î–ù–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:
{summary}

–ó–ê–î–ê–ß–ê –ê–ù–ê–õ–ò–ó–ê:
1. –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
   - –ü–æ–ª–Ω–æ—Ç–∞ –æ—Ö–≤–∞—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º
   - –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å
   - –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤

2. –ü–æ–∏—Å–∫ —É–ª—É—á—à–µ–Ω–∏–π: –û–ø—Ä–µ–¥–µ–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:
   - –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã
   - –ù–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è
   - –ü–ª–æ—Ö–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
   - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
   - –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
   - –õ—É—á—à—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑–ª–æ–∂–µ–Ω–∏—è
   - –í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å

4. –û—Ü–µ–Ω–∫–∞: –î–∞–π –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (1-10) –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:
[–¢–≤–æ–π –∞–Ω–∞–ª–∏–∑]

–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:
[–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º]

–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]

–û—Ü–µ–Ω–∫–∞: X/10
[–ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏]

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."""

        return prompt
    
    async def improve_summary_with_reflection(self, provider, original_summary: str, reflection: str, messages: List[Dict], chat_context: Dict) -> Optional[str]:
        """
        –£–ª—É—á—à–∞–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        
        Args:
            provider: AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            original_summary: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            reflection: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info("‚ú® –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            improvement_prompt = self._create_improvement_prompt(original_summary, reflection, messages, chat_context)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            improved_summary = await provider.generate_response(improvement_prompt)
            
            if improved_summary:
                logger.info("‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω–∞")
                return improved_summary
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return None
    
    def _create_improvement_prompt(self, original_summary: str, reflection: str, messages: List[Dict], chat_context: Dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        
        Args:
            original_summary: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
            reflection: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            messages: –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
            
        Returns:
            –ü—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        """
        total_messages = len(messages)
        date = chat_context.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –≤—ã–±–æ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        sample_messages = messages[:10] if len(messages) > 10 else messages
        sample_text = "\n".join([
            f"- {msg.get('sender_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}: {msg.get('text', '')[:150]}..."
            for msg in sample_messages
        ])
        
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —á–∞—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, —É—á—Ç—è –∑–∞–º–µ—á–∞–Ω–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.

–ö–û–ù–¢–ï–ö–°–¢:
- –î–∞—Ç–∞ —á–∞—Ç–∞: {date}
- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
- –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
{sample_text}

–ò–°–•–û–î–ù–ê–Ø –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–Ø:
{original_summary}

–†–ï–§–õ–ï–ö–°–ò–Ø –ò –ó–ê–ú–ï–ß–ê–ù–ò–Ø:
{reflection}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è:

1. –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ - –∏—Å–ø—Ä–∞–≤—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏
2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã - –æ—Å—Ç–∞–≤—å —Ç–æ, —á—Ç–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–µ—Ä—Å–∏–∏
3. –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –≤–∫–ª—é—á–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã
4. –£–ª—É—á—à–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É - —Å–¥–µ–ª–∞–π –∏–∑–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª–µ–µ –ª–æ–≥–∏—á–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º
5. –ü–æ–≤—ã—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å - –∏—Å–ø—Ä–∞–≤—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –£–õ–£–ß–®–ï–ù–ù–û–ô –°–£–ú–ú–ê–†–ò–ó–ê–¶–ò–ò:
- –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∏ —Ç–æ—á–Ω–æ–π, —á–µ–º –∏—Å—Ö–æ–¥–Ω–∞—è
- –î–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –î–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
- –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω–∞—è, –Ω–æ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∑–∞–º–µ—á–∞–Ω–∏–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Å—Ç–æ –¥–∞–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

        return prompt