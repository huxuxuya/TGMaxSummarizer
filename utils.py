"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞
"""
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import re

logger = logging.getLogger(__name__)

def format_message_for_telegram(text: str, max_length: int = 4096) -> List[str]:
    """–†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = text.split('\n\n')
    
    for paragraph in paragraphs:
        if len(current_part) + len(paragraph) + 2 <= max_length:
            if current_part:
                current_part += '\n\n' + paragraph
            else:
                current_part = paragraph
        else:
            if current_part:
                parts.append(current_part)
                current_part = paragraph
            else:
                # –ê–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = re.split(r'(?<=[.!?])\s+', paragraph)
                for sentence in sentences:
                    if len(current_part) + len(sentence) + 1 <= max_length:
                        if current_part:
                            current_part += ' ' + sentence
                        else:
                            current_part = sentence
                    else:
                        if current_part:
                            parts.append(current_part)
                            current_part = sentence
                        else:
                            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
                            parts.append(sentence[:max_length-3] + "...")
    
    if current_part:
        parts.append(current_part)
    
    return parts

def format_date_for_display(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        return date_obj.strftime("%d.%m.%Y")
    except ValueError:
        return date_str

def format_time_for_display(timestamp: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        dt = datetime.fromtimestamp(timestamp / 1000)
        return dt.strftime("%H:%M")
    except (ValueError, OSError):
        return "??:??"

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def format_chat_stats(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* —á–∞—Ç–∞\n\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
    text += f"‚Ä¢ –î–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {stats.get('days_count', 0)}\n\n"
    
    if stats.get('recent_days'):
        text += "üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:*\n"
        for day in stats['recent_days'][:5]:
            date_display = format_date_for_display(day['date'])
            text += f"‚Ä¢ {date_display} ({day['count']} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
    
    return text

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2 –≤ Telegram"""
    import re
    
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è MarkdownV2, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    escape_chars = r'[]()~`>#+-=|{}.!'
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–µ–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    escaped_text = re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–æ—á–µ–∫ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ —á–∞—Å—Ç—å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    lines = escaped_text.split('\n')
    for i, line in enumerate(lines):
        if line.strip() and re.match(r'^\s*\d+\.', line):
            lines[i] = re.sub(r'(\d+)\.', r'\1\\.', line, 1)
    return '\n'.join(lines)

def format_summary_for_telegram(summary: str, date: str = None, chat_name: str = None) -> List[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Å MarkdownV2 —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
    # –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è MarkdownV2
    formatted_summary = format_summary_markdown_v2(summary)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π, –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞—Ç–∞
    if date:
        from datetime import datetime
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            date_obj = datetime.strptime(date, '%Y-%m-%d')
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            weekday = weekdays[date_obj.weekday()]
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_date = date_obj.strftime('%d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if chat_name:
                header = f"üì± *{chat_name}* ‚Ä¢ {formatted_date}, {weekday}\n\n"
            else:
                header = f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç {formatted_date}, {weekday}*\n\n"
        except:
            if chat_name:
                header = f"üì± *{chat_name}* ‚Ä¢ {date}\n\n"
            else:
                header = f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç {date}*\n\n"
    else:
        if chat_name:
            header = f"üì± *{chat_name}*\n\n"
        else:
            header = "üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è*\n\n"
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    final_text = header + formatted_summary
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = format_message_for_telegram(final_text)
    
    return parts

def format_summary_markdown_v2(summary: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è MarkdownV2 –≤ Telegram"""
    lines = summary.split('\n')
    formatted_lines = []
    
    for line in lines:
        original_line = line
        line_stripped = line.strip()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
        if line_stripped.startswith('## üö® –¢–†–ï–ë–£–ï–¢ –î–ï–ô–°–¢–í–ò–ô:'):
            formatted_lines.append('*üö® –¢–†–ï–ë–£–ï–¢ –î–ï–ô–°–¢–í–ò–ô:*')
        elif line_stripped.startswith('## üìã –ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê:'):
            formatted_lines.append('*üìã –ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê:*')
        elif line_stripped.startswith('## üìÖ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:'):
            formatted_lines.append('*üìÖ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:*')
        elif line_stripped.startswith('## ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:'):
            formatted_lines.append('*‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:*')
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ## - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        elif line_stripped.startswith('## '):
            header_text = line_stripped[3:].strip()  # –£–±–∏—Ä–∞–µ–º ##
            formatted_lines.append(f'*{header_text}*')
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤
        elif line_stripped.startswith('- '):
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
            indent_count = len(line) - len(line.lstrip())
            indent_spaces = ' ' * indent_count
            
            item_text = line_stripped[2:].strip()
            if item_text:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º **–∂–∏—Ä–Ω—ã–π** –≤ *–∂–∏—Ä–Ω—ã–π* –¥–ª—è MarkdownV2
                item_text = item_text.replace('**', '*')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞
                formatted_lines.append(f"{indent_spaces}‚Ä¢ {item_text}")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        elif not line_stripped:
            formatted_lines.append('')
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ** –≤ * –¥–ª—è MarkdownV2, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ç—Å—Ç—É–ø—ã
        else:
            if original_line:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º **–∂–∏—Ä–Ω—ã–π** –≤ *–∂–∏—Ä–Ω—ã–π* –¥–ª—è MarkdownV2
                converted_line = original_line.replace('**', '*')
                formatted_lines.append(converted_line)
    
    return '\n'.join(formatted_lines)

def validate_chat_id(chat_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID —á–∞—Ç–∞"""
    try:
        # ID —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
        int(chat_id)
        return True
    except ValueError:
        return False

def get_date_range(days: int = 7) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
    dates = []
    today = datetime.now().date()
    
    for i in range(days):
        date = today - timedelta(days=i)
        dates.append(date.strftime("%Y-%m-%d"))
    
    return dates

def format_error_message(error: Exception) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    error_msg = str(error)
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    if len(error_msg) > 200:
        error_msg = error_msg[:200] + "..."
    
    return f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"

def format_success_message(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    return f"‚úÖ {message}"

def format_info_message(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return f"‚ÑπÔ∏è {message}"

def format_warning_message(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    return f"‚ö†Ô∏è {message}"

def shorten_callback_data(callback_data: str, max_length: int = 60) -> str:
    """
    –°–æ–∫—Ä–∞—â–∞–µ—Ç callback_data –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    Args:
        callback_data: –ò—Å—Ö–æ–¥–Ω—ã–π callback_data
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ 64)
    
    Returns:
        –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π callback_data
    """
    if len(callback_data) <= max_length:
        return callback_data
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback —Å model_id, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å model_id
    if ':' in callback_data:
        prefix, model_id = callback_data.split(':', 1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è model_id
        max_model_id_length = max_length - len(prefix) - 1  # -1 –¥–ª—è ':'
        
        if len(model_id) > max_model_id_length:
            # –°–æ–∫—Ä–∞—â–∞–µ–º model_id, –æ—Å—Ç–∞–≤–ª—è—è –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
            if max_model_id_length < 10:
                # –ï—Å–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–æ –º–µ—Å—Ç–∞, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
                shortened_model_id = model_id[:max_model_id_length]
            else:
                # –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
                start_length = max_model_id_length // 2
                end_length = max_model_id_length - start_length - 3  # -3 –¥–ª—è '...'
                shortened_model_id = model_id[:start_length] + '...' + model_id[-end_length:]
            
            return f"{prefix}:{shortened_model_id}"
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ-—É–º–Ω–æ–º—É, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º
    return callback_data[:max_length]

def format_summary_for_telegram_html(summary: str, date: str = None, chat_name: str = None) -> List[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ collapsed block quotation"""
    from telegram_formatter import TelegramFormatter
    
    # –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è HTML
    formatted_summary = format_summary_html(summary)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π, –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞—Ç–∞
    if date:
        from datetime import datetime
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            date_obj = datetime.strptime(date, '%Y-%m-%d')
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            weekday = weekdays[date_obj.weekday()]
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_date = date_obj.strftime('%d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
            if chat_name:
                escaped_chat_name = TelegramFormatter.escape_html(chat_name)
                escaped_date = TelegramFormatter.escape_html(formatted_date)
                escaped_weekday = TelegramFormatter.escape_html(weekday)
                header = f"üì± <b>{escaped_chat_name}</b> ‚Ä¢ {escaped_date}, {escaped_weekday}\n\n"
            else:
                escaped_date = TelegramFormatter.escape_html(formatted_date)
                escaped_weekday = TelegramFormatter.escape_html(weekday)
                header = f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç {escaped_date}, {escaped_weekday}</b>\n\n"
        except:
            if chat_name:
                escaped_chat_name = TelegramFormatter.escape_html(chat_name)
                escaped_date = TelegramFormatter.escape_html(date)
                header = f"üì± <b>{escaped_chat_name}</b> ‚Ä¢ {escaped_date}\n\n"
            else:
                escaped_date = TelegramFormatter.escape_html(date)
                header = f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç {escaped_date}</b>\n\n"
    else:
        if chat_name:
            escaped_chat_name = TelegramFormatter.escape_html(chat_name)
            header = f"üì± <b>{escaped_chat_name}</b>\n\n"
        else:
            header = "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è</b>\n\n"
    
    # –°–æ–∑–¥–∞–µ–º collapsed block quotation –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    collapsed_summary = f'<blockquote expandable>\n{formatted_summary}\n</blockquote>'
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ collapsed —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
    final_text = header + collapsed_summary
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = format_message_for_telegram(final_text)
    
    return parts

def format_summary_html(summary: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è HTML –≤ Telegram"""
    from telegram_formatter import TelegramFormatter
    
    lines = summary.split('\n')
    formatted_lines = []
    
    for line in lines:
        original_line = line
        line_stripped = line.strip()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è HTML
        if line_stripped.startswith('## üö® –¢–†–ï–ë–£–ï–¢ –î–ï–ô–°–¢–í–ò–ô:'):
            formatted_lines.append('<b>üö® –¢–†–ï–ë–£–ï–¢ –î–ï–ô–°–¢–í–ò–ô:</b>')
        elif line_stripped.startswith('## üìã –ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê:'):
            formatted_lines.append('<b>üìã –ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê:</b>')
        elif line_stripped.startswith('## üìÖ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:'):
            formatted_lines.append('<b>üìÖ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:</b>')
        elif line_stripped.startswith('## ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:'):
            formatted_lines.append('<b>‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:</b>')
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ## - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        elif line_stripped.startswith('## '):
            header_text = line_stripped[3:].strip()  # –£–±–∏—Ä–∞–µ–º ##
            escaped_header = TelegramFormatter.escape_html(header_text)
            formatted_lines.append(f'<b>{escaped_header}</b>')
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç—Å—Ç—É–ø–æ–≤
        elif line_stripped.startswith('- '):
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
            indent_count = len(line) - len(line.lstrip())
            indent_spaces = ' ' * indent_count
            
            item_text = line_stripped[2:].strip()
            if item_text:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º **–∂–∏—Ä–Ω—ã–π** –≤ <b>–∂–∏—Ä–Ω—ã–π</b> –¥–ª—è HTML
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–º–µ–Ω—ã
                import re
                item_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', item_text)
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
                escaped_item = TelegramFormatter.escape_html(item_text)
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥–∏ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                escaped_item = escaped_item.replace('&lt;b&gt;', '<b>').replace('&lt;/b&gt;', '</b>')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞
                formatted_lines.append(f"{indent_spaces}‚Ä¢ {escaped_item}")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        elif not line_stripped:
            formatted_lines.append('')
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ** –≤ <b></b> –¥–ª—è HTML, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ç—Å—Ç—É–ø—ã
        else:
            if original_line:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º **–∂–∏—Ä–Ω—ã–π** –≤ <b>–∂–∏—Ä–Ω—ã–π</b> –¥–ª—è HTML
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–º–µ–Ω—ã
                import re
                converted_line = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', original_line)
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
                escaped_line = TelegramFormatter.escape_html(converted_line)
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥–∏ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                escaped_line = escaped_line.replace('&lt;b&gt;', '<b>').replace('&lt;/b&gt;', '</b>')
                formatted_lines.append(escaped_line)
    
    return '\n'.join(formatted_lines)

def format_summary_for_telegram_html_universal(summary: str, date: str = None, chat_name: str = None) -> List[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º HTML –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º"""
    from telegram_formatter import TelegramFormatter
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Markdown –≤ HTML
    formatted_summary = TelegramFormatter.markdown_to_html_universal(summary, telegram_safe=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–∞—Ç–æ–π, –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —á–∞—Ç–∞
    if date:
        from datetime import datetime
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            date_obj = datetime.strptime(date, '%Y-%m-%d')
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            weekday = weekdays[date_obj.weekday()]
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_date = date_obj.strftime('%d.%m.%Y')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
            if chat_name:
                escaped_chat_name = TelegramFormatter.escape_html(chat_name)
                escaped_date = TelegramFormatter.escape_html(formatted_date)
                escaped_weekday = TelegramFormatter.escape_html(weekday)
                header = f"üì± <b>{escaped_chat_name}</b> ‚Ä¢ {escaped_date}, {escaped_weekday}\n\n"
            else:
                escaped_date = TelegramFormatter.escape_html(formatted_date)
                escaped_weekday = TelegramFormatter.escape_html(weekday)
                header = f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç {escaped_date}, {escaped_weekday}</b>\n\n"
        except:
            if chat_name:
                escaped_chat_name = TelegramFormatter.escape_html(chat_name)
                escaped_date = TelegramFormatter.escape_html(date)
                header = f"üì± <b>{escaped_chat_name}</b> ‚Ä¢ {escaped_date}\n\n"
            else:
                escaped_date = TelegramFormatter.escape_html(date)
                header = f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç {escaped_date}</b>\n\n"
    else:
        if chat_name:
            escaped_chat_name = TelegramFormatter.escape_html(chat_name)
            header = f"üì± <b>{escaped_chat_name}</b>\n\n"
        else:
            header = "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è</b>\n\n"
    
    # –°–æ–∑–¥–∞–µ–º collapsed block quotation –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    collapsed_summary = f'<blockquote expandable>\n{formatted_summary}\n</blockquote>'
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ collapsed —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
    final_text = header + collapsed_summary
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = format_message_for_telegram(final_text)
    
    return parts
