#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
"""
import os
import asyncio
import logging
import time
from database import DatabaseManager
from chat_analyzer import ChatAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def estimate_tokens(text: str) -> int:
    """
    –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    (–ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
    """
    return len(text) // 4

def calculate_tokens_per_second(response_text: str, duration: float) -> float:
    """
    –í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    """
    if duration <= 0:
        return 0.0
    
    tokens = estimate_tokens(response_text)
    return tokens / duration

def format_duration(seconds: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    """
    if seconds < 60:
        return f"{seconds:.1f}—Å"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = seconds % 60
        return f"{minutes}–º {secs:.1f}—Å"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = seconds % 60
        return f"{hours}—á {minutes}–º {secs:.1f}—Å"

async def main():
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n")
    
    # 1. –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    models = {
        '1': 'deepseek-r1:8b',
        '2': 'gemma3:12b',
        '3': 'qwen3:8b'
    }
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Ollama:")
    for key, model in models.items():
        print(f"  {key}. {model}")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (1-3): ").strip()
    model_name = models.get(choice)
    
    if not model_name:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}\n")
    
    # 2. –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
    print("  1. –ë–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ (–±—ã—Å—Ç—Ä–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è)")
    print("  2. –° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π (–∞–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ)")
    print("  3. –° –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + —Ä–µ—Ñ–ª–µ–∫—Å–∏—è)")
    print("  4. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è + —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è + —Å–≤–æ–¥–∫–∞)")
    print("  5. –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)")
    
    scenario_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π (1-5): ").strip()
    
    if scenario_choice not in ['1', '2', '3', '4', '5']:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è")
        return
    
    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_choice}\n")
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    try:
        db = DatabaseManager('bot_database.db')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_groups = db.get_all_groups()
        
        if not all_groups:
            print("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
        chat_info = all_groups[0]
        group_id = chat_info['group_id']
        chat_name = chat_info.get('group_name', 'Unknown')
        
        print(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥—Ä—É–ø–ø–∞: {chat_name} (ID: {group_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º vk_chat_id –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        vk_chats = db.get_group_vk_chats(group_id)
        if not vk_chats:
            print("‚ùå –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö VK —á–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã")
            return
        
        vk_chat_id = vk_chats[0]['chat_id']
        print(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è VK —á–∞—Ç: {vk_chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ 13.10.2025
        messages = db.get_messages_by_date(vk_chat_id, "2025-10-13")
        
        if not messages:
            print("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 13.10.2025")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    os.environ['TEST_MODE'] = 'true'
    os.environ['TEST_MODEL_NAME'] = model_name
    os.environ['ENABLE_LLM_LOGGING'] = 'true'
    
    # 5. –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    try:
        analyzer = ChatAnalyzer()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return
    
    # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    all_scenarios = [
        ("1_without_reflection", False, False, False, "–ë–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"),
        ("2_with_reflection", True, False, False, "–° —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π"),
        ("3_with_cleaning", True, True, False, "–° –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"),
        ("4_structured_analysis", False, False, True, "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if scenario_choice == '1':
        scenarios_to_run = [all_scenarios[0]]
    elif scenario_choice == '2':
        scenarios_to_run = [all_scenarios[1]]
    elif scenario_choice == '3':
        scenarios_to_run = [all_scenarios[2]]
    elif scenario_choice == '4':
        scenarios_to_run = [all_scenarios[3]]
    else:  # scenario_choice == '5'
        scenarios_to_run = all_scenarios
    
    results = {}
    
    # 7. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    performance_stats = {}
    
    for scenario_name, enable_reflection, clean_data_first, structured_analysis, description in scenarios_to_run:
        print(f"üîÑ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: {description} ({scenario_name})...")
        
        start_time = time.time()
        
        try:
            if structured_analysis:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                result = await analyzer.structured_analysis_with_specific_model(
                    messages=messages,
                    provider_name="ollama",
                    model_name=model_name,
                    user_id=None
                )
            else:
                # –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                result = await analyzer.analyze_chat_with_specific_model(
                    messages=messages,
                    provider_name="ollama",
                    model_id=model_name,
                    user_id=None,
                    enable_reflection=enable_reflection,
                    clean_data_first=clean_data_first
                )
            
            end_time = time.time()
            duration = end_time - start_time
            
            if result:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
                if isinstance(result, dict):
                    if structured_analysis:
                        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                        summary_text = result.get('summary', '') or ''
                        events = result.get('events', [])
                        classification = result.get('classification', [])
                        
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                        events_text = str(events) if events else ''
                        classification_text = str(classification) if classification else ''
                        
                        total_tokens = estimate_tokens(summary_text) + estimate_tokens(events_text) + estimate_tokens(classification_text)
                        tokens_per_sec = calculate_tokens_per_second(summary_text + events_text + classification_text, duration)
                    else:
                        # –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π
                        summary_text = result.get('summary', '') or ''
                        reflection_text = result.get('reflection', '') or ''
                        improved_text = result.get('improved', '') or ''
                        
                        total_tokens = estimate_tokens(summary_text) + estimate_tokens(reflection_text) + estimate_tokens(improved_text)
                        tokens_per_sec = calculate_tokens_per_second(summary_text + reflection_text + improved_text, duration)
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å—Ç—Ä–æ–∫–∞ (–±–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏)
                    result_text = str(result) if result else ''
                    total_tokens = estimate_tokens(result_text)
                    tokens_per_sec = calculate_tokens_per_second(result_text, duration)
                
                performance_stats[scenario_name] = {
                    'duration': duration,
                    'tokens': total_tokens,
                    'tokens_per_sec': tokens_per_sec,
                    'success': True
                }
                
                print(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π {description} –∑–∞–≤–µ—Ä—à–µ–Ω")
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {format_duration(duration)}")
                print(f"üî¢ –¢–æ–∫–µ–Ω–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ~{total_tokens}")
                print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {tokens_per_sec:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
                results[scenario_name] = "–£—Å–ø–µ—à–Ω–æ"
            else:
                end_time = time.time()
                duration = end_time - start_time
                performance_stats[scenario_name] = {
                    'duration': duration,
                    'tokens': 0,
                    'tokens_per_sec': 0.0,
                    'success': False
                }
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {description}")
                print(f"‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {format_duration(duration)}")
                results[scenario_name] = "–û—à–∏–±–∫–∞"
                
        except Exception as e:
            end_time = time.time()
            duration = end_time - start_time
            performance_stats[scenario_name] = {
                'duration': duration,
                'tokens': 0,
                'tokens_per_sec': 0.0,
                'success': False
            }
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ {description}: {e}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {format_duration(duration)}")
            results[scenario_name] = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
        
        print()
    
    # 8. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: llm_logs/test_comparison/{model_name}/")
    
    if scenario_choice == '4':
        print("\n–í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
        print("  1. 1_without_reflection/ - –±—ã—Å—Ç—Ä–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
        print("  2. 2_with_reflection/ - —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–∏–µ–º")
        print("  3. 3_with_cleaning/ - —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario_info = {
            '1': ("1_without_reflection", "–±—ã—Å—Ç—Ä–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è"),
            '2': ("2_with_reflection", "—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–∏–µ–º"),
            '3': ("3_with_cleaning", "—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π")
        }
        scenario_name, description = scenario_info[scenario_choice]
        print(f"\n–ó–∞–ø—É—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:")
        print(f"  {scenario_name}/ - {description}")
    
    print("\n–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    for scenario, status in results.items():
        print(f"  {scenario}: {status}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if performance_stats:
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("-" * 60)
        
        for scenario_name, stats in performance_stats.items():
            if stats['success']:
                print(f"  {scenario_name}:")
                print(f"    ‚è±Ô∏è  –í—Ä–µ–º—è: {format_duration(stats['duration'])}")
                print(f"    üî¢ –¢–æ–∫–µ–Ω–æ–≤: ~{stats['tokens']}")
                print(f"    üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {stats['tokens_per_sec']:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
            else:
                print(f"  {scenario_name}: ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å (–æ—à–∏–±–∫–∞)")
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if len(performance_stats) > 1:
            successful_stats = {k: v for k, v in performance_stats.items() if v['success']}
            if successful_stats:
                print("\nüèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:")
                fastest = max(successful_stats.items(), key=lambda x: x[1]['tokens_per_sec'])
                slowest = min(successful_stats.items(), key=lambda x: x[1]['tokens_per_sec'])
                
                print(f"  ü•á –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π: {fastest[0]} ({fastest[1]['tokens_per_sec']:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫)")
                print(f"  üêå –°–∞–º—ã–π –º–µ–¥–ª–µ–Ω–Ω—ã–π: {slowest[0]} ({slowest[1]['tokens_per_sec']:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫)")
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_duration = sum(s['duration'] for s in successful_stats.values())
                total_tokens = sum(s['tokens'] for s in successful_stats.values())
                avg_speed = total_tokens / total_duration if total_duration > 0 else 0
                
                print(f"  üìà –û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
                print(f"    ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {format_duration(total_duration)}")
                print(f"    üî¢ –û–±—â–µ–µ —Ç–æ–∫–µ–Ω–æ–≤: ~{total_tokens}")
                print(f"    üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_speed:.1f} —Ç–æ–∫–µ–Ω–æ–≤/—Å–µ–∫")
    
    print("="*60)

if __name__ == "__main__":
    asyncio.run(main())
