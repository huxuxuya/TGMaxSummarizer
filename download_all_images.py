#!/usr/bin/env python3
"""
üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ VK MAX

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ VK MAX.
"""

import asyncio
import logging
import os
from datetime import datetime
from pathlib import Path

from core.app_context import get_app_context
from infrastructure.vk.client import VKMaxClient
from shared.image_utils import ImageDownloader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

class ImageDownloaderBot:
    """–ë–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ VK MAX"""
    
    def __init__(self):
        self.vk_client = None
        self.image_downloader = ImageDownloader()
        self.stats = {
            'chats_processed': 0,
            'messages_processed': 0,
            'images_found': 0,
            'images_downloaded': 0,
            'errors': 0
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            ctx = get_app_context()
            vk_token = ctx.config['bot'].vk_max_token
            
            if not vk_token:
                logger.error("‚ùå VK MAX —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            self.vk_client = VKMaxClient(vk_token)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX
            logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK MAX...")
            if not await self.vk_client.connect():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VK MAX")
                return False
            
            logger.info("‚úÖ VK MAX –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def download_chat_images(self, chat, days_back=30):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
        logger.info(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç: {chat.title}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.vk_client.load_chat_messages(chat.id, days_back=days_back)
            logger.info(f"   üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            chat_images = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for msg in messages:
                self.stats['messages_processed'] += 1
                
                if hasattr(msg, 'attachments') and msg.attachments:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        image_urls = self.image_downloader.extract_image_urls(msg.attachments)
                        
                        if image_urls:
                            self.stats['images_found'] += len(image_urls)
                            logger.info(f"   üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}: {len(image_urls)}")
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            for i, url in enumerate(image_urls):
                                try:
                                    saved_path = await self.image_downloader.download_image(
                                        url, str(chat.id), str(msg.id), i
                                    )
                                    
                                    if saved_path:
                                        self.stats['images_downloaded'] += 1
                                        chat_images += 1
                                        logger.info(f"      ‚úÖ –°–∫–∞—á–∞–Ω–æ: {saved_path}")
                                    else:
                                        logger.warning(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {url}")
                                        
                                except Exception as e:
                                    logger.error(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
                                    self.stats['errors'] += 1
                    
                    except Exception as e:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")
                        self.stats['errors'] += 1
            
            logger.info(f"   üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {chat_images}")
            return chat_images
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ {chat.title}: {e}")
            self.stats['errors'] += 1
            return 0
    
    async def download_all_images(self, days_back=30):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
        logger.info("üñºÔ∏è –ó–ê–ì–†–£–ó–ö–ê –í–°–ï–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ò–ó VK MAX")
        logger.info("=" * 60)
        
        if not await self.initialize():
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
            chats = await self.vk_client.get_available_chats()
            
            if not chats:
                logger.error("‚ùå –ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            logger.info("üìù –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:")
            for i, chat in enumerate(chats):
                logger.info(f"  {i+1}. {chat.title} (ID: {chat.id})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
            total_images = 0
            for i, chat in enumerate(chats):
                logger.info(f"\n--- –ß–∞—Ç {i+1}/{len(chats)} ---")
                chat_images = await self.download_chat_images(chat, days_back)
                total_images += chat_images
                self.stats['chats_processed'] += 1
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("\n" + "=" * 60)
            logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {self.stats['chats_processed']}")
            logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_processed']}")
            logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.stats['images_found']}")
            logger.info(f"   –°–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.stats['images_downloaded']}")
            logger.info(f"   –û—à–∏–±–æ–∫: {self.stats['errors']}")
            logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.stats['images_downloaded']/max(self.stats['images_found'], 1)*100):.1f}%")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            images_path = Path("images")
            if images_path.exists():
                total_size = sum(f.stat().st_size for f in images_path.rglob('*') if f.is_file())
                logger.info(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size/1024/1024:.1f} MB")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            if self.vk_client:
                await self.vk_client.disconnect()
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VK MAX –∑–∞–∫—Ä—ã—Ç–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    downloader = ImageDownloaderBot()
    
    # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    days_back = 30  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    
    logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π")
    
    await downloader.download_all_images(days_back)

if __name__ == "__main__":
    asyncio.run(main())
