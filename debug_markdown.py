#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º MarkdownV2
"""
import asyncio
import logging
from telegram_formatter import TelegramFormatter, TextContentType
from telegram.helpers import escape_markdown
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

def test_markdown_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
            "text": "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!",
            "content_type": TextContentType.RAW
        },
        {
            "name": "–¢–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–æ–º #",
            "text": "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: Can't parse entities: character '#' is reserved",
            "content_type": TextContentType.RAW
        },
        {
            "name": "–¢–µ–∫—Å—Ç —Å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º",
            "text": "–≠—Ç–æ *–∂–∏—Ä–Ω—ã–π* —Ç–µ–∫—Å—Ç",
            "content_type": TextContentType.FORMATTED
        },
        {
            "name": "–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏",
            "text": "–≠—Ç–æ *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è",
            "content_type": TextContentType.FORMATTED
        },
        {
            "name": "–°–ª–æ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
            "text": "–¢–µ—Å—Ç: [—Å—Å—ã–ª–∫–∞](url), *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, `–∫–æ–¥`, # –∑–∞–≥–æ–ª–æ–≤–æ–∫",
            "content_type": TextContentType.FORMATTED
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}Ô∏è‚É£ {test_case['name']}:")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {test_case['text']}")
        print(f"   Content type: {test_case['content_type']}")
        
        try:
            if test_case['content_type'] == TextContentType.RAW:
                formatted = escape_markdown(test_case['text'], version=2)
                print(f"   –ú–µ—Ç–æ–¥: telegram.helpers.escape_markdown()")
            else:
                formatted = TelegramFormatter.smart_escape_markdown_v2(test_case['text'])
                print(f"   –ú–µ—Ç–æ–¥: TelegramFormatter.smart_escape_markdown_v2()")
            
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {formatted}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–≥–æ–≤
            asterisk_count = formatted.count('*')
            if asterisk_count % 2 != 0:
                print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ ({asterisk_count} –∑–≤–µ–∑–¥–æ—á–µ–∫)")
            else:
                print(f"   ‚úÖ OK: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ ({asterisk_count} –∑–≤–µ–∑–¥–æ—á–µ–∫)")
                
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")

def analyze_problematic_text():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–æ–≤"""
    
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤")
    print("=" * 60)
    
    # –¢–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–∞
    problematic_text = "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: Can't parse entities: character '#' is reserved and must be escaped with the preceding '\\'"
    
    print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç: {problematic_text}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    methods = [
        ("telegram.helpers.escape_markdown", lambda t: escape_markdown(t, version=2)),
        ("TelegramFormatter.smart_escape_markdown_v2", lambda t: TelegramFormatter.smart_escape_markdown_v2(t))
    ]
    
    for method_name, method_func in methods:
        print(f"\nüìù –ú–µ—Ç–æ–¥: {method_name}")
        try:
            result = method_func(problematic_text)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
            chars_to_check = ['*', '_', '#', '\\']
            for char in chars_to_check:
                count = result.count(char)
                if count > 0:
                    print(f"   –°–∏–º–≤–æ–ª '{char}': {count} —Ä–∞–∑")
                    
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")

if __name__ == "__main__":
    test_markdown_formatting()
    analyze_problematic_text()
    
    print("\n" + "=" * 60)
    print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å —ç—Ç–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º")
    print("2. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ—à–∏–±–∫—É")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ 'UNBALANCED BOLD TAGS' –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    print("4. –ù–∞–π–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É")
    print("5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
