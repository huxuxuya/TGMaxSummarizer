#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
"""

import asyncio
import base64
import os
import sys

import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
os.environ['OLLAMA_BASE_URL'] = 'http://192.168.1.75:11434'
OLLAMA_BASE_URL = os.environ.get('OLLAMA_BASE_URL', 'http://192.168.1.75:11434')
DEFAULT_MODEL = "llava"  # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_PATH = "IMG_7386.JPG"

def encode_image_to_base64(image_path: str) -> str:
    """–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def quick_analyze():
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üñºÔ∏è  –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print(f"üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {IMAGE_PATH}")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {DEFAULT_MODEL}")
    print(f"üåê URL: {OLLAMA_BASE_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    if not os.path.exists(IMAGE_PATH):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {IMAGE_PATH}")
        return
    
    # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("\nüñºÔ∏è  –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    image_base64 = encode_image_to_base64(IMAGE_PATH)
    if not image_base64:
        return
    
    # –ü—Ä–æ–º—Ç
    prompt = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å."
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "model": DEFAULT_MODEL,
        "prompt": prompt,
        "images": [image_base64],
        "stream": False
    }
    
    print(f"\nüìù –ü—Ä–æ–º—Ç: {prompt}")
    print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    print("-" * 50)
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{OLLAMA_BASE_URL}/api/generate",
                json=payload,
                timeout=120
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    result = data.get('response', '')
                    
                    print("\n" + "=" * 60)
                    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢:")
                    print("=" * 60)
                    print(result)
                    print("=" * 60)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}")
                    error_text = await response.text()
                    print(f"–î–µ—Ç–∞–ª–∏: {error_text}")
    except asyncio.TimeoutError:
        print("‚ùå –¢–∞–π–º–∞—É—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(quick_analyze())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
