#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from core.app_context import get_app_context
from domains.chats.image_analysis_service import ImageAnalysisService
from domains.chats.repository import MessageRepository

async def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    ctx = get_app_context()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞
    image_service = ImageAnalysisService(
        ollama_base_url=ctx.config['bot'].ollama_base_url,
        default_model=ctx.config['bot'].default_image_analysis_model,
        default_prompt=ctx.config['bot'].default_image_analysis_prompt,
        max_concurrent=ctx.config['bot'].image_analysis_max_concurrent
    )
    
    message_repo = ctx.chat_service.message_repo
    
    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   Ollama URL: {ctx.config['bot'].ollama_base_url}")
    print(f"   –ú–æ–¥–µ–ª—å: {ctx.config['bot'].default_image_analysis_model}")
    print(f"   –ü—Ä–æ–º–ø—Ç: {ctx.config['bot'].default_image_analysis_prompt[:50]}...")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama...")
    models = await image_service.get_available_models()
    if models:
        print(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(models[:5])}")
    else:
        print("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π")
        return
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
    vk_chat_id = "-68245000186538"  # –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
    
    messages_with_images = message_repo.get_messages_with_images(vk_chat_id)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(messages_with_images)}")
    
    if not messages_with_images:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    first_msg = messages_with_images[0]
    print(f"\nüìù –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(f"   ID: {first_msg.message_id}")
    print(f"   –î–∞—Ç–∞: {first_msg.date}")
    print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(first_msg.image_paths)}")
    print(f"   –ü—É—Ç–∏: {first_msg.image_paths}")
    print(f"   –£–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(first_msg.image_analysis) if first_msg.image_analysis else 0}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if first_msg.image_paths:
        image_path = Path("images") / first_msg.image_paths[0]
        if image_path.exists():
            print(f"‚úÖ –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {image_path}")
            print(f"   –†–∞–∑–º–µ—Ä: {image_path.stat().st_size / 1024:.1f} KB")
        else:
            print(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            return
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("üñºÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    test_image_path = "images/" + first_msg.image_paths[0]
    
    analysis_result = await image_service.analyze_image(
        test_image_path,
        model=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        prompt=None  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    )
    
    if analysis_result:
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω!")
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   {analysis_result[:200]}...")
        print()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print("üîç –ü–æ–∏—Å–∫ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    unanalyzed = await image_service.get_unanalyzed_messages(vk_chat_id, message_repo)
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(unanalyzed)}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î
    print("üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î...")
    test_analysis_data = [{
        "image_path": first_msg.image_paths[0],
        "analysis": analysis_result,
        "analyzed_at": "2025-10-18T00:00:00",
        "model": ctx.config['bot'].default_image_analysis_model,
        "prompt": ctx.config['bot'].default_image_analysis_prompt
    }]
    
    success = message_repo.update_message_analysis(first_msg.message_id, test_analysis_data)
    if success:
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞...")
    stats = message_repo.get_chat_stats(vk_chat_id)
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.total_messages}")
    print(f"   –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats.total_images}")
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.analyzed_images}")
    print(f"   –ù–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats.unanalyzed_images}")
    print()
    
    print("=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("=" * 60)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

